
// This file is generated by pre_generator.py

#pragma once

#include "module.h"
#include "config.h"
#include <string>
#include <vector>
#include <map>
#include <optional>

namespace ArduinoJson {
template <typename T>
struct Converter<std::vector<T> > {
  static void toJson(const std::vector<T>& src, JsonVariant dst) {
    JsonArray array = dst.to<JsonArray>();
    for (T item : src)
      array.add(item);
  }

  static std::vector<T> fromJson(JsonVariantConst src) {
    std::vector<T> dst;
    for (T item : src.as<JsonArrayConst>())
      dst.push_back(item);
    return dst;
  }

  static bool checkJson(JsonVariantConst src) {
    JsonArrayConst array = src;
    bool result = array;
    for (JsonVariantConst item : array)
      result &= item.is<T>();
    return result;
  }
};
}  // namespace ArduinoJson

struct DateTimeStruct { // Added manually
    std::optional<uint16_t> year;
    std::optional<uint8_t> month;
    std::optional<uint8_t> day;
    std::optional<uint8_t> hour;
    std::optional<uint8_t> minute;
    std::optional<uint8_t> second;
    std::optional<uint16_t> millisecond;
    std::optional<int8_t> timezone; // Offset from UTC in hours, 0 if time is UTC, empty if no TZ is given
};


struct MessagingTypeType;
struct AbsoluteOrRelativeTimeType;
struct RecurringIntervalType;
struct OccurrenceType;
struct CommodityTypeType;
struct EnergyDirectionType;
struct EnergyModeType;
struct UnitOfMeasurementType;
struct CurrencyType;
struct ScopeTypeType;
struct DeviceTypeType;
struct EntityTypeType;
struct FeatureTypeType;
struct FeatureSpecificUsageType;
struct FeatureSpecificUsageEnumType;
struct FunctionType;
struct MessagingDataType;
struct MessagingDataElementsType;
struct MessagingListDataType;
struct MessagingListDataSelectorsType;
struct ElementTagType;
struct TimePeriodType;
struct TimePeriodElementsType;
struct TimestampIntervalType;
struct DaysOfWeekType;
struct AbsoluteOrRecurringTimeType;
struct AbsoluteOrRecurringTimeElementsType;
struct RecurrenceInformationType;
struct RecurrenceInformationElementsType;
struct ScaledNumberRangeType;
struct ScaledNumberRangeElementsType;
struct ScaledNumberSetType;
struct ScaledNumberSetElementsType;
struct ScaledNumberType;
struct ScaledNumberElementsType;
struct DeviceAddressType;
struct DeviceAddressElementsType;
struct EntityAddressType;
struct EntityAddressElementsType;
struct FeatureAddressType;
struct FeatureAddressElementsType;
struct PossibleOperationsClassifierType;
struct PossibleOperationsReadType;
struct PossibleOperationsWriteType;
struct PossibleOperationsType;
struct PossibleOperationsElementsType;
struct FunctionPropertyType;
struct FunctionPropertyElementsType;
struct TimeSeriesTypeType;
struct MeasurementTypeType;
struct MeasurementValueTypeType;
struct MeasurementValueSourceType;
struct MeasurementValueTendencyType;
struct MeasurementValueStateType;
struct ThresholdTypeType;
struct TimeSeriesSlotType;
struct TimeSeriesSlotElementsType;
struct TimeSeriesDataType;
struct TimeSeriesDataElementsType;
struct TimeSeriesListDataType;
struct TimeSeriesListDataSelectorsType;
struct TimeSeriesDescriptionDataType;
struct TimeSeriesDescriptionDataElementsType;
struct TimeSeriesDescriptionListDataType;
struct TimeSeriesDescriptionListDataSelectorsType;
struct TimeSeriesConstraintsDataType;
struct TimeSeriesConstraintsDataElementsType;
struct TimeSeriesConstraintsListDataType;
struct TimeSeriesConstraintsListDataSelectorsType;
struct MeasurementDataType;
struct MeasurementDataElementsType;
struct MeasurementListDataType;
struct MeasurementListDataSelectorsType;
struct MeasurementSeriesDataType;
struct MeasurementSeriesDataElementsType;
struct MeasurementSeriesListDataType;
struct MeasurementSeriesListDataSelectorsType;
struct MeasurementConstraintsDataType;
struct MeasurementConstraintsDataElementsType;
struct MeasurementConstraintsListDataType;
struct MeasurementConstraintsListDataSelectorsType;
struct MeasurementDescriptionDataType;
struct MeasurementDescriptionDataElementsType;
struct MeasurementDescriptionListDataType;
struct MeasurementDescriptionListDataSelectorsType;
struct MeasurementThresholdRelationDataType;
struct MeasurementThresholdRelationDataElementsType;
struct MeasurementThresholdRelationListDataType;
struct MeasurementThresholdRelationListDataSelectorsType;
struct ThresholdDataType;
struct ThresholdDataElementsType;
struct ThresholdListDataType;
struct ThresholdListDataSelectorsType;
struct ThresholdConstraintsDataType;
struct ThresholdConstraintsDataElementsType;
struct ThresholdConstraintsListDataType;
struct ThresholdConstraintsListDataSelectorsType;
struct ThresholdDescriptionDataType;
struct ThresholdDescriptionDataElementsType;
struct ThresholdDescriptionListDataType;
struct ThresholdDescriptionListDataSelectorsType;
struct DirectControlActivityStateType;
struct PowerTimeSlotValueTypeType;
struct PowerSequenceScopeType;
struct PowerSequenceStateType;
struct DirectControlActivityDataType;
struct DirectControlActivityDataElementsType;
struct DirectControlActivityListDataType;
struct DirectControlActivityListDataSelectorsType;
struct DirectControlDescriptionDataType;
struct DirectControlDescriptionDataElementsType;
struct PowerTimeSlotScheduleDataType;
struct PowerTimeSlotScheduleDataElementsType;
struct PowerTimeSlotScheduleListDataType;
struct PowerTimeSlotScheduleListDataSelectorsType;
struct PowerTimeSlotValueDataType;
struct PowerTimeSlotValueDataElementsType;
struct PowerTimeSlotValueListDataType;
struct PowerTimeSlotValueListDataSelectorsType;
struct PowerTimeSlotScheduleConstraintsDataType;
struct PowerTimeSlotScheduleConstraintsDataElementsType;
struct PowerTimeSlotScheduleConstraintsListDataType;
struct PowerTimeSlotScheduleConstraintsListDataSelectorsType;
struct PowerSequenceAlternativesRelationDataType;
struct PowerSequenceAlternativesRelationDataElementsType;
struct PowerSequenceAlternativesRelationListDataType;
struct PowerSequenceAlternativesRelationListDataSelectorsType;
struct PowerSequenceDescriptionDataType;
struct PowerSequenceDescriptionDataElementsType;
struct PowerSequenceDescriptionListDataType;
struct PowerSequenceDescriptionListDataSelectorsType;
struct PowerSequenceStateDataType;
struct PowerSequenceStateDataElementsType;
struct PowerSequenceStateListDataType;
struct PowerSequenceStateListDataSelectorsType;
struct PowerSequenceScheduleDataType;
struct PowerSequenceScheduleDataElementsType;
struct PowerSequenceScheduleListDataType;
struct PowerSequenceScheduleListDataSelectorsType;
struct PowerSequenceScheduleConstraintsDataType;
struct PowerSequenceScheduleConstraintsDataElementsType;
struct PowerSequenceScheduleConstraintsListDataType;
struct PowerSequenceScheduleConstraintsListDataSelectorsType;
struct PowerSequencePriceDataType;
struct PowerSequencePriceDataElementsType;
struct PowerSequencePriceListDataType;
struct PowerSequencePriceListDataSelectorsType;
struct PowerSequenceSchedulePreferenceDataType;
struct PowerSequenceSchedulePreferenceDataElementsType;
struct PowerSequenceSchedulePreferenceListDataType;
struct PowerSequenceSchedulePreferenceListDataSelectorsType;
struct PowerSequenceNodeScheduleInformationDataType;
struct PowerSequenceNodeScheduleInformationDataElementsType;
struct PowerSequenceScheduleConfigurationRequestCallType;
struct PowerSequenceScheduleConfigurationRequestCallElementsType;
struct PowerSequencePriceCalculationRequestCallType;
struct PowerSequencePriceCalculationRequestCallElementsType;
struct ResultDataType;
struct BindingManagementEntryDataType;
struct BindingManagementEntryDataElementsType;
struct BindingManagementEntryListDataType;
struct BindingManagementEntryListDataSelectorsType;
struct BindingManagementRequestCallType;
struct BindingManagementRequestCallElementsType;
struct BindingManagementDeleteCallType;
struct BindingManagementDeleteCallElementsType;
struct ActuatorLevelFctType;
struct ActuatorLevelDataType;
struct ActuatorLevelDataElementsType;
struct ActuatorLevelDescriptionDataType;
struct ActuatorLevelDescriptionDataElementsType;
struct ActuatorSwitchFctType;
struct AlarmTypeType;
struct BillTypeType;
struct BillPositionTypeType;
struct BillCostTypeType;
struct IdentificationTypeType;
struct PowerSourceType;
struct DeviceConfigurationKeyNameType;
struct DeviceDiagnosisOperatingStateType;
struct PowerSupplyConditionType;
struct ElectricalConnectionMeasurandVariantType;
struct ElectricalConnectionVoltageTypeType;
struct ElectricalConnectionAcMeasurementTypeType;
struct ElectricalConnectionPhaseNameType;
struct ElectricalConnectionCharacteristicContextType;
struct ElectricalConnectionCharacteristicTypeType;
struct HvacSystemFunctionTypeType;
struct HvacOperationModeTypeType;
struct HvacOverrunTypeType;
struct HvacOverrunStatusType;
struct SetpointTypeType;
struct TimeSlotTimeModeType;
struct TierBoundaryTypeType;
struct TierTypeType;
struct IncentiveTypeType;
struct IncentiveValueTypeType;
struct LoadControlEventActionType;
struct LoadControlEventStateType;
struct LoadControlLimitTypeType;
struct LoadControlCategoryType;
struct UseCaseActorType;
struct UseCaseNameType;
struct SensingStateType;
struct SensingTypeType;
struct StateInformationType;
struct StateInformationCategoryType;
struct SupplyConditionEventTypeType;
struct SupplyConditionOriginatorType;
struct GridConditionType;
struct TaskManagementJobStateType;
struct TaskManagementJobSourceType;
struct CmdControlType;
struct CmdType;
struct ActuatorSwitchDataType;
struct ActuatorSwitchDataElementsType;
struct ActuatorSwitchDescriptionDataType;
struct ActuatorSwitchDescriptionDataElementsType;
struct AlarmDataType;
struct AlarmDataElementsType;
struct AlarmListDataType;
struct AlarmListDataSelectorsType;
struct BillValueType;
struct BillValueElementsType;
struct BillCostType;
struct BillCostElementsType;
struct BillPositionType;
struct BillPositionElementsType;
struct BillDataType;
struct BillDataElementsType;
struct BillListDataType;
struct BillListDataSelectorsType;
struct BillConstraintsDataType;
struct BillConstraintsDataElementsType;
struct BillConstraintsListDataType;
struct BillConstraintsListDataSelectorsType;
struct BillDescriptionDataType;
struct BillDescriptionDataElementsType;
struct BillDescriptionListDataType;
struct BillDescriptionListDataSelectorsType;
struct IdentificationDataType;
struct IdentificationDataElementsType;
struct IdentificationListDataType;
struct IdentificationListDataSelectorsType;
struct SessionIdentificationDataType;
struct SessionIdentificationDataElementsType;
struct SessionIdentificationListDataType;
struct SessionIdentificationListDataSelectorsType;
struct SessionMeasurementRelationDataType;
struct SessionMeasurementRelationDataElementsType;
struct SessionMeasurementRelationListDataType;
struct SessionMeasurementRelationListDataSelectorsType;
struct DataTunnelingHeaderType;
struct DataTunnelingHeaderElementsType;
struct DataTunnelingCallType;
struct DataTunnelingCallElementsType;
struct DeviceClassificationManufacturerDataType;
struct DeviceClassificationManufacturerDataElementsType;
struct DeviceClassificationUserDataType;
struct DeviceClassificationUserDataElementsType;
struct DeviceConfigurationKeyValueValueType;
struct DeviceConfigurationKeyValueValueElementsType;
struct DeviceConfigurationKeyValueDataType;
struct DeviceConfigurationKeyValueDataElementsType;
struct DeviceConfigurationKeyValueListDataType;
struct DeviceConfigurationKeyValueListDataSelectorsType;
struct DeviceConfigurationKeyValueDescriptionDataType;
struct DeviceConfigurationKeyValueDescriptionDataElementsType;
struct DeviceConfigurationKeyValueDescriptionListDataType;
struct DeviceConfigurationKeyValueDescriptionListDataSelectorsType;
struct DeviceConfigurationKeyValueConstraintsDataType;
struct DeviceConfigurationKeyValueConstraintsDataElementsType;
struct DeviceConfigurationKeyValueConstraintsListDataType;
struct DeviceConfigurationKeyValueConstraintsListDataSelectorsType;
struct DeviceDiagnosisStateDataType;
struct DeviceDiagnosisStateDataElementsType;
struct DeviceDiagnosisHeartbeatDataType;
struct DeviceDiagnosisHeartbeatDataElementsType;
struct DeviceDiagnosisServiceDataType;
struct DeviceDiagnosisServiceDataElementsType;
struct ElectricalConnectionParameterDescriptionDataType;
struct ElectricalConnectionParameterDescriptionDataElementsType;
struct ElectricalConnectionParameterDescriptionListDataType;
struct ElectricalConnectionParameterDescriptionListDataSelectorsType;
struct ElectricalConnectionPermittedValueSetDataType;
struct ElectricalConnectionPermittedValueSetDataElementsType;
struct ElectricalConnectionPermittedValueSetListDataType;
struct ElectricalConnectionPermittedValueSetListDataSelectorsType;
struct ElectricalConnectionCharacteristicDataType;
struct ElectricalConnectionCharacteristicDataElementsType;
struct ElectricalConnectionCharacteristicListDataType;
struct ElectricalConnectionCharacteristicListDataSelectorsType;
struct ElectricalConnectionStateDataType;
struct ElectricalConnectionStateDataElementsType;
struct ElectricalConnectionStateListDataType;
struct ElectricalConnectionStateListDataSelectorsType;
struct ElectricalConnectionDescriptionDataType;
struct ElectricalConnectionDescriptionDataElementsType;
struct ElectricalConnectionDescriptionListDataType;
struct ElectricalConnectionDescriptionListDataSelectorsType;
struct HvacSystemFunctionDataType;
struct HvacSystemFunctionDataElementsType;
struct HvacSystemFunctionListDataType;
struct HvacSystemFunctionListDataSelectorsType;
struct HvacSystemFunctionOperationModeRelationDataType;
struct HvacSystemFunctionOperationModeRelationDataElementsType;
struct HvacSystemFunctionOperationModeRelationListDataType;
struct HvacSystemFunctionOperationModeRelationListDataSelectorsType;
struct HvacSystemFunctionSetpointRelationDataType;
struct HvacSystemFunctionSetpointRelationDataElementsType;
struct HvacSystemFunctionSetpointRelationListDataType;
struct HvacSystemFunctionSetpointRelationListDataSelectorsType;
struct HvacSystemFunctionPowerSequenceRelationDataType;
struct HvacSystemFunctionPowerSequenceRelationDataElementsType;
struct HvacSystemFunctionPowerSequenceRelationListDataType;
struct HvacSystemFunctionPowerSequenceRelationListDataSelectorsType;
struct HvacSystemFunctionDescriptionDataType;
struct HvacSystemFunctionDescriptionDataElementsType;
struct HvacSystemFunctionDescriptionListDataType;
struct HvacSystemFunctionDescriptionListDataSelectorsType;
struct HvacOperationModeDescriptionDataType;
struct HvacOperationModeDescriptionDataElementsType;
struct HvacOperationModeDescriptionListDataType;
struct HvacOperationModeDescriptionListDataSelectorsType;
struct HvacOverrunDataType;
struct HvacOverrunDataElementsType;
struct HvacOverrunListDataType;
struct HvacOverrunListDataSelectorsType;
struct HvacOverrunDescriptionDataType;
struct HvacOverrunDescriptionDataElementsType;
struct HvacOverrunDescriptionListDataType;
struct HvacOverrunDescriptionListDataSelectorsType;
struct SetpointDataType;
struct SetpointDataElementsType;
struct SetpointListDataType;
struct SetpointListDataSelectorsType;
struct SetpointConstraintsDataType;
struct SetpointConstraintsDataElementsType;
struct SetpointConstraintsListDataType;
struct SetpointConstraintsListDataSelectorsType;
struct SetpointDescriptionDataType;
struct SetpointDescriptionDataElementsType;
struct SetpointDescriptionListDataType;
struct SetpointDescriptionListDataSelectorsType;
struct TimeTableDataType;
struct TimeTableDataElementsType;
struct TimeTableListDataType;
struct TimeTableListDataSelectorsType;
struct TimeTableConstraintsDataType;
struct TimeTableConstraintsDataElementsType;
struct TimeTableConstraintsListDataType;
struct TimeTableConstraintsListDataSelectorsType;
struct TimeTableDescriptionDataType;
struct TimeTableDescriptionDataElementsType;
struct TimeTableDescriptionListDataType;
struct TimeTableDescriptionListDataSelectorsType;
struct IncentiveTableType;
struct IncentiveTableIncentiveSlotType;
struct IncentiveTableTierType;
struct IncentiveTableDataType;
struct IncentiveTableElementsType;
struct IncentiveTableIncentiveSlotElementsType;
struct IncentiveTableTierElementsType;
struct IncentiveTableDataElementsType;
struct IncentiveTableDataSelectorsType;
struct IncentiveTableDescriptionType;
struct IncentiveTableDescriptionTierType;
struct IncentiveTableDescriptionDataType;
struct IncentiveTableDescriptionElementsType;
struct IncentiveTableDescriptionTierElementsType;
struct IncentiveTableDescriptionDataElementsType;
struct IncentiveTableDescriptionDataSelectorsType;
struct IncentiveTableConstraintsType;
struct IncentiveTableConstraintsDataType;
struct IncentiveTableConstraintsElementsType;
struct IncentiveTableConstraintsDataElementsType;
struct IncentiveTableConstraintsDataSelectorsType;
struct TariffOverallConstraintsDataType;
struct TariffOverallConstraintsDataElementsType;
struct TariffDataType;
struct TariffDataElementsType;
struct TariffListDataType;
struct TariffListDataSelectorsType;
struct TariffTierRelationDataType;
struct TariffTierRelationDataElementsType;
struct TariffTierRelationListDataType;
struct TariffTierRelationListDataSelectorsType;
struct TariffBoundaryRelationDataType;
struct TariffBoundaryRelationDataElementsType;
struct TariffBoundaryRelationListDataType;
struct TariffBoundaryRelationListDataSelectorsType;
struct TariffDescriptionDataType;
struct TariffDescriptionDataElementsType;
struct TariffDescriptionListDataType;
struct TariffDescriptionListDataSelectorsType;
struct TierBoundaryDataType;
struct TierBoundaryDataElementsType;
struct TierBoundaryListDataType;
struct TierBoundaryListDataSelectorsType;
struct TierBoundaryDescriptionDataType;
struct TierBoundaryDescriptionDataElementsType;
struct TierBoundaryDescriptionListDataType;
struct TierBoundaryDescriptionListDataSelectorsType;
struct CommodityDataType;
struct CommodityDataElementsType;
struct CommodityListDataType;
struct CommodityListDataSelectorsType;
struct TierDataType;
struct TierDataElementsType;
struct TierListDataType;
struct TierListDataSelectorsType;
struct TierIncentiveRelationDataType;
struct TierIncentiveRelationDataElementsType;
struct TierIncentiveRelationListDataType;
struct TierIncentiveRelationListDataSelectorsType;
struct TierDescriptionDataType;
struct TierDescriptionDataElementsType;
struct TierDescriptionListDataType;
struct TierDescriptionListDataSelectorsType;
struct IncentiveDataType;
struct IncentiveDataElementsType;
struct IncentiveListDataType;
struct IncentiveListDataSelectorsType;
struct IncentiveDescriptionDataType;
struct IncentiveDescriptionDataElementsType;
struct IncentiveDescriptionListDataType;
struct IncentiveDescriptionListDataSelectorsType;
struct LoadControlNodeDataType;
struct LoadControlNodeDataElementsType;
struct LoadControlEventDataType;
struct LoadControlEventDataElementsType;
struct LoadControlEventListDataType;
struct LoadControlEventListDataSelectorsType;
struct LoadControlStateDataType;
struct LoadControlStateDataElementsType;
struct LoadControlStateListDataType;
struct LoadControlStateListDataSelectorsType;
struct LoadControlLimitDataType;
struct LoadControlLimitDataElementsType;
struct LoadControlLimitListDataType;
struct LoadControlLimitListDataSelectorsType;
struct LoadControlLimitConstraintsDataType;
struct LoadControlLimitConstraintsDataElementsType;
struct LoadControlLimitConstraintsListDataType;
struct LoadControlLimitConstraintsListDataSelectorsType;
struct LoadControlLimitDescriptionDataType;
struct LoadControlLimitDescriptionDataElementsType;
struct LoadControlLimitDescriptionListDataType;
struct LoadControlLimitDescriptionListDataSelectorsType;
struct NetworkManagementAddNodeCallType;
struct NetworkManagementAddNodeCallElementsType;
struct NetworkManagementRemoveNodeCallType;
struct NetworkManagementRemoveNodeCallElementsType;
struct NetworkManagementModifyNodeCallType;
struct NetworkManagementModifyNodeCallElementsType;
struct NetworkManagementScanNetworkCallType;
struct NetworkManagementScanNetworkCallElementsType;
struct NetworkManagementDiscoverCallType;
struct NetworkManagementDiscoverCallElementsType;
struct NetworkManagementAbortCallType;
struct NetworkManagementAbortCallElementsType;
struct NetworkManagementProcessStateDataType;
struct NetworkManagementProcessStateDataElementsType;
struct NetworkManagementJoiningModeDataType;
struct NetworkManagementJoiningModeDataElementsType;
struct NetworkManagementReportCandidateDataType;
struct NetworkManagementReportCandidateDataElementsType;
struct NetworkManagementDeviceDescriptionDataType;
struct NetworkManagementDeviceDescriptionDataElementsType;
struct NetworkManagementDeviceDescriptionListDataType;
struct NetworkManagementDeviceDescriptionListDataSelectorsType;
struct NetworkManagementEntityDescriptionDataType;
struct NetworkManagementEntityDescriptionDataElementsType;
struct NetworkManagementEntityDescriptionListDataType;
struct NetworkManagementEntityDescriptionListDataSelectorsType;
struct NetworkManagementFeatureDescriptionDataType;
struct NetworkManagementFeatureDescriptionDataElementsType;
struct NetworkManagementFeatureDescriptionListDataType;
struct NetworkManagementFeatureDescriptionListDataSelectorsType;
struct NodeManagementSpecificationVersionListType;
struct NodeManagementDetailedDiscoveryDeviceInformationType;
struct NodeManagementDetailedDiscoveryEntityInformationType;
struct NodeManagementDetailedDiscoveryFeatureInformationType;
struct NodeManagementDetailedDiscoveryDataType;
struct NodeManagementSpecificationVersionListElementsType;
struct NodeManagementDetailedDiscoveryDeviceInformationElementsType;
struct NodeManagementDetailedDiscoveryEntityInformationElementsType;
struct NodeManagementDetailedDiscoveryFeatureInformationElementsType;
struct NodeManagementDetailedDiscoveryDataElementsType;
struct NodeManagementDetailedDiscoveryDataSelectorsType;
struct NodeManagementBindingDataType;
struct NodeManagementBindingDataElementsType;
struct NodeManagementBindingDataSelectorsType;
struct NodeManagementBindingRequestCallType;
struct NodeManagementBindingRequestCallElementsType;
struct NodeManagementBindingDeleteCallType;
struct NodeManagementBindingDeleteCallElementsType;
struct NodeManagementSubscriptionDataType;
struct NodeManagementSubscriptionDataElementsType;
struct NodeManagementSubscriptionDataSelectorsType;
struct NodeManagementSubscriptionRequestCallType;
struct NodeManagementSubscriptionRequestCallElementsType;
struct NodeManagementSubscriptionDeleteCallType;
struct NodeManagementSubscriptionDeleteCallElementsType;
struct NodeManagementDestinationDataType;
struct NodeManagementDestinationDataElementsType;
struct NodeManagementDestinationListDataType;
struct NodeManagementDestinationListDataSelectorsType;
struct NodeManagementUseCaseDataType;
struct NodeManagementUseCaseDataElementsType;
struct NodeManagementUseCaseDataSelectorsType;
struct SubscriptionManagementEntryDataType;
struct SubscriptionManagementEntryDataElementsType;
struct SubscriptionManagementEntryListDataType;
struct SubscriptionManagementEntryListDataSelectorsType;
struct SubscriptionManagementRequestCallType;
struct SubscriptionManagementRequestCallElementsType;
struct SubscriptionManagementDeleteCallType;
struct SubscriptionManagementDeleteCallElementsType;
struct UseCaseSupportType;
struct UseCaseSupportElementsType;
struct UseCaseSupportSelectorsType;
struct UseCaseInformationDataType;
struct UseCaseInformationDataElementsType;
struct UseCaseInformationListDataType;
struct UseCaseInformationListDataSelectorsType;
struct SpecificationVersionDataElementsType;
struct SpecificationVersionListDataType;
struct SpecificationVersionListDataSelectorsType;
struct OperatingConstraintsInterruptDataType;
struct OperatingConstraintsInterruptDataElementsType;
struct OperatingConstraintsInterruptListDataType;
struct OperatingConstraintsInterruptListDataSelectorsType;
struct OperatingConstraintsDurationDataType;
struct OperatingConstraintsDurationDataElementsType;
struct OperatingConstraintsDurationListDataType;
struct OperatingConstraintsDurationListDataSelectorsType;
struct OperatingConstraintsPowerDescriptionDataType;
struct OperatingConstraintsPowerDescriptionDataElementsType;
struct OperatingConstraintsPowerDescriptionListDataType;
struct OperatingConstraintsPowerDescriptionListDataSelectorsType;
struct OperatingConstraintsPowerRangeDataType;
struct OperatingConstraintsPowerRangeDataElementsType;
struct OperatingConstraintsPowerRangeListDataType;
struct OperatingConstraintsPowerRangeListDataSelectorsType;
struct OperatingConstraintsPowerLevelDataType;
struct OperatingConstraintsPowerLevelDataElementsType;
struct OperatingConstraintsPowerLevelListDataType;
struct OperatingConstraintsPowerLevelListDataSelectorsType;
struct OperatingConstraintsResumeImplicationDataType;
struct OperatingConstraintsResumeImplicationDataElementsType;
struct OperatingConstraintsResumeImplicationListDataType;
struct OperatingConstraintsResumeImplicationListDataSelectorsType;
struct SensingDataType;
struct SensingDataElementsType;
struct SensingListDataType;
struct SensingListDataSelectorsType;
struct SensingDescriptionDataType;
struct SensingDescriptionDataElementsType;
struct SmartEnergyManagementPsAlternativesRelationType;
struct SmartEnergyManagementPsAlternativesType;
struct SmartEnergyManagementPsPowerSequenceType;
struct SmartEnergyManagementPsPowerTimeSlotType;
struct SmartEnergyManagementPsPowerTimeSlotValueListType;
struct SmartEnergyManagementPsDataType;
struct SmartEnergyManagementPsAlternativesRelationElementsType;
struct SmartEnergyManagementPsAlternativesElementsType;
struct SmartEnergyManagementPsPowerSequenceElementsType;
struct SmartEnergyManagementPsPowerTimeSlotElementsType;
struct SmartEnergyManagementPsPowerTimeSlotValueListElementsType;
struct SmartEnergyManagementPsDataElementsType;
struct SmartEnergyManagementPsDataSelectorsType;
struct SmartEnergyManagementPsPriceDataType;
struct SmartEnergyManagementPsPriceDataElementsType;
struct SmartEnergyManagementPsPriceDataSelectorsType;
struct SmartEnergyManagementPsConfigurationRequestCallType;
struct SmartEnergyManagementPsConfigurationRequestCallElementsType;
struct SmartEnergyManagementPsPriceCalculationRequestCallType;
struct SmartEnergyManagementPsPriceCalculationRequestCallElementsType;
struct StateInformationDataType;
struct StateInformationDataElementsType;
struct StateInformationListDataType;
struct StateInformationListDataSelectorsType;
struct SupplyConditionDataType;
struct SupplyConditionDataElementsType;
struct SupplyConditionListDataType;
struct SupplyConditionListDataSelectorsType;
struct SupplyConditionDescriptionDataType;
struct SupplyConditionDescriptionDataElementsType;
struct SupplyConditionDescriptionListDataType;
struct SupplyConditionDescriptionListDataSelectorsType;
struct SupplyConditionThresholdRelationDataType;
struct SupplyConditionThresholdRelationDataElementsType;
struct SupplyConditionThresholdRelationListDataType;
struct SupplyConditionThresholdRelationListDataSelectorsType;
struct TaskManagementDirectControlRelatedType;
struct TaskManagementDirectControlRelatedElementsType;
struct TaskManagementHvacRelatedType;
struct TaskManagementHvacRelatedElementsType;
struct TaskManagementLoadControlReleatedType;
struct TaskManagementLoadControlReleatedElementsType;
struct TaskManagementPowerSequencesRelatedType;
struct TaskManagementPowerSequencesRelatedElementsType;
struct TaskManagementSmartEnergyManagementPsRelatedType;
struct TaskManagementSmartEnergyManagementPsRelatedElementsType;
struct TaskManagementJobDataType;
struct TaskManagementJobDataElementsType;
struct TaskManagementJobListDataType;
struct TaskManagementJobListDataSelectorsType;
struct TaskManagementJobRelationDataType;
struct TaskManagementJobRelationDataElementsType;
struct TaskManagementJobRelationListDataType;
struct TaskManagementJobRelationListDataSelectorsType;
struct TaskManagementJobDescriptionDataType;
struct TaskManagementJobDescriptionDataElementsType;
struct TaskManagementJobDescriptionListDataType;
struct TaskManagementJobDescriptionListDataSelectorsType;
struct TaskManagementOverviewDataType;
struct TaskManagementOverviewDataElementsType;
struct TimeInformationDataType;
struct TimeInformationDataElementsType;
struct TimeDistributorDataType;
struct TimeDistributorDataElementsType;
struct TimePrecisionDataType;
struct TimePrecisionDataElementsType;
struct TimeDistributorEnquiryCallType;
struct TimeDistributorEnquiryCallElementsType;
struct HeaderType;
struct DatagramType;




using MessagingNumberType = int;
using MessagingDataTextType = std::string;
using LabelType = std::string;
using DescriptionType = std::string;
using SpecificationVersionType = std::string;
using EnumExtendType = std::string;
using DayOfMonthType = int;
using CalendarWeekType = int;
using NumberType = int;
using ScaleType = int;
using MaxResponseDelayType = std::string;
using AddressDeviceType = std::string;
using AddressEntityType = int;
using AddressFeatureType = int;
using FeatureGroupType = std::string;
using TimeSeriesIdType = int;
using TimeSeriesSlotIdType = int;
using TimeSeriesSlotCountType = std::string;
using MeasurementIdType = int;
using ThresholdIdType = int;
using AlternativesIdType = int;
using PowerSequenceIdType = int;
using PowerTimeSlotNumberType = int;
using ErrorNumberType = int;
using BindingIdType = int;
using MsgCounterType = int;
using FilterIdType = int;
using AlarmIdType = int;
using BillIdType = int;
using BillPositionIdType = int;
using BillPositionCountType = std::string;
using BillValueIdType = int;
using BillCostIdType = int;
using IdentificationIdType = int;
using IdentificationValueType = std::string;
using SessionIdType = int;
using PurposeIdType = std::string;
using ChannelIdType = int;
using DeviceClassificationStringType = std::string;
using DeviceConfigurationKeyIdType = int;
using DeviceConfigurationKeyValueStringType = std::string;
using VendorStateCodeType = std::string;
using LastErrorCodeType = std::string;
using ElectricalConnectionIdType = int;
using ElectricalConnectionParameterIdType = int;
using ElectricalConnectionCharacteristicIdType = int;
using HvacSystemFunctionIdType = int;
using HvacOperationModeIdType = int;
using HvacOverrunIdType = int;
using SetpointIdType = int;
using TimeTableIdType = int;
using TimeSlotIdType = int;
using TimeSlotCountType = std::string;
using TariffIdType = int;
using TariffCountType = std::string;
using TierBoundaryIdType = int;
using TierBoundaryCountType = std::string;
using CommodityIdType = int;
using TierIdType = int;
using TierCountType = std::string;
using IncentiveIdType = int;
using IncentiveCountType = std::string;
using IncentivePriorityType = int;
using LoadControlEventIdType = int;
using LoadControlLimitIdType = int;
using NetworkManagementNativeSetupType = std::string;
using NetworkManagementScanSetupType = std::string;
using NetworkManagementSetupType = std::string;
using NetworkManagementCandidateSetupType = std::string;
using NetworkManagementTechnologyAddressType = std::string;
using NetworkManagementCommunicationsTechnologyInformationType = std::string;
using NetworkManagementMinimumTrustLevelType = std::string;
using NetworkManagementProcessTimeoutType = std::string;
using SubscriptionIdType = int;
using UseCaseActorEnumType = std::string;
using UseCaseNameEnumType = std::string;
using UseCaseScenarioSupportType = int;
using stateInformationIdType = int;
using ConditionIdType = int;
using TaskManagementJobIdType = int;
enum class MessagingTypeEnumType {
	logging,
	information,
	warning,
	alarm,
	emergency,
	obsolete,
};
bool convertToJson(const MessagingTypeEnumType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, MessagingTypeEnumType &dst);

enum class RecurringIntervalEnumType {
	yearly,
	monthly,
	weekly,
	daily,
	hourly,
	everyMinute,
	everySecond,
};
bool convertToJson(const RecurringIntervalEnumType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, RecurringIntervalEnumType &dst);

enum class MonthType {
	january,
	february,
	march,
	april,
	may,
	june,
	july,
	august,
	september,
	october,
	november,
	december,
};
bool convertToJson(const MonthType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, MonthType &dst);

enum class DayOfWeekType {
	monday,
	tuesday,
	wednesday,
	thursday,
	friday,
	saturday,
	sunday,
};
bool convertToJson(const DayOfWeekType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, DayOfWeekType &dst);

enum class OccurrenceEnumType {
	first,
	second,
	third,
	fourth,
	last,
};
bool convertToJson(const OccurrenceEnumType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, OccurrenceEnumType &dst);

enum class CommodityTypeEnumType {
	electricity,
	gas,
	oil,
	water,
	wasteWater,
	domesticHotWater,
	heatingWater,
	steam,
	heat,
	coolingLoad,
	air,
};
bool convertToJson(const CommodityTypeEnumType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, CommodityTypeEnumType &dst);

enum class EnergyDirectionEnumType {
	consume,
	produce,
};
bool convertToJson(const EnergyDirectionEnumType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, EnergyDirectionEnumType &dst);

enum class EnergyModeEnumType {
	consume,
	produce,
	idle,
	var_auto,
};
bool convertToJson(const EnergyModeEnumType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, EnergyModeEnumType &dst);

enum class UnitOfMeasurementEnumType {
	unknown,
	var_1,
	m,
	kg,
	s,
	A,
	K,
	mol,
	cd,
	V,
	W,
	Wh,
	VA,
	VAh,
	var,
	varh,
	degC,
	degF,
	Lm,
	lx,
	Ohm,
	Hz,
	dB,
	dBm,
	pct,
	ppm,
	l,
	l_s,
	l_h,
	deg,
	rad,
	rad_s,
	sr,
	Gy,
	Bq,
	Bq_m_3,
	Sv,
	Rd,
	C,
	F,
	H,
	J,
	N,
	N_m,
	N_s,
	Wb,
	T,
	Pa,
	bar,
	atm,
	psi,
	mmHg,
	m_2,
	m_3,
	m_3_h,
	m_s,
	m_s_2,
	m_3_s,
	m_m_3,
	kg_m_3,
	kg_m,
	m_2_s,
	W_m_K,
	J_K,
	var_1_s,
	W_m_2,
	J_m_2,
	S,
	S_m,
	K_s,
	Pa_s,
	J_kg_K,
	Vs,
	V_m,
	V_Hz,
	As,
	A_m,
	Hz_s,
	kg_s,
	kg_m_2,
	J_Wh,
	W_s,
	ft_3,
	ft_3_h,
	ccf,
	ccf_h,
	US_liq_gal,
	US_liq_gal_h,
	Imp_gal,
	Imp_gal_h,
	Btu,
	Btu_h,
	Ah,
	kg_Wh,
};
bool convertToJson(const UnitOfMeasurementEnumType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, UnitOfMeasurementEnumType &dst);

enum class CurrencyEnumType {
	AED,
	AFN,
	ALL,
	AMD,
	ANG,
	AOA,
	ARS,
	AUD,
	AWG,
	AZN,
	BAM,
	BBD,
	BDT,
	BGN,
	BHD,
	BIF,
	BMD,
	BND,
	BOB,
	BOV,
	BRL,
	BSD,
	BTN,
	BWP,
	BYR,
	BZD,
	CAD,
	CDF,
	CHE,
	CHF,
	CHW,
	CLF,
	CLP,
	CNY,
	COP,
	COU,
	CRC,
	CUC,
	CUP,
	CVE,
	CZK,
	DJF,
	DKK,
	DOP,
	DZD,
	EGP,
	ERN,
	ETB,
	EUR,
	FJD,
	FKP,
	GBP,
	GEL,
	GHS,
	GIP,
	GMD,
	GNF,
	GTQ,
	GYD,
	HKD,
	HNL,
	HRK,
	HTG,
	HUF,
	IDR,
	ILS,
	INR,
	IQD,
	IRR,
	ISK,
	JMD,
	JOD,
	JPY,
	KES,
	KGS,
	KHR,
	KMF,
	KPW,
	KRW,
	KWD,
	KYD,
	KZT,
	LAK,
	LBP,
	LKR,
	LRD,
	LSL,
	LYD,
	MAD,
	MDL,
	MGA,
	MKD,
	MMK,
	MNT,
	MOP,
	MRO,
	MUR,
	MVR,
	MWK,
	MXN,
	MXV,
	MYR,
	MZN,
	NAD,
	NGN,
	NIO,
	NOK,
	NPR,
	NZD,
	OMR,
	PAB,
	PEN,
	PGK,
	PHP,
	PKR,
	PLN,
	PYG,
	QAR,
	RON,
	RSD,
	RUB,
	RWF,
	var_SAR,
	SBD,
	SCR,
	SDG,
	SEK,
	SGD,
	SHP,
	SLL,
	SOS,
	SRD,
	SSP,
	STD,
	SVC,
	SYP,
	SZL,
	THB,
	TJS,
	TMT,
	TND,
	TOP,
	TRY,
	TTD,
	TWD,
	TZS,
	UAH,
	UGX,
	USD,
	USN,
	UYI,
	UYU,
	UZS,
	VEF,
	VND,
	VUV,
	WST,
	XAF,
	XAG,
	XAU,
	XBA,
	XBB,
	XBC,
	XBD,
	XCD,
	XDR,
	XOF,
	XPD,
	XPF,
	XPT,
	XSU,
	XTS,
	XUA,
	XXX,
	YER,
	ZAR,
	ZMW,
	ZWL,
};
bool convertToJson(const CurrencyEnumType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, CurrencyEnumType &dst);

enum class ScopeTypeEnumType {
	ac,
	acCosPhiGrid,
	acCurrentA,
	acCurrentB,
	acCurrentC,
	acFrequencyGrid,
	acPowerA,
	acPowerB,
	acPowerC,
	acPowerLimitPct,
	acPowerTotal,
	acVoltageA,
	acVoltageB,
	acVoltageC,
	acYieldDay,
	acYieldTotal,
	dcCurrent,
	dcPower,
	dcString1,
	dcString2,
	dcString3,
	dcString4,
	dcString5,
	dcString6,
	dcTotal,
	dcVoltage,
	dhwTemperature,
	flowTemperature,
	outsideAirTemperature,
	returnTemperature,
	roomAirTemperature,
	charge,
	stateOfCharge,
	discharge,
	gridConsumption,
	gridFeedIn,
	selfConsumption,
	overloadProtection,
	acPower,
	acEnergy,
	acCurrent,
	acVoltage,
	batteryControl,
	simpleIncentiveTable,
	stateOfHealth,
	travelRange,
	nominalEnergyCapacity,
	acPowerReal,
	acPowerApparent,
	acPowerReactive,
	acYieldMonth,
	acYieldYear,
	acFrequency,
	acCosPhi,
	dcEnergy,
	insulationResistance,
	stateOfEnergy,
	useableCapacity,
	dcChargeEnergy,
	dcDischargeEnergy,
	loadCycleCount,
	componentTemperature,
	gridLimit,
	gridLimitFallback,
	acPowerApparentTotal,
	acPowerReactiveTotal,
	acCurrentTotal,
	acEnergyConsumed,
	acEnergyProduced,
	batteryAcPower,
	batteryAcPowerPhaseSpecific,
	batteryDcPower,
	pccPower,
	activePowerLimit,
	activePowerLimitPercentage,
	simpleCommittedIncentiveTable,
	simplePreliminaryIncentiveTable,
	committedPowerPlan,
	preliminaryPowerPlan,
	incentiveTableEnConsWithPoETF,
	incentiveTableEnProdWithPoETF,
	incentiveTableEnConsWithPoE,
	incentiveTableEnProdWithPoE,
	incentiveTableEnConsWithTF,
	incentiveTableEnProdWithTF,
	activePowerForecast,
};
bool convertToJson(const ScopeTypeEnumType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, ScopeTypeEnumType &dst);

enum class RoleType {
	client,
	server,
	special,
};
bool convertToJson(const RoleType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, RoleType &dst);

enum class DeviceTypeEnumType {
	Dishwasher,
	Dryer,
	EnvironmentSensor,
	Generic,
	HeatGenerationSystem,
	HeatSinkSystem,
	HeatStorageSystem,
	HVACController,
	SubMeter,
	Washer,
	ElectricitySupplySystem,
	EnergyManagementSystem,
	Inverter,
	ChargingStation,
};
bool convertToJson(const DeviceTypeEnumType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, DeviceTypeEnumType &dst);

enum class EntityTypeEnumType {
	Battery,
	Compressor,
	DeviceInformation,
	DHWCircuit,
	DHWStorage,
	Dishwasher,
	Dryer,
	ElectricalImmersionHeater,
	Fan,
	GasHeatingAppliance,
	Generic,
	HeatingBufferStorage,
	HeatingCircuit,
	HeatingObject,
	HeatingZone,
	HeatPumpAppliance,
	HeatSinkCircuit,
	HeatSourceCircuit,
	HeatSourceUnit,
	HVACController,
	HVACRoom,
	InstantDHWHeater,
	Inverter,
	OilHeatingAppliance,
	Pump,
	RefrigerantCircuit,
	SmartEnergyAppliance,
	SolarDHWStorage,
	SolarThermalCircuit,
	SubMeterElectricity,
	TemperatureSensor,
	Washer,
	BatterySystem,
	ElectricityGenerationSystem,
	ElectricityStorageSystem,
	GridConnectionPointOfPremises,
	Household,
	PVSystem,
	EV,
	EVSE,
	ChargingOutlet,
	CEM,
	PV,
	PVESHybrid,
	ElectricalStorage,
	PVString,
	GridGuard,
	ControllableSystem,
};
bool convertToJson(const EntityTypeEnumType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, EntityTypeEnumType &dst);

enum class FeatureTypeEnumType {
	ActuatorLevel,
	ActuatorSwitch,
	Alarm,
	DataTunneling,
	DeviceClassification,
	DeviceDiagnosis,
	DirectControl,
	ElectricalConnection,
	Generic,
	HVAC,
	LoadControl,
	Measurement,
	Messaging,
	NetworkManagement,
	NodeManagement,
	OperatingConstraints,
	PowerSequences,
	Sensing,
	Setpoint,
	SmartEnergyManagementPs,
	TaskManagement,
	Threshold,
	TimeInformation,
	TimeTable,
	DeviceConfiguration,
	SupplyCondition,
	TimeSeries,
	TariffInformation,
	IncentiveTable,
	Bill,
	Identification,
	StateInformation,
};
bool convertToJson(const FeatureTypeEnumType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, FeatureTypeEnumType &dst);

enum class FeatureDirectControlSpecificUsageEnumType {
	History,
	RealTime,
};
bool convertToJson(const FeatureDirectControlSpecificUsageEnumType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, FeatureDirectControlSpecificUsageEnumType &dst);

enum class FeatureHvacSpecificUsageEnumType {
	OperationMode,
	Overrun,
};
bool convertToJson(const FeatureHvacSpecificUsageEnumType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, FeatureHvacSpecificUsageEnumType &dst);

enum class FeatureMeasurementSpecificUsageEnumType {
	Contact,
	Electrical,
	Heat,
	Level,
	Pressure,
	Temperature,
};
bool convertToJson(const FeatureMeasurementSpecificUsageEnumType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, FeatureMeasurementSpecificUsageEnumType &dst);

enum class FeatureSetpointSpecificUsageEnumType {
	Contact,
	Electrical,
	Heat,
	Level,
	Pressure,
	Temperature,
};
bool convertToJson(const FeatureSetpointSpecificUsageEnumType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, FeatureSetpointSpecificUsageEnumType &dst);

enum class FeatureSmartEnergyManagementPsSpecificUsageEnumType {
	FixedForecast,
	FlexibleChosenForecast,
	FlexibleOptionalForecast,
	OptionalSequenceBasedImmediateControl,
};
bool convertToJson(const FeatureSmartEnergyManagementPsSpecificUsageEnumType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, FeatureSmartEnergyManagementPsSpecificUsageEnumType &dst);

enum class FunctionEnumType {
	actuatorLevelData,
	actuatorLevelDescriptionData,
	actuatorSwitchData,
	actuatorSwitchDescriptionData,
	alarmListData,
	bindingManagementDeleteCall,
	bindingManagementEntryListData,
	bindingManagementRequestCall,
	dataTunnelingCall,
	deviceClassificationManufacturerData,
	deviceClassificationUserData,
	deviceDiagnosisHeartbeatData,
	deviceDiagnosisServiceData,
	deviceDiagnosisStateData,
	directControlActivityListData,
	directControlDescriptionData,
	electricalConnectionDescriptionListData,
	electricalConnectionParameterDescriptionListData,
	electricalConnectionStateListData,
	hvacOperationModeDescriptionListData,
	hvacOverrunDescriptionListData,
	hvacOverrunListData,
	hvacSystemFunctionDescriptionListData,
	hvacSystemFunctionListData,
	hvacSystemFunctionOperationModeRelationListData,
	hvacSystemFunctionPowerSequenceRelationListData,
	hvacSystemFunctionSetpointRelationListData,
	loadControlEventListData,
	loadControlStateListData,
	measurementConstraintsListData,
	measurementDescriptionListData,
	measurementListData,
	measurementThresholdRelationListData,
	messagingListData,
	networkManagementAbortCall,
	networkManagementAddNodeCall,
	networkManagementDeviceDescriptionListData,
	networkManagementDiscoverCall,
	networkManagementEntityDescriptionListData,
	networkManagementFeatureDescriptionListData,
	networkManagementJoiningModeData,
	networkManagementModifyNodeCall,
	networkManagementProcessStateData,
	networkManagementRemoveNodeCall,
	networkManagementReportCandidateData,
	networkManagementScanNetworkCall,
	nodeManagementBindingData,
	nodeManagementBindingDeleteCall,
	nodeManagementBindingRequestCall,
	nodeManagementDestinationListData,
	nodeManagementDetailedDiscoveryData,
	nodeManagementSubscriptionData,
	nodeManagementSubscriptionDeleteCall,
	nodeManagementSubscriptionRequestCall,
	operatingConstraintsDurationListData,
	operatingConstraintsInterruptListData,
	operatingConstraintsPowerDescriptionListData,
	operatingConstraintsPowerLevelListData,
	operatingConstraintsPowerRangeListData,
	operatingConstraintsResumeImplicationListData,
	powerSequenceAlternativesRelationListData,
	powerSequenceDescriptionListData,
	powerSequenceNodeScheduleInformationData,
	powerSequencePriceCalculationRequestCall,
	powerSequencePriceListData,
	powerSequenceScheduleConfigurationRequestCall,
	powerSequenceScheduleConstraintsListData,
	powerSequenceScheduleListData,
	powerSequenceSchedulePreferenceListData,
	powerSequenceStateListData,
	powerTimeSlotScheduleConstraintsListData,
	powerTimeSlotScheduleListData,
	powerTimeSlotValueListData,
	resultData,
	sensingDescriptionData,
	sensingListData,
	sessionIdentificationListData,
	sessionMeasurementRelationListData,
	setpointConstraintsListData,
	setpointDescriptionListData,
	setpointListData,
	smartEnergyManagementPsConfigurationRequestCall,
	smartEnergyManagementPsData,
	smartEnergyManagementPsPriceCalculationRequestCall,
	smartEnergyManagementPsPriceData,
	specificationVersionListData,
	subscriptionManagementDeleteCall,
	subscriptionManagementEntryListData,
	subscriptionManagementRequestCall,
	supplyConditionDescriptionListData,
	supplyConditionListData,
	supplyConditionThresholdRelationListData,
	taskManagementJobDescriptionListData,
	taskManagementJobListData,
	taskManagementJobRelationListData,
	taskManagementOverviewData,
	thresholdConstraintsListData,
	thresholdDescriptionListData,
	thresholdListData,
	timeDistributorData,
	timeDistributorEnquiryCall,
	timeInformationData,
	timePrecisionData,
	timeTableConstraintsListData,
	timeTableDescriptionListData,
	timeTableListData,
	deviceConfigurationKeyValueConstraintsListData,
	deviceConfigurationKeyValueListData,
	deviceConfigurationKeyValueDescriptionListData,
	loadControlLimitConstraintsListData,
	loadControlLimitDescriptionListData,
	loadControlLimitListData,
	loadControlNodeData,
	timeSeriesConstraintsListData,
	timeSeriesDescriptionListData,
	timeSeriesListData,
	tariffOverallConstraintsData,
	tariffListData,
	tariffBoundaryRelationListData,
	tariffTierRelationListData,
	tariffDescriptionListData,
	tierBoundaryListData,
	tierBoundaryDescriptionListData,
	commodityListData,
	tierListData,
	tierIncentiveRelationListData,
	tierDescriptionListData,
	incentiveListData,
	incentiveDescriptionListData,
	incentiveTableData,
	incentiveTableDescriptionData,
	incentiveTableConstraintsData,
	electricalConnectionPermittedValueSetListData,
	useCaseInformationListData,
	nodeManagementUseCaseData,
	billConstraintsListData,
	billDescriptionListData,
	billListData,
	identificationListData,
	measurementSeriesListData,
	electricalConnectionCharacteristicListData,
	stateInformationListData,
};
bool convertToJson(const FunctionEnumType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, FunctionEnumType &dst);

enum class TimeSeriesTypeEnumType {
	plan,
	singleDemand,
	constraints,
	energyRequest,
	dischargingEnergyRequest,
	consumptionLimitCurve,
	productionLimitCurve,
};
bool convertToJson(const TimeSeriesTypeEnumType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TimeSeriesTypeEnumType &dst);

enum class MeasurementTypeEnumType {
	acceleration,
	angle,
	angularVelocity,
	area,
	atmosphericPressure,
	capacity,
	concentration,
	count,
	current,
	density,
	distance,
	electricField,
	energy,
	force,
	frequency,
	harmonicDistortion,
	heat,
	heatFlux,
	illuminance,
	impulse,
	level,
	magneticField,
	mass,
	massFlow,
	particles,
	percentage,
	power,
	powerFactor,
	pressure,
	radonActivity,
	relativeHumidity,
	resistance,
	solarRadiation,
	speed,
	temperature,
	time,
	torque,
	unknown,
	velocity,
	voltage,
	volume,
	volumetricFlow,
};
bool convertToJson(const MeasurementTypeEnumType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, MeasurementTypeEnumType &dst);

enum class MeasurementValueTypeEnumType {
	value,
	averageValue,
	minValue,
	maxValue,
	standardDeviation,
};
bool convertToJson(const MeasurementValueTypeEnumType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, MeasurementValueTypeEnumType &dst);

enum class MeasurementValueSourceEnumType {
	measuredValue,
	calculatedValue,
	empiricalValue,
};
bool convertToJson(const MeasurementValueSourceEnumType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, MeasurementValueSourceEnumType &dst);

enum class MeasurementValueTendencyEnumType {
	rising,
	stable,
	falling,
};
bool convertToJson(const MeasurementValueTendencyEnumType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, MeasurementValueTendencyEnumType &dst);

enum class MeasurementValueStateEnumType {
	normal,
	outOfRange,
	error,
};
bool convertToJson(const MeasurementValueStateEnumType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, MeasurementValueStateEnumType &dst);

enum class ThresholdTypeEnumType {
	goodAbove,
	badAbove,
	goodBelow,
	badBelow,
	minValueThreshold,
	maxValueThreshold,
	minValueThresholdExtreme,
	maxValueThresholdExtreme,
	sagThreshold,
	swellThreshold,
};
bool convertToJson(const ThresholdTypeEnumType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, ThresholdTypeEnumType &dst);

enum class DirectControlActivityStateEnumType {
	running,
	paused,
	inactive,
};
bool convertToJson(const DirectControlActivityStateEnumType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, DirectControlActivityStateEnumType &dst);

enum class PowerTimeSlotValueTypeEnumType {
	power,
	powerMin,
	powerMax,
	powerExpectedValue,
	powerStandardDeviation,
	powerSkewness,
	energy,
	energyMin,
	energyMax,
	energyExpectedValue,
	energyStandardDeviation,
	energySkewness,
};
bool convertToJson(const PowerTimeSlotValueTypeEnumType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, PowerTimeSlotValueTypeEnumType &dst);

enum class PowerSequenceScopeEnumType {
	forecast,
	measurement,
	recommendation,
};
bool convertToJson(const PowerSequenceScopeEnumType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, PowerSequenceScopeEnumType &dst);

enum class PowerSequenceStateEnumType {
	running,
	paused,
	scheduled,
	scheduledPaused,
	pending,
	inactive,
	completed,
	invalid,
};
bool convertToJson(const PowerSequenceStateEnumType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, PowerSequenceStateEnumType &dst);

enum class ActuatorLevelFctEnumType {
	start,
	up,
	down,
	stop,
	percentageAbsolute,
	percentageRelative,
	absolute,
	relative,
};
bool convertToJson(const ActuatorLevelFctEnumType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, ActuatorLevelFctEnumType &dst);

enum class CmdClassifierType {
	read,
	reply,
	notify,
	write,
	call,
	result,
};
bool convertToJson(const CmdClassifierType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, CmdClassifierType &dst);

enum class ActuatorSwitchFctEnumType {
	on,
	off,
	toggle,
};
bool convertToJson(const ActuatorSwitchFctEnumType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, ActuatorSwitchFctEnumType &dst);

enum class AlarmTypeEnumType {
	alarmCancelled,
	underThreshold,
	overThreshold,
};
bool convertToJson(const AlarmTypeEnumType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, AlarmTypeEnumType &dst);

enum class BillTypeEnumType {
	chargingSummary,
};
bool convertToJson(const BillTypeEnumType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, BillTypeEnumType &dst);

enum class BillPositionTypeEnumType {
	gridElectricEnergy,
	selfProducedElectricEnergy,
};
bool convertToJson(const BillPositionTypeEnumType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, BillPositionTypeEnumType &dst);

enum class BillCostTypeEnumType {
	absolutePrice,
	relativePrice,
	co2Emission,
	renewableEnergy,
	radioactiveWaste,
};
bool convertToJson(const BillCostTypeEnumType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, BillCostTypeEnumType &dst);

enum class IdentificationTypeEnumType {
	eui48,
	eui64,
	userRfidTag,
};
bool convertToJson(const IdentificationTypeEnumType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, IdentificationTypeEnumType &dst);

enum class PowerSourceEnumType {
	unknown,
	mainsSinglePhase,
	mains3Phase,
	battery,
	dc,
};
bool convertToJson(const PowerSourceEnumType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, PowerSourceEnumType &dst);

enum class DeviceConfigurationKeyNameEnumType {
	peakPowerOfPvSystem,
	pvCurtailmentLimitFactor,
	asymmetricChargingSupported,
	communicationsStandard,
	inverterGridCode,
	pvStringAvailabilityStatus,
	batteryAvailabilityStatus,
	gridConnectionStatus,
	timeToAcChargePowerMax,
	timeToAcDischargePowerMax,
	tilt,
	azimuth,
	batteryType,
	maxCycleCountPerDay,
	failsafeConsumptionActivePowerLimit,
	failsafeProductionActivePowerLimit,
	failsafePositiveReactivePowerLimit,
	failsafeNegativeReactivePowerLimit,
	failsafePositiveCosPhiLimit,
	failsafeNegativeCosPhiLimit,
	maxAcChargePower,
	maxAcDischargePower,
	maxDcChargePower,
	maxDcDischargePower,
	batteryActiveControlMode,
	defaultAcPower,
	defaultDcPower,
	defaultPccPower,
	failsafeAcPowerSetpoint,
	failsafeDcPowerSetpoint,
	failsafePccPowerSetpoint,
	failsafeDurationMinimum,
	dischargingBelowTargetEnergyRequestPermitted,
	incentivesSimulationCyclesMax,
	incentivesSimulationConcurrent,
	incentivesTimeoutIncentiveRequest,
	incentivesWaitIncentiveWriteable,
};
bool convertToJson(const DeviceConfigurationKeyNameEnumType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, DeviceConfigurationKeyNameEnumType &dst);

enum class DeviceConfigurationKeyValueTypeType {
	boolean,
	date,
	dateTime,
	duration,
	string,
	time,
	scaledNumber,
	integer,
};
bool convertToJson(const DeviceConfigurationKeyValueTypeType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, DeviceConfigurationKeyValueTypeType &dst);

enum class DeviceDiagnosisOperatingStateEnumType {
	normalOperation,
	standby,
	failure,
	serviceNeeded,
	overrideDetected,
	inAlarm,
	notReachable,
	finished,
	temporarilyNotReady,
	off,
};
bool convertToJson(const DeviceDiagnosisOperatingStateEnumType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, DeviceDiagnosisOperatingStateEnumType &dst);

enum class PowerSupplyConditionEnumType {
	good,
	low,
	critical,
	unknown,
	error,
};
bool convertToJson(const PowerSupplyConditionEnumType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, PowerSupplyConditionEnumType &dst);

enum class ElectricalConnectionMeasurandVariantEnumType {
	amplitude,
	rms,
	instantaneous,
	angle,
	cosPhi,
};
bool convertToJson(const ElectricalConnectionMeasurandVariantEnumType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, ElectricalConnectionMeasurandVariantEnumType &dst);

enum class ElectricalConnectionVoltageTypeEnumType {
	ac,
	dc,
};
bool convertToJson(const ElectricalConnectionVoltageTypeEnumType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, ElectricalConnectionVoltageTypeEnumType &dst);

enum class ElectricalConnectionAcMeasurementTypeEnumType {
	real,
	reactive,
	apparent,
	phase,
};
bool convertToJson(const ElectricalConnectionAcMeasurementTypeEnumType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, ElectricalConnectionAcMeasurementTypeEnumType &dst);

enum class ElectricalConnectionPhaseNameEnumType {
	a,
	b,
	c,
	ab,
	bc,
	ac,
	abc,
	neutral,
	ground,
	none,
};
bool convertToJson(const ElectricalConnectionPhaseNameEnumType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, ElectricalConnectionPhaseNameEnumType &dst);

enum class ElectricalConnectionConnectionPointType {
	grid,
	home,
	pv,
	sd,
	other,
};
bool convertToJson(const ElectricalConnectionConnectionPointType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, ElectricalConnectionConnectionPointType &dst);

enum class ElectricalConnectionCharacteristicContextEnumType {
	device,
	entity,
	inverter,
	pvString,
	battery,
};
bool convertToJson(const ElectricalConnectionCharacteristicContextEnumType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, ElectricalConnectionCharacteristicContextEnumType &dst);

enum class ElectricalConnectionCharacteristicTypeEnumType {
	powerConsumptionMin,
	powerConsumptionMax,
	powerConsumptionNominalMin,
	powerConsumptionNominalMax,
	powerProductionMin,
	powerProductionMax,
	powerProductionNominalMin,
	powerProductionNominalMax,
	energyCapacityNominalMax,
	contractualConsumptionNominalMax,
	contractualProductionNominalMax,
	apparentPowerProductionNominalMax,
	apparentPowerConsumptionNominalMax,
};
bool convertToJson(const ElectricalConnectionCharacteristicTypeEnumType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, ElectricalConnectionCharacteristicTypeEnumType &dst);

enum class HvacSystemFunctionTypeEnumType {
	heating,
	cooling,
	ventilation,
	dhw,
};
bool convertToJson(const HvacSystemFunctionTypeEnumType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, HvacSystemFunctionTypeEnumType &dst);

enum class HvacOperationModeTypeEnumType {
	var_auto,
	on,
	off,
	eco,
};
bool convertToJson(const HvacOperationModeTypeEnumType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, HvacOperationModeTypeEnumType &dst);

enum class HvacOverrunTypeEnumType {
	oneTimeDhw,
	party,
	sgReadyCondition1,
	sgReadyCondition3,
	sgReadyCondition4,
	oneDayAway,
	oneDayAtHome,
	oneTimeVentilation,
	hvacSystemOff,
	valveKick,
};
bool convertToJson(const HvacOverrunTypeEnumType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, HvacOverrunTypeEnumType &dst);

enum class HvacOverrunStatusEnumType {
	active,
	running,
	finished,
	inactive,
};
bool convertToJson(const HvacOverrunStatusEnumType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, HvacOverrunStatusEnumType &dst);

enum class SetpointTypeEnumType {
	valueAbsolute,
	valueRelative,
};
bool convertToJson(const SetpointTypeEnumType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SetpointTypeEnumType &dst);

enum class TimeSlotTimeModeEnumType {
	absolute,
	recurring,
	both,
};
bool convertToJson(const TimeSlotTimeModeEnumType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TimeSlotTimeModeEnumType &dst);

enum class TierBoundaryTypeEnumType {
	powerBoundary,
	energyBoundary,
	countBoundary,
};
bool convertToJson(const TierBoundaryTypeEnumType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TierBoundaryTypeEnumType &dst);

enum class TierTypeEnumType {
	fixedCost,
	dynamicCost,
};
bool convertToJson(const TierTypeEnumType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TierTypeEnumType &dst);

enum class IncentiveTypeEnumType {
	absoluteCost,
	relativeCost,
	renewableEnergyPercentage,
	co2Emission,
};
bool convertToJson(const IncentiveTypeEnumType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, IncentiveTypeEnumType &dst);

enum class IncentiveValueTypeEnumType {
	value,
	averageValue,
	minValue,
	maxValue,
};
bool convertToJson(const IncentiveValueTypeEnumType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, IncentiveValueTypeEnumType &dst);

enum class LoadControlEventActionEnumType {
	pause,
	resume,
	reduce,
	increase,
	emergency,
	normal,
};
bool convertToJson(const LoadControlEventActionEnumType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, LoadControlEventActionEnumType &dst);

enum class LoadControlEventStateEnumType {
	eventAccepted,
	eventStarted,
	eventStopped,
	eventRejected,
	eventCancelled,
	eventError,
};
bool convertToJson(const LoadControlEventStateEnumType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, LoadControlEventStateEnumType &dst);

enum class LoadControlLimitTypeEnumType {
	minValueLimit,
	maxValueLimit,
	signDependentAbsValueLimit,
};
bool convertToJson(const LoadControlLimitTypeEnumType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, LoadControlLimitTypeEnumType &dst);

enum class LoadControlCategoryEnumType {
	obligation,
	recommendation,
	optimization,
};
bool convertToJson(const LoadControlCategoryEnumType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, LoadControlCategoryEnumType &dst);

enum class NetworkManagementFeatureSetType {
	gateway,
	router,
	smart,
	simple,
};
bool convertToJson(const NetworkManagementFeatureSetType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, NetworkManagementFeatureSetType &dst);

enum class NetworkManagementProcessStateStateType {
	succeeded,
	failed,
	aborted,
};
bool convertToJson(const NetworkManagementProcessStateStateType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, NetworkManagementProcessStateStateType &dst);

enum class NetworkManagementStateChangeType {
	added,
	removed,
	modified,
};
bool convertToJson(const NetworkManagementStateChangeType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, NetworkManagementStateChangeType &dst);

enum class SensingStateEnumType {
	on,
	off,
	toggle,
	level,
	levelUp,
	levelDown,
	levelStart,
	levelStop,
	levelAbsolute,
	levelRelative,
	levelPercentageAbsolute,
	levelPercentageRelative,
	pressed,
	longPressed,
	released,
	changed,
	started,
	stopped,
	paused,
	middle,
	up,
	down,
	forward,
	backwards,
	open,
	closed,
	opening,
	closing,
	high,
	low,
	day,
	night,
	detected,
	notDetected,
	alarmed,
	notAlarmed,
};
bool convertToJson(const SensingStateEnumType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SensingStateEnumType &dst);

enum class SensingTypeEnumType {
	var_switch,
	button,
	level,
	levelSwitch,
	windowHandle,
	contactSensor,
	occupancySensor,
	motionDetector,
	fireDetector,
	smokeDetector,
	heatDetector,
	waterDetector,
	gasDetector,
	alarmSensor,
	powerAlarmSensor,
	dayNightIndicator,
};
bool convertToJson(const SensingTypeEnumType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SensingTypeEnumType &dst);

enum class StateInformationFunctionalityEnumType {
	externalOverrideFromGrid,
	autonomousGridSupport,
	islandingMode,
	balancing,
	trickleCharging,
	calibration,
	commissioningMissing,
	sleeping,
	starting,
	mppt,
	throttled,
	shuttingDown,
	manualShutdown,
};
bool convertToJson(const StateInformationFunctionalityEnumType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, StateInformationFunctionalityEnumType &dst);

enum class StateInformationFailureEnumType {
	inverterDefective,
	batteryOvercurrentProtection,
	pvStringOvercurrentProtection,
	gridFault,
	groundFault,
	acDisconnected,
	dcDisconnected,
	cabinetOpen,
	overTemperature,
	underTemperature,
	frequencyAboveLimit,
	frequencyBelowLimit,
	acVoltageAboveLimit,
	acVoltageBelowLimit,
	dcVoltageAboveLimit,
	dcVoltageBelowLimit,
	hardwareTestFailure,
	genericInternalError,
};
bool convertToJson(const StateInformationFailureEnumType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, StateInformationFailureEnumType &dst);

enum class StateInformationCategoryEnumType {
	functionality,
	failure,
};
bool convertToJson(const StateInformationCategoryEnumType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, StateInformationCategoryEnumType &dst);

enum class SupplyConditionEventTypeEnumType {
	thesholdExceeded,
	fallenBelowThreshold,
	supplyInterrupt,
	releaseOfLimitations,
	otherProblem,
	gridConditionUpdate,
};
bool convertToJson(const SupplyConditionEventTypeEnumType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SupplyConditionEventTypeEnumType &dst);

enum class SupplyConditionOriginatorEnumType {
	externDSO,
	externSupplier,
	internalLimit,
	internalService,
	internalUser,
};
bool convertToJson(const SupplyConditionOriginatorEnumType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SupplyConditionOriginatorEnumType &dst);

enum class GridConditionEnumType {
	consumptionRed,
	consumptionYellow,
	good,
	productionYellow,
	productionRed,
};
bool convertToJson(const GridConditionEnumType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, GridConditionEnumType &dst);

enum class TaskManagementJobSourceEnumType {
	internalMechanism,
	userInteraction,
	externalConfiguration,
};
bool convertToJson(const TaskManagementJobSourceEnumType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TaskManagementJobSourceEnumType &dst);

struct MessagingTypeType { // simple_complex 
	std::optional<MessagingTypeEnumType> messagingtypeenumtype;
	std::optional<EnumExtendType> enumextendtype;
};
struct AbsoluteOrRelativeTimeType { // simple_complex 
	std::optional<std::string> duration;
	std::optional<std::string> datetime;
};
struct RecurringIntervalType { // simple_complex 
	std::optional<RecurringIntervalEnumType> recurringintervalenumtype;
	std::optional<EnumExtendType> enumextendtype;
};
struct OccurrenceType { // simple_complex 
	std::optional<OccurrenceEnumType> occurrenceenumtype;
	std::optional<EnumExtendType> enumextendtype;
};
struct CommodityTypeType { // simple_complex 
	std::optional<CommodityTypeEnumType> commoditytypeenumtype;
	std::optional<EnumExtendType> enumextendtype;
};
struct EnergyDirectionType { // simple_complex 
	std::optional<EnergyDirectionEnumType> energydirectionenumtype;
	std::optional<EnumExtendType> enumextendtype;
};
struct EnergyModeType { // simple_complex 
	std::optional<EnergyModeEnumType> energymodeenumtype;
	std::optional<EnumExtendType> enumextendtype;
};
struct UnitOfMeasurementType { // simple_complex 
	std::optional<UnitOfMeasurementEnumType> unitofmeasurementenumtype;
	std::optional<EnumExtendType> enumextendtype;
};
struct CurrencyType { // simple_complex 
	std::optional<CurrencyEnumType> currencyenumtype;
	std::optional<EnumExtendType> enumextendtype;
};
struct ScopeTypeType { // simple_complex 
	std::optional<ScopeTypeEnumType> scopetypeenumtype;
	std::optional<EnumExtendType> enumextendtype;
};
struct DeviceTypeType { // simple_complex 
	std::optional<DeviceTypeEnumType> devicetypeenumtype;
	std::optional<EnumExtendType> enumextendtype;
};
struct EntityTypeType { // simple_complex 
	std::optional<EntityTypeEnumType> entitytypeenumtype;
	std::optional<EnumExtendType> enumextendtype;
};
struct FeatureTypeType { // simple_complex 
	std::optional<FeatureTypeEnumType> featuretypeenumtype;
	std::optional<EnumExtendType> enumextendtype;
};
struct FeatureSpecificUsageType { // simple_complex 
	std::optional<std::string> featurespecificusageenumtype;
	std::optional<EnumExtendType> enumextendtype;
};
struct FeatureSpecificUsageEnumType { // simple_complex 
	std::optional<FeatureDirectControlSpecificUsageEnumType> featuredirectcontrolspecificusageenumtype;
	std::optional<FeatureHvacSpecificUsageEnumType> featurehvacspecificusageenumtype;
	std::optional<FeatureMeasurementSpecificUsageEnumType> featuremeasurementspecificusageenumtype;
	std::optional<FeatureSetpointSpecificUsageEnumType> featuresetpointspecificusageenumtype;
	std::optional<FeatureSmartEnergyManagementPsSpecificUsageEnumType> featuresmartenergymanagementpsspecificusageenumtype;
};
struct FunctionType { // simple_complex 
	std::optional<FunctionEnumType> functionenumtype;
	std::optional<EnumExtendType> enumextendtype;
};
struct MessagingDataType { // complex
	std::optional<AbsoluteOrRelativeTimeType> timestamp;
	std::optional<MessagingNumberType> messagingNumber;
	std::optional<MessagingTypeType> type;
	std::optional<MessagingDataTextType> text;
};
bool convertToJson(const MessagingDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, MessagingDataType &dst);

struct MessagingDataElementsType { // complex
	std::optional<ElementTagType> timestamp;
	std::optional<ElementTagType> messagingNumber;
	std::optional<ElementTagType> type;
	std::optional<ElementTagType> text;
};
bool convertToJson(const MessagingDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, MessagingDataElementsType &dst);

struct MessagingListDataType { // complex
	std::optional<MessagingDataType> messagingData;
};
bool convertToJson(const MessagingListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, MessagingListDataType &dst);

struct MessagingListDataSelectorsType { // complex
	std::optional<TimestampIntervalType> timestampInterval;
	std::optional<MessagingNumberType> messagingNumber;
};
bool convertToJson(const MessagingListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, MessagingListDataSelectorsType &dst);

struct ElementTagType { // complex
};
bool convertToJson(const ElementTagType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, ElementTagType &dst);

struct TimePeriodType { // complex
	std::optional<AbsoluteOrRelativeTimeType> startTime;
	std::optional<AbsoluteOrRelativeTimeType> endTime;
};
bool convertToJson(const TimePeriodType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TimePeriodType &dst);

struct TimePeriodElementsType { // complex
	std::optional<ElementTagType> startTime;
	std::optional<ElementTagType> endTime;
};
bool convertToJson(const TimePeriodElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TimePeriodElementsType &dst);

struct TimestampIntervalType { // complex
	std::optional<AbsoluteOrRelativeTimeType> startTime;
	std::optional<AbsoluteOrRelativeTimeType> endTime;
};
bool convertToJson(const TimestampIntervalType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TimestampIntervalType &dst);

struct DaysOfWeekType { // complex
	std::optional<ElementTagType> monday;
	std::optional<ElementTagType> tuesday;
	std::optional<ElementTagType> wednesday;
	std::optional<ElementTagType> thursday;
	std::optional<ElementTagType> friday;
	std::optional<ElementTagType> saturday;
	std::optional<ElementTagType> sunday;
};
bool convertToJson(const DaysOfWeekType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, DaysOfWeekType &dst);

struct AbsoluteOrRecurringTimeType { // complex
	std::optional<std::string> dateTime;
	std::optional<MonthType> month;
	std::optional<DayOfMonthType> dayOfMonth;
	std::optional<CalendarWeekType> calendarWeek;
	std::optional<OccurrenceType> dayOfWeekOccurrence;
	std::optional<DaysOfWeekType> daysOfWeek;
	std::optional<std::string> time;
	std::optional<std::string> relative;
};
bool convertToJson(const AbsoluteOrRecurringTimeType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, AbsoluteOrRecurringTimeType &dst);

struct AbsoluteOrRecurringTimeElementsType { // complex
	std::optional<ElementTagType> dateTime;
	std::optional<ElementTagType> month;
	std::optional<ElementTagType> dayOfMonth;
	std::optional<ElementTagType> calendarWeek;
	std::optional<ElementTagType> dayOfWeekOccurrence;
	std::optional<ElementTagType> daysOfWeek;
	std::optional<ElementTagType> time;
	std::optional<ElementTagType> relative;
};
bool convertToJson(const AbsoluteOrRecurringTimeElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, AbsoluteOrRecurringTimeElementsType &dst);

struct RecurrenceInformationType { // complex
	std::optional<RecurringIntervalType> recurringInterval;
	std::optional<uint32_t> recurringIntervalStep;
	std::optional<std::string> firstExecution;
	std::optional<uint32_t> executionCount;
	std::optional<std::string> lastExecution;
};
bool convertToJson(const RecurrenceInformationType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, RecurrenceInformationType &dst);

struct RecurrenceInformationElementsType { // complex
	std::optional<ElementTagType> recurringInterval;
	std::optional<ElementTagType> recurringIntervalStep;
	std::optional<ElementTagType> firstExecution;
	std::optional<ElementTagType> executionCount;
	std::optional<ElementTagType> lastExecution;
};
bool convertToJson(const RecurrenceInformationElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, RecurrenceInformationElementsType &dst);

struct ScaledNumberRangeType { // complex
	std::optional<ScaledNumberType> min;
	std::optional<ScaledNumberType> max;
};
bool convertToJson(const ScaledNumberRangeType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, ScaledNumberRangeType &dst);

struct ScaledNumberRangeElementsType { // complex
	std::optional<ScaledNumberElementsType> min;
	std::optional<ScaledNumberElementsType> max;
};
bool convertToJson(const ScaledNumberRangeElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, ScaledNumberRangeElementsType &dst);

struct ScaledNumberSetType { // complex
	std::optional<ScaledNumberType> value;
	std::optional<ScaledNumberRangeType> range;
};
bool convertToJson(const ScaledNumberSetType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, ScaledNumberSetType &dst);

struct ScaledNumberSetElementsType { // complex
	std::optional<ScaledNumberElementsType> value;
	std::optional<ScaledNumberRangeElementsType> range;
};
bool convertToJson(const ScaledNumberSetElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, ScaledNumberSetElementsType &dst);

struct ScaledNumberType { // complex
	std::optional<NumberType> number;
	std::optional<ScaleType> scale;
};
bool convertToJson(const ScaledNumberType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, ScaledNumberType &dst);

struct ScaledNumberElementsType { // complex
	std::optional<ElementTagType> number;
	std::optional<ElementTagType> scale;
};
bool convertToJson(const ScaledNumberElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, ScaledNumberElementsType &dst);

struct DeviceAddressType { // complex
	std::optional<AddressDeviceType> device;
};
bool convertToJson(const DeviceAddressType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, DeviceAddressType &dst);

struct DeviceAddressElementsType { // complex
	std::optional<ElementTagType> device;
};
bool convertToJson(const DeviceAddressElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, DeviceAddressElementsType &dst);

struct EntityAddressType { // complex
	std::optional<AddressDeviceType> device;
	std::optional<std::vector<AddressEntityType>> entity;
};
bool convertToJson(const EntityAddressType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, EntityAddressType &dst);

struct EntityAddressElementsType { // complex
	std::optional<ElementTagType> device;
	std::optional<ElementTagType> entity;
};
bool convertToJson(const EntityAddressElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, EntityAddressElementsType &dst);

struct FeatureAddressType { // complex
	std::optional<AddressDeviceType> device;
	std::optional<std::vector<AddressEntityType>> entity;
	std::optional<AddressFeatureType> feature;
};
bool convertToJson(const FeatureAddressType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, FeatureAddressType &dst);

struct FeatureAddressElementsType { // complex
	std::optional<ElementTagType> device;
	std::optional<ElementTagType> entity;
	std::optional<ElementTagType> feature;
};
bool convertToJson(const FeatureAddressElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, FeatureAddressElementsType &dst);

struct PossibleOperationsClassifierType { // complex
	std::optional<ElementTagType> partial;
};
bool convertToJson(const PossibleOperationsClassifierType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, PossibleOperationsClassifierType &dst);

struct PossibleOperationsReadType { // complex
	std::optional<ElementTagType> partial;
};
bool convertToJson(const PossibleOperationsReadType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, PossibleOperationsReadType &dst);

struct PossibleOperationsWriteType { // complex
	std::optional<ElementTagType> partial;
};
bool convertToJson(const PossibleOperationsWriteType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, PossibleOperationsWriteType &dst);

struct PossibleOperationsType { // complex
	std::optional<PossibleOperationsReadType> read;
	std::optional<PossibleOperationsWriteType> write;
};
bool convertToJson(const PossibleOperationsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, PossibleOperationsType &dst);

struct PossibleOperationsElementsType { // complex
	std::optional<ElementTagType> read;
	std::optional<ElementTagType> write;
};
bool convertToJson(const PossibleOperationsElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, PossibleOperationsElementsType &dst);

struct FunctionPropertyType { // complex
	std::optional<FunctionType> function;
	std::optional<PossibleOperationsType> possibleOperations;
};
bool convertToJson(const FunctionPropertyType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, FunctionPropertyType &dst);

struct FunctionPropertyElementsType { // complex
	std::optional<ElementTagType> function;
	std::optional<PossibleOperationsElementsType> possibleOperations;
};
bool convertToJson(const FunctionPropertyElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, FunctionPropertyElementsType &dst);

struct TimeSeriesTypeType { // simple_complex 
	std::optional<TimeSeriesTypeEnumType> timeseriestypeenumtype;
	std::optional<EnumExtendType> enumextendtype;
};
struct MeasurementTypeType { // simple_complex 
	std::optional<MeasurementTypeEnumType> measurementtypeenumtype;
	std::optional<EnumExtendType> enumextendtype;
};
struct MeasurementValueTypeType { // simple_complex 
	std::optional<MeasurementValueTypeEnumType> measurementvaluetypeenumtype;
	std::optional<EnumExtendType> enumextendtype;
};
struct MeasurementValueSourceType { // simple_complex 
	std::optional<MeasurementValueSourceEnumType> measurementvaluesourceenumtype;
	std::optional<EnumExtendType> enumextendtype;
};
struct MeasurementValueTendencyType { // simple_complex 
	std::optional<MeasurementValueTendencyEnumType> measurementvaluetendencyenumtype;
	std::optional<EnumExtendType> enumextendtype;
};
struct MeasurementValueStateType { // simple_complex 
	std::optional<MeasurementValueStateEnumType> measurementvaluestateenumtype;
	std::optional<EnumExtendType> enumextendtype;
};
struct ThresholdTypeType { // simple_complex 
	std::optional<ThresholdTypeEnumType> thresholdtypeenumtype;
	std::optional<EnumExtendType> enumextendtype;
};
struct TimeSeriesSlotType { // complex
	std::optional<TimeSeriesSlotIdType> timeSeriesSlotId;
	std::optional<TimePeriodType> timePeriod;
	std::optional<std::string> duration;
	std::optional<AbsoluteOrRecurringTimeType> recurrenceInformation;
	std::optional<ScaledNumberType> value;
	std::optional<ScaledNumberType> minValue;
	std::optional<ScaledNumberType> maxValue;
};
bool convertToJson(const TimeSeriesSlotType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TimeSeriesSlotType &dst);

struct TimeSeriesSlotElementsType { // complex
	std::optional<ElementTagType> timeSeriesSlotId;
	std::optional<TimePeriodElementsType> timePeriod;
	std::optional<ElementTagType> duration;
	std::optional<AbsoluteOrRecurringTimeElementsType> recurrenceInformation;
	std::optional<ElementTagType> value;
	std::optional<ElementTagType> minValue;
	std::optional<ElementTagType> maxValue;
};
bool convertToJson(const TimeSeriesSlotElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TimeSeriesSlotElementsType &dst);

struct TimeSeriesDataType { // complex
	std::optional<TimeSeriesIdType> timeSeriesId;
	std::optional<TimePeriodType> timePeriod;
	std::optional<TimeSeriesSlotType> timeSeriesSlot;
};
bool convertToJson(const TimeSeriesDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TimeSeriesDataType &dst);

struct TimeSeriesDataElementsType { // complex
	std::optional<ElementTagType> timeSeriesId;
	std::optional<TimePeriodElementsType> timePeriod;
	std::optional<TimeSeriesSlotElementsType> timeSeriesSlot;
};
bool convertToJson(const TimeSeriesDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TimeSeriesDataElementsType &dst);

struct TimeSeriesListDataType { // complex
	std::optional<TimeSeriesDataType> timeSeriesData;
};
bool convertToJson(const TimeSeriesListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TimeSeriesListDataType &dst);

struct TimeSeriesListDataSelectorsType { // complex
	std::optional<TimeSeriesIdType> timeSeriesId;
	std::optional<TimeSeriesSlotIdType> timeSeriesSlotId;
};
bool convertToJson(const TimeSeriesListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TimeSeriesListDataSelectorsType &dst);

struct TimeSeriesDescriptionDataType { // complex
	std::optional<TimeSeriesIdType> timeSeriesId;
	std::optional<TimeSeriesTypeType> timeSeriesType;
	std::optional<bool> timeSeriesWriteable;
	std::optional<bool> updateRequired;
	std::optional<MeasurementIdType> measurementId;
	std::optional<CurrencyType> currency;
	std::optional<UnitOfMeasurementType> unit;
	std::optional<LabelType> label;
	std::optional<DescriptionType> description;
	std::optional<ScopeTypeType> scopeType;
};
bool convertToJson(const TimeSeriesDescriptionDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TimeSeriesDescriptionDataType &dst);

struct TimeSeriesDescriptionDataElementsType { // complex
	std::optional<ElementTagType> timeSeriesId;
	std::optional<ElementTagType> timeSeriesType;
	std::optional<ElementTagType> timeSeriesWriteable;
	std::optional<ElementTagType> updateRequired;
	std::optional<ElementTagType> measurementId;
	std::optional<ElementTagType> currency;
	std::optional<ElementTagType> unit;
	std::optional<ElementTagType> label;
	std::optional<ElementTagType> description;
	std::optional<ElementTagType> scopeType;
};
bool convertToJson(const TimeSeriesDescriptionDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TimeSeriesDescriptionDataElementsType &dst);

struct TimeSeriesDescriptionListDataType { // complex
	std::optional<TimeSeriesDescriptionDataType> timeSeriesDescriptionData;
};
bool convertToJson(const TimeSeriesDescriptionListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TimeSeriesDescriptionListDataType &dst);

struct TimeSeriesDescriptionListDataSelectorsType { // complex
	std::optional<TimeSeriesIdType> timeSeriesId;
	std::optional<TimeSeriesTypeType> timeSeriesType;
	std::optional<MeasurementIdType> measurementId;
	std::optional<ScopeTypeType> scopeType;
};
bool convertToJson(const TimeSeriesDescriptionListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TimeSeriesDescriptionListDataSelectorsType &dst);

struct TimeSeriesConstraintsDataType { // complex
	std::optional<TimeSeriesIdType> timeSeriesId;
	std::optional<TimeSeriesSlotCountType> slotCountMin;
	std::optional<TimeSeriesSlotCountType> slotCountMax;
	std::optional<std::string> slotDurationMin;
	std::optional<std::string> slotDurationMax;
	std::optional<std::string> slotDurationStepSize;
	std::optional<AbsoluteOrRelativeTimeType> earliestTimeSeriesStartTime;
	std::optional<AbsoluteOrRelativeTimeType> latestTimeSeriesEndTime;
	std::optional<ScaledNumberType> slotValueMin;
	std::optional<ScaledNumberType> slotValueMax;
	std::optional<ScaledNumberType> slotValueStepSize;
};
bool convertToJson(const TimeSeriesConstraintsDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TimeSeriesConstraintsDataType &dst);

struct TimeSeriesConstraintsDataElementsType { // complex
	std::optional<ElementTagType> timeSeriesId;
	std::optional<ElementTagType> slotCountMin;
	std::optional<ElementTagType> slotCountMax;
	std::optional<ElementTagType> slotDurationMin;
	std::optional<ElementTagType> slotDurationMax;
	std::optional<ElementTagType> slotDurationStepSize;
	std::optional<ElementTagType> earliestTimeSeriesStartTime;
	std::optional<ElementTagType> latestTimeSeriesEndTime;
	std::optional<ScaledNumberElementsType> slotValueMin;
	std::optional<ScaledNumberElementsType> slotValueMax;
	std::optional<ScaledNumberElementsType> slotValueStepSize;
};
bool convertToJson(const TimeSeriesConstraintsDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TimeSeriesConstraintsDataElementsType &dst);

struct TimeSeriesConstraintsListDataType { // complex
	std::optional<TimeSeriesConstraintsDataType> timeSeriesConstraintsData;
};
bool convertToJson(const TimeSeriesConstraintsListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TimeSeriesConstraintsListDataType &dst);

struct TimeSeriesConstraintsListDataSelectorsType { // complex
	std::optional<TimeSeriesIdType> timeSeriesId;
};
bool convertToJson(const TimeSeriesConstraintsListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TimeSeriesConstraintsListDataSelectorsType &dst);

struct MeasurementDataType { // complex
	std::optional<MeasurementIdType> measurementId;
	std::optional<MeasurementValueTypeType> valueType;
	std::optional<AbsoluteOrRelativeTimeType> timestamp;
	std::optional<ScaledNumberType> value;
	std::optional<TimePeriodType> evaluationPeriod;
	std::optional<MeasurementValueSourceType> valueSource;
	std::optional<MeasurementValueTendencyType> valueTendency;
	std::optional<MeasurementValueStateType> valueState;
};
bool convertToJson(const MeasurementDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, MeasurementDataType &dst);

struct MeasurementDataElementsType { // complex
	std::optional<ElementTagType> measurementId;
	std::optional<ElementTagType> valueType;
	std::optional<ElementTagType> timestamp;
	std::optional<ScaledNumberElementsType> value;
	std::optional<TimePeriodElementsType> evaluationPeriod;
	std::optional<ElementTagType> valueSource;
	std::optional<ElementTagType> valueTendency;
	std::optional<ElementTagType> valueState;
};
bool convertToJson(const MeasurementDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, MeasurementDataElementsType &dst);

struct MeasurementListDataType { // complex
	std::optional<MeasurementDataType> measurementData;
};
bool convertToJson(const MeasurementListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, MeasurementListDataType &dst);

struct MeasurementListDataSelectorsType { // complex
	std::optional<MeasurementIdType> measurementId;
	std::optional<MeasurementValueTypeType> valueType;
	std::optional<TimestampIntervalType> timestampInterval;
};
bool convertToJson(const MeasurementListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, MeasurementListDataSelectorsType &dst);

struct MeasurementSeriesDataType { // complex
	std::optional<MeasurementIdType> measurementId;
	std::optional<MeasurementValueTypeType> valueType;
	std::optional<AbsoluteOrRelativeTimeType> timestamp;
	std::optional<ScaledNumberType> value;
	std::optional<TimePeriodType> evaluationPeriod;
	std::optional<MeasurementValueSourceType> valueSource;
	std::optional<MeasurementValueTendencyType> valueTendency;
	std::optional<MeasurementValueStateType> valueState;
};
bool convertToJson(const MeasurementSeriesDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, MeasurementSeriesDataType &dst);

struct MeasurementSeriesDataElementsType { // complex
	std::optional<ElementTagType> measurementId;
	std::optional<ElementTagType> valueType;
	std::optional<ElementTagType> timestamp;
	std::optional<ScaledNumberElementsType> value;
	std::optional<TimePeriodElementsType> evaluationPeriod;
	std::optional<ElementTagType> valueSource;
	std::optional<ElementTagType> valueTendency;
	std::optional<ElementTagType> valueState;
};
bool convertToJson(const MeasurementSeriesDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, MeasurementSeriesDataElementsType &dst);

struct MeasurementSeriesListDataType { // complex
	std::optional<MeasurementSeriesDataType> measurementSeriesData;
};
bool convertToJson(const MeasurementSeriesListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, MeasurementSeriesListDataType &dst);

struct MeasurementSeriesListDataSelectorsType { // complex
	std::optional<MeasurementIdType> measurementId;
	std::optional<MeasurementValueTypeType> valueType;
	std::optional<TimestampIntervalType> timestampInterval;
};
bool convertToJson(const MeasurementSeriesListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, MeasurementSeriesListDataSelectorsType &dst);

struct MeasurementConstraintsDataType { // complex
	std::optional<MeasurementIdType> measurementId;
	std::optional<ScaledNumberType> valueRangeMin;
	std::optional<ScaledNumberType> valueRangeMax;
	std::optional<ScaledNumberType> valueStepSize;
};
bool convertToJson(const MeasurementConstraintsDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, MeasurementConstraintsDataType &dst);

struct MeasurementConstraintsDataElementsType { // complex
	std::optional<ElementTagType> measurementId;
	std::optional<ScaledNumberElementsType> valueRangeMin;
	std::optional<ScaledNumberElementsType> valueRangeMax;
	std::optional<ScaledNumberElementsType> valueStepSize;
};
bool convertToJson(const MeasurementConstraintsDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, MeasurementConstraintsDataElementsType &dst);

struct MeasurementConstraintsListDataType { // complex
	std::optional<MeasurementConstraintsDataType> measurementConstraintsData;
};
bool convertToJson(const MeasurementConstraintsListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, MeasurementConstraintsListDataType &dst);

struct MeasurementConstraintsListDataSelectorsType { // complex
	std::optional<MeasurementIdType> measurementId;
};
bool convertToJson(const MeasurementConstraintsListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, MeasurementConstraintsListDataSelectorsType &dst);

struct MeasurementDescriptionDataType { // complex
	std::optional<MeasurementIdType> measurementId;
	std::optional<MeasurementTypeType> measurementType;
	std::optional<CommodityTypeType> commodityType;
	std::optional<UnitOfMeasurementType> unit;
	std::optional<ScaledNumberType> calibrationValue;
	std::optional<ScopeTypeType> scopeType;
	std::optional<LabelType> label;
	std::optional<DescriptionType> description;
};
bool convertToJson(const MeasurementDescriptionDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, MeasurementDescriptionDataType &dst);

struct MeasurementDescriptionDataElementsType { // complex
	std::optional<ElementTagType> measurementId;
	std::optional<ElementTagType> measurementType;
	std::optional<ElementTagType> commodityType;
	std::optional<ElementTagType> unit;
	std::optional<ScaledNumberElementsType> calibrationValue;
	std::optional<ElementTagType> scopeType;
	std::optional<ElementTagType> label;
	std::optional<ElementTagType> description;
};
bool convertToJson(const MeasurementDescriptionDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, MeasurementDescriptionDataElementsType &dst);

struct MeasurementDescriptionListDataType { // complex
	std::optional<MeasurementDescriptionDataType> measurementDescriptionData;
};
bool convertToJson(const MeasurementDescriptionListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, MeasurementDescriptionListDataType &dst);

struct MeasurementDescriptionListDataSelectorsType { // complex
	std::optional<MeasurementIdType> measurementId;
	std::optional<MeasurementTypeType> measurementType;
	std::optional<CommodityTypeType> commodityType;
	std::optional<ScopeTypeType> scopeType;
};
bool convertToJson(const MeasurementDescriptionListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, MeasurementDescriptionListDataSelectorsType &dst);

struct MeasurementThresholdRelationDataType { // complex
	std::optional<MeasurementIdType> measurementId;
	std::optional<ThresholdIdType> thresholdId;
};
bool convertToJson(const MeasurementThresholdRelationDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, MeasurementThresholdRelationDataType &dst);

struct MeasurementThresholdRelationDataElementsType { // complex
	std::optional<ElementTagType> measurementId;
	std::optional<ElementTagType> thresholdId;
};
bool convertToJson(const MeasurementThresholdRelationDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, MeasurementThresholdRelationDataElementsType &dst);

struct MeasurementThresholdRelationListDataType { // complex
	std::optional<MeasurementThresholdRelationDataType> measurementThresholdRelationData;
};
bool convertToJson(const MeasurementThresholdRelationListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, MeasurementThresholdRelationListDataType &dst);

struct MeasurementThresholdRelationListDataSelectorsType { // complex
	std::optional<MeasurementIdType> measurementId;
	std::optional<ThresholdIdType> thresholdId;
};
bool convertToJson(const MeasurementThresholdRelationListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, MeasurementThresholdRelationListDataSelectorsType &dst);

struct ThresholdDataType { // complex
	std::optional<ThresholdIdType> thresholdId;
	std::optional<ScaledNumberType> thresholdValue;
};
bool convertToJson(const ThresholdDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, ThresholdDataType &dst);

struct ThresholdDataElementsType { // complex
	std::optional<ElementTagType> thresholdId;
	std::optional<ScaledNumberElementsType> thresholdValue;
};
bool convertToJson(const ThresholdDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, ThresholdDataElementsType &dst);

struct ThresholdListDataType { // complex
	std::optional<ThresholdDataType> thresholdData;
};
bool convertToJson(const ThresholdListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, ThresholdListDataType &dst);

struct ThresholdListDataSelectorsType { // complex
	std::optional<ThresholdIdType> thresholdId;
};
bool convertToJson(const ThresholdListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, ThresholdListDataSelectorsType &dst);

struct ThresholdConstraintsDataType { // complex
	std::optional<ThresholdIdType> thresholdId;
	std::optional<ScaledNumberType> thresholdRangeMin;
	std::optional<ScaledNumberType> thresholdRangeMax;
	std::optional<ScaledNumberType> thresholdStepSize;
};
bool convertToJson(const ThresholdConstraintsDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, ThresholdConstraintsDataType &dst);

struct ThresholdConstraintsDataElementsType { // complex
	std::optional<ElementTagType> thresholdId;
	std::optional<ScaledNumberElementsType> thresholdRangeMin;
	std::optional<ScaledNumberElementsType> thresholdRangeMax;
	std::optional<ScaledNumberElementsType> thresholdStepSize;
};
bool convertToJson(const ThresholdConstraintsDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, ThresholdConstraintsDataElementsType &dst);

struct ThresholdConstraintsListDataType { // complex
	std::optional<ThresholdConstraintsDataType> thresholdConstraintsData;
};
bool convertToJson(const ThresholdConstraintsListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, ThresholdConstraintsListDataType &dst);

struct ThresholdConstraintsListDataSelectorsType { // complex
	std::optional<ThresholdIdType> thresholdId;
};
bool convertToJson(const ThresholdConstraintsListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, ThresholdConstraintsListDataSelectorsType &dst);

struct ThresholdDescriptionDataType { // complex
	std::optional<ThresholdIdType> thresholdId;
	std::optional<ThresholdTypeType> thresholdType;
	std::optional<UnitOfMeasurementType> unit;
	std::optional<ScopeTypeType> scopeType;
	std::optional<LabelType> label;
	std::optional<DescriptionType> description;
};
bool convertToJson(const ThresholdDescriptionDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, ThresholdDescriptionDataType &dst);

struct ThresholdDescriptionDataElementsType { // complex
	std::optional<ElementTagType> thresholdId;
	std::optional<ElementTagType> thresholdType;
	std::optional<ElementTagType> unit;
	std::optional<ElementTagType> scopeType;
	std::optional<ElementTagType> label;
	std::optional<ElementTagType> description;
};
bool convertToJson(const ThresholdDescriptionDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, ThresholdDescriptionDataElementsType &dst);

struct ThresholdDescriptionListDataType { // complex
	std::optional<ThresholdDescriptionDataType> thresholdDescriptionData;
};
bool convertToJson(const ThresholdDescriptionListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, ThresholdDescriptionListDataType &dst);

struct ThresholdDescriptionListDataSelectorsType { // complex
	std::optional<ThresholdIdType> thresholdId;
	std::optional<ScopeTypeType> scopeType;
};
bool convertToJson(const ThresholdDescriptionListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, ThresholdDescriptionListDataSelectorsType &dst);

struct DirectControlActivityStateType { // simple_complex 
	std::optional<DirectControlActivityStateEnumType> directcontrolactivitystateenumtype;
	std::optional<EnumExtendType> enumextendtype;
};
struct PowerTimeSlotValueTypeType { // simple_complex 
	std::optional<PowerTimeSlotValueTypeEnumType> powertimeslotvaluetypeenumtype;
	std::optional<EnumExtendType> enumextendtype;
};
struct PowerSequenceScopeType { // simple_complex 
	std::optional<PowerSequenceScopeEnumType> powersequencescopeenumtype;
	std::optional<EnumExtendType> enumextendtype;
};
struct PowerSequenceStateType { // simple_complex 
	std::optional<PowerSequenceStateEnumType> powersequencestateenumtype;
	std::optional<EnumExtendType> enumextendtype;
};
struct DirectControlActivityDataType { // complex
	std::optional<AbsoluteOrRelativeTimeType> timestamp;
	std::optional<DirectControlActivityStateType> activityState;
	std::optional<bool> isActivityStateChangeable;
	std::optional<EnergyModeType> energyMode;
	std::optional<bool> isEnergyModeChangeable;
	std::optional<ScaledNumberType> power;
	std::optional<bool> isPowerChangeable;
	std::optional<ScaledNumberType> energy;
	std::optional<bool> isEnergyChangeable;
	std::optional<PowerSequenceIdType> sequenceId;
};
bool convertToJson(const DirectControlActivityDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, DirectControlActivityDataType &dst);

struct DirectControlActivityDataElementsType { // complex
	std::optional<ElementTagType> timestamp;
	std::optional<ElementTagType> activityState;
	std::optional<ElementTagType> isActivityStateChangeable;
	std::optional<ElementTagType> energyMode;
	std::optional<ElementTagType> isEnergyModeChangeable;
	std::optional<ScaledNumberElementsType> power;
	std::optional<ElementTagType> isPowerChangeable;
	std::optional<ScaledNumberElementsType> energy;
	std::optional<ElementTagType> isEnergyChangeable;
	std::optional<ElementTagType> sequenceId;
};
bool convertToJson(const DirectControlActivityDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, DirectControlActivityDataElementsType &dst);

struct DirectControlActivityListDataType { // complex
	std::optional<DirectControlActivityDataType> directControlActivityData;
};
bool convertToJson(const DirectControlActivityListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, DirectControlActivityListDataType &dst);

struct DirectControlActivityListDataSelectorsType { // complex
	std::optional<TimestampIntervalType> timestampInterval;
};
bool convertToJson(const DirectControlActivityListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, DirectControlActivityListDataSelectorsType &dst);

struct DirectControlDescriptionDataType { // complex
	std::optional<EnergyDirectionType> positiveEnergyDirection;
	std::optional<UnitOfMeasurementType> powerUnit;
	std::optional<UnitOfMeasurementType> energyUnit;
};
bool convertToJson(const DirectControlDescriptionDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, DirectControlDescriptionDataType &dst);

struct DirectControlDescriptionDataElementsType { // complex
	std::optional<ElementTagType> positiveEnergyDirection;
	std::optional<ElementTagType> powerUnit;
	std::optional<ElementTagType> energyUnit;
};
bool convertToJson(const DirectControlDescriptionDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, DirectControlDescriptionDataElementsType &dst);

struct PowerTimeSlotScheduleDataType { // complex
	std::optional<PowerSequenceIdType> sequenceId;
	std::optional<PowerTimeSlotNumberType> slotNumber;
	std::optional<TimePeriodType> timePeriod;
	std::optional<std::string> defaultDuration;
	std::optional<std::string> durationUncertainty;
	std::optional<bool> slotActivated;
	std::optional<DescriptionType> description;
};
bool convertToJson(const PowerTimeSlotScheduleDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, PowerTimeSlotScheduleDataType &dst);

struct PowerTimeSlotScheduleDataElementsType { // complex
	std::optional<ElementTagType> sequenceId;
	std::optional<ElementTagType> slotNumber;
	std::optional<TimePeriodElementsType> timePeriod;
	std::optional<ElementTagType> defaultDuration;
	std::optional<ElementTagType> durationUncertainty;
	std::optional<ElementTagType> slotActivated;
	std::optional<ElementTagType> description;
};
bool convertToJson(const PowerTimeSlotScheduleDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, PowerTimeSlotScheduleDataElementsType &dst);

struct PowerTimeSlotScheduleListDataType { // complex
	std::optional<PowerTimeSlotScheduleDataType> powerTimeSlotScheduleData;
};
bool convertToJson(const PowerTimeSlotScheduleListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, PowerTimeSlotScheduleListDataType &dst);

struct PowerTimeSlotScheduleListDataSelectorsType { // complex
	std::optional<PowerSequenceIdType> sequenceId;
	std::optional<PowerTimeSlotNumberType> slotNumber;
};
bool convertToJson(const PowerTimeSlotScheduleListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, PowerTimeSlotScheduleListDataSelectorsType &dst);

struct PowerTimeSlotValueDataType { // complex
	std::optional<PowerSequenceIdType> sequenceId;
	std::optional<PowerTimeSlotNumberType> slotNumber;
	std::optional<PowerTimeSlotValueTypeType> valueType;
	std::optional<ScaledNumberType> value;
};
bool convertToJson(const PowerTimeSlotValueDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, PowerTimeSlotValueDataType &dst);

struct PowerTimeSlotValueDataElementsType { // complex
	std::optional<ElementTagType> sequenceId;
	std::optional<ElementTagType> slotNumber;
	std::optional<ElementTagType> valueType;
	std::optional<ScaledNumberElementsType> value;
};
bool convertToJson(const PowerTimeSlotValueDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, PowerTimeSlotValueDataElementsType &dst);

struct PowerTimeSlotValueListDataType { // complex
	std::optional<PowerTimeSlotValueDataType> powerTimeSlotValueData;
};
bool convertToJson(const PowerTimeSlotValueListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, PowerTimeSlotValueListDataType &dst);

struct PowerTimeSlotValueListDataSelectorsType { // complex
	std::optional<PowerSequenceIdType> sequenceId;
	std::optional<PowerTimeSlotNumberType> slotNumber;
	std::optional<PowerTimeSlotValueTypeType> valueType;
};
bool convertToJson(const PowerTimeSlotValueListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, PowerTimeSlotValueListDataSelectorsType &dst);

struct PowerTimeSlotScheduleConstraintsDataType { // complex
	std::optional<PowerSequenceIdType> sequenceId;
	std::optional<PowerTimeSlotNumberType> slotNumber;
	std::optional<AbsoluteOrRelativeTimeType> earliestStartTime;
	std::optional<AbsoluteOrRelativeTimeType> latestEndTime;
	std::optional<std::string> minDuration;
	std::optional<std::string> maxDuration;
	std::optional<bool> optionalSlot;
};
bool convertToJson(const PowerTimeSlotScheduleConstraintsDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, PowerTimeSlotScheduleConstraintsDataType &dst);

struct PowerTimeSlotScheduleConstraintsDataElementsType { // complex
	std::optional<ElementTagType> sequenceId;
	std::optional<ElementTagType> slotNumber;
	std::optional<ElementTagType> earliestStartTime;
	std::optional<ElementTagType> latestEndTime;
	std::optional<ElementTagType> minDuration;
	std::optional<ElementTagType> maxDuration;
	std::optional<ElementTagType> optionalSlot;
};
bool convertToJson(const PowerTimeSlotScheduleConstraintsDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, PowerTimeSlotScheduleConstraintsDataElementsType &dst);

struct PowerTimeSlotScheduleConstraintsListDataType { // complex
	std::optional<PowerTimeSlotScheduleConstraintsDataType> powerTimeSlotScheduleConstraintsData;
};
bool convertToJson(const PowerTimeSlotScheduleConstraintsListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, PowerTimeSlotScheduleConstraintsListDataType &dst);

struct PowerTimeSlotScheduleConstraintsListDataSelectorsType { // complex
	std::optional<PowerSequenceIdType> sequenceId;
	std::optional<PowerTimeSlotNumberType> slotNumber;
};
bool convertToJson(const PowerTimeSlotScheduleConstraintsListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, PowerTimeSlotScheduleConstraintsListDataSelectorsType &dst);

struct PowerSequenceAlternativesRelationDataType { // complex
	std::optional<AlternativesIdType> alternativesId;
	std::optional<PowerSequenceIdType> sequenceId;
};
bool convertToJson(const PowerSequenceAlternativesRelationDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, PowerSequenceAlternativesRelationDataType &dst);

struct PowerSequenceAlternativesRelationDataElementsType { // complex
	std::optional<ElementTagType> alternativesId;
	std::optional<ElementTagType> sequenceId;
};
bool convertToJson(const PowerSequenceAlternativesRelationDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, PowerSequenceAlternativesRelationDataElementsType &dst);

struct PowerSequenceAlternativesRelationListDataType { // complex
	std::optional<PowerSequenceAlternativesRelationDataType> powerSequenceAlternativesRelationData;
};
bool convertToJson(const PowerSequenceAlternativesRelationListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, PowerSequenceAlternativesRelationListDataType &dst);

struct PowerSequenceAlternativesRelationListDataSelectorsType { // complex
	std::optional<AlternativesIdType> alternativesId;
	std::optional<PowerSequenceIdType> sequenceId;
};
bool convertToJson(const PowerSequenceAlternativesRelationListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, PowerSequenceAlternativesRelationListDataSelectorsType &dst);

struct PowerSequenceDescriptionDataType { // complex
	std::optional<PowerSequenceIdType> sequenceId;
	std::optional<DescriptionType> description;
	std::optional<EnergyDirectionType> positiveEnergyDirection;
	std::optional<UnitOfMeasurementType> powerUnit;
	std::optional<UnitOfMeasurementType> energyUnit;
	std::optional<MeasurementValueSourceType> valueSource;
	std::optional<PowerSequenceScopeType> scope;
	std::optional<uint32_t> taskIdentifier;
	std::optional<uint32_t> repetitionsTotal;
};
bool convertToJson(const PowerSequenceDescriptionDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, PowerSequenceDescriptionDataType &dst);

struct PowerSequenceDescriptionDataElementsType { // complex
	std::optional<ElementTagType> sequenceId;
	std::optional<ElementTagType> description;
	std::optional<ElementTagType> positiveEnergyDirection;
	std::optional<ElementTagType> powerUnit;
	std::optional<ElementTagType> energyUnit;
	std::optional<ElementTagType> valueSource;
	std::optional<ElementTagType> scope;
	std::optional<ElementTagType> taskIdentifier;
	std::optional<ElementTagType> repetitionsTotal;
};
bool convertToJson(const PowerSequenceDescriptionDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, PowerSequenceDescriptionDataElementsType &dst);

struct PowerSequenceDescriptionListDataType { // complex
	std::optional<PowerSequenceDescriptionDataType> powerSequenceDescriptionData;
};
bool convertToJson(const PowerSequenceDescriptionListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, PowerSequenceDescriptionListDataType &dst);

struct PowerSequenceDescriptionListDataSelectorsType { // complex
	std::optional<PowerSequenceIdType> sequenceId;
};
bool convertToJson(const PowerSequenceDescriptionListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, PowerSequenceDescriptionListDataSelectorsType &dst);

struct PowerSequenceStateDataType { // complex
	std::optional<PowerSequenceIdType> sequenceId;
	std::optional<PowerSequenceStateType> state;
	std::optional<PowerTimeSlotNumberType> activeSlotNumber;
	std::optional<std::string> elapsedSlotTime;
	std::optional<std::string> remainingSlotTime;
	std::optional<bool> sequenceRemoteControllable;
	std::optional<uint32_t> activeRepetitionNumber;
	std::optional<std::string> remainingPauseTime;
};
bool convertToJson(const PowerSequenceStateDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, PowerSequenceStateDataType &dst);

struct PowerSequenceStateDataElementsType { // complex
	std::optional<ElementTagType> sequenceId;
	std::optional<ElementTagType> state;
	std::optional<ElementTagType> activeSlotNumber;
	std::optional<ElementTagType> elapsedSlotTime;
	std::optional<ElementTagType> remainingSlotTime;
	std::optional<ElementTagType> sequenceRemoteControllable;
	std::optional<ElementTagType> activeRepetitionNumber;
	std::optional<ElementTagType> remainingPauseTime;
};
bool convertToJson(const PowerSequenceStateDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, PowerSequenceStateDataElementsType &dst);

struct PowerSequenceStateListDataType { // complex
	std::optional<PowerSequenceStateDataType> powerSequenceStateData;
};
bool convertToJson(const PowerSequenceStateListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, PowerSequenceStateListDataType &dst);

struct PowerSequenceStateListDataSelectorsType { // complex
	std::optional<PowerSequenceIdType> sequenceId;
};
bool convertToJson(const PowerSequenceStateListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, PowerSequenceStateListDataSelectorsType &dst);

struct PowerSequenceScheduleDataType { // complex
	std::optional<PowerSequenceIdType> sequenceId;
	std::optional<AbsoluteOrRelativeTimeType> startTime;
	std::optional<AbsoluteOrRelativeTimeType> endTime;
};
bool convertToJson(const PowerSequenceScheduleDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, PowerSequenceScheduleDataType &dst);

struct PowerSequenceScheduleDataElementsType { // complex
	std::optional<ElementTagType> sequenceId;
	std::optional<ElementTagType> startTime;
	std::optional<ElementTagType> endTime;
};
bool convertToJson(const PowerSequenceScheduleDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, PowerSequenceScheduleDataElementsType &dst);

struct PowerSequenceScheduleListDataType { // complex
	std::optional<PowerSequenceScheduleDataType> powerSequenceScheduleData;
};
bool convertToJson(const PowerSequenceScheduleListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, PowerSequenceScheduleListDataType &dst);

struct PowerSequenceScheduleListDataSelectorsType { // complex
	std::optional<PowerSequenceIdType> sequenceId;
};
bool convertToJson(const PowerSequenceScheduleListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, PowerSequenceScheduleListDataSelectorsType &dst);

struct PowerSequenceScheduleConstraintsDataType { // complex
	std::optional<PowerSequenceIdType> sequenceId;
	std::optional<AbsoluteOrRelativeTimeType> earliestStartTime;
	std::optional<AbsoluteOrRelativeTimeType> latestStartTime;
	std::optional<AbsoluteOrRelativeTimeType> earliestEndTime;
	std::optional<AbsoluteOrRelativeTimeType> latestEndTime;
	std::optional<bool> optionalSequence;
};
bool convertToJson(const PowerSequenceScheduleConstraintsDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, PowerSequenceScheduleConstraintsDataType &dst);

struct PowerSequenceScheduleConstraintsDataElementsType { // complex
	std::optional<ElementTagType> sequenceId;
	std::optional<ElementTagType> earliestStartTime;
	std::optional<ElementTagType> latestStartTime;
	std::optional<ElementTagType> earliestEndTime;
	std::optional<ElementTagType> latestEndTime;
	std::optional<ElementTagType> optionalSequence;
};
bool convertToJson(const PowerSequenceScheduleConstraintsDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, PowerSequenceScheduleConstraintsDataElementsType &dst);

struct PowerSequenceScheduleConstraintsListDataType { // complex
	std::optional<PowerSequenceScheduleConstraintsDataType> powerSequenceScheduleConstraintsData;
};
bool convertToJson(const PowerSequenceScheduleConstraintsListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, PowerSequenceScheduleConstraintsListDataType &dst);

struct PowerSequenceScheduleConstraintsListDataSelectorsType { // complex
	std::optional<PowerSequenceIdType> sequenceId;
};
bool convertToJson(const PowerSequenceScheduleConstraintsListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, PowerSequenceScheduleConstraintsListDataSelectorsType &dst);

struct PowerSequencePriceDataType { // complex
	std::optional<PowerSequenceIdType> sequenceId;
	std::optional<AbsoluteOrRelativeTimeType> potentialStartTime;
	std::optional<ScaledNumberType> price;
	std::optional<CurrencyType> currency;
};
bool convertToJson(const PowerSequencePriceDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, PowerSequencePriceDataType &dst);

struct PowerSequencePriceDataElementsType { // complex
	std::optional<ElementTagType> sequenceId;
	std::optional<ElementTagType> potentialStartTime;
	std::optional<ScaledNumberElementsType> price;
	std::optional<ElementTagType> currency;
};
bool convertToJson(const PowerSequencePriceDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, PowerSequencePriceDataElementsType &dst);

struct PowerSequencePriceListDataType { // complex
	std::optional<PowerSequencePriceDataType> powerSequencePriceData;
};
bool convertToJson(const PowerSequencePriceListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, PowerSequencePriceListDataType &dst);

struct PowerSequencePriceListDataSelectorsType { // complex
	std::optional<PowerSequenceIdType> sequenceId;
	std::optional<TimestampIntervalType> potentialStartTimeInterval;
};
bool convertToJson(const PowerSequencePriceListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, PowerSequencePriceListDataSelectorsType &dst);

struct PowerSequenceSchedulePreferenceDataType { // complex
	std::optional<PowerSequenceIdType> sequenceId;
	std::optional<bool> greenest;
	std::optional<bool> cheapest;
};
bool convertToJson(const PowerSequenceSchedulePreferenceDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, PowerSequenceSchedulePreferenceDataType &dst);

struct PowerSequenceSchedulePreferenceDataElementsType { // complex
	std::optional<ElementTagType> sequenceId;
	std::optional<ElementTagType> greenest;
	std::optional<ElementTagType> cheapest;
};
bool convertToJson(const PowerSequenceSchedulePreferenceDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, PowerSequenceSchedulePreferenceDataElementsType &dst);

struct PowerSequenceSchedulePreferenceListDataType { // complex
	std::optional<PowerSequenceSchedulePreferenceDataType> powerSequenceSchedulePreferenceData;
};
bool convertToJson(const PowerSequenceSchedulePreferenceListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, PowerSequenceSchedulePreferenceListDataType &dst);

struct PowerSequenceSchedulePreferenceListDataSelectorsType { // complex
	std::optional<PowerSequenceIdType> sequenceId;
};
bool convertToJson(const PowerSequenceSchedulePreferenceListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, PowerSequenceSchedulePreferenceListDataSelectorsType &dst);

struct PowerSequenceNodeScheduleInformationDataType { // complex
	std::optional<bool> nodeRemoteControllable;
	std::optional<bool> supportsSingleSlotSchedulingOnly;
	std::optional<uint32_t> alternativesCount;
	std::optional<uint32_t> totalSequencesCountMax;
	std::optional<bool> supportsReselection;
};
bool convertToJson(const PowerSequenceNodeScheduleInformationDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, PowerSequenceNodeScheduleInformationDataType &dst);

struct PowerSequenceNodeScheduleInformationDataElementsType { // complex
	std::optional<ElementTagType> nodeRemoteControllable;
	std::optional<ElementTagType> supportsSingleSlotSchedulingOnly;
	std::optional<ElementTagType> alternativesCount;
	std::optional<ElementTagType> totalSequencesCountMax;
	std::optional<ElementTagType> supportsReselection;
};
bool convertToJson(const PowerSequenceNodeScheduleInformationDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, PowerSequenceNodeScheduleInformationDataElementsType &dst);

struct PowerSequenceScheduleConfigurationRequestCallType { // complex
	std::optional<PowerSequenceIdType> sequenceId;
};
bool convertToJson(const PowerSequenceScheduleConfigurationRequestCallType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, PowerSequenceScheduleConfigurationRequestCallType &dst);

struct PowerSequenceScheduleConfigurationRequestCallElementsType { // complex
	std::optional<ElementTagType> sequenceId;
};
bool convertToJson(const PowerSequenceScheduleConfigurationRequestCallElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, PowerSequenceScheduleConfigurationRequestCallElementsType &dst);

struct PowerSequencePriceCalculationRequestCallType { // complex
	std::optional<PowerSequenceIdType> sequenceId;
	std::optional<AbsoluteOrRelativeTimeType> potentialStartTime;
};
bool convertToJson(const PowerSequencePriceCalculationRequestCallType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, PowerSequencePriceCalculationRequestCallType &dst);

struct PowerSequencePriceCalculationRequestCallElementsType { // complex
	std::optional<ElementTagType> sequenceId;
	std::optional<ElementTagType> potentialStartTime;
};
bool convertToJson(const PowerSequencePriceCalculationRequestCallElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, PowerSequencePriceCalculationRequestCallElementsType &dst);

struct ResultDataType { // complex
	std::optional<ErrorNumberType> errorNumber;
	std::optional<DescriptionType> description;
};
bool convertToJson(const ResultDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, ResultDataType &dst);

struct BindingManagementEntryDataType { // complex
	std::optional<BindingIdType> bindingId;
	std::optional<FeatureAddressType> clientAddress;
	std::optional<FeatureAddressType> serverAddress;
	std::optional<LabelType> label;
	std::optional<DescriptionType> description;
};
bool convertToJson(const BindingManagementEntryDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, BindingManagementEntryDataType &dst);

struct BindingManagementEntryDataElementsType { // complex
	std::optional<ElementTagType> bindingId;
	std::optional<FeatureAddressElementsType> clientAddress;
	std::optional<FeatureAddressElementsType> serverAddress;
	std::optional<ElementTagType> label;
	std::optional<ElementTagType> description;
};
bool convertToJson(const BindingManagementEntryDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, BindingManagementEntryDataElementsType &dst);

struct BindingManagementEntryListDataType { // complex
	std::optional<BindingManagementEntryDataType> bindingManagementEntryData;
};
bool convertToJson(const BindingManagementEntryListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, BindingManagementEntryListDataType &dst);

struct BindingManagementEntryListDataSelectorsType { // complex
	std::optional<BindingIdType> bindingId;
	std::optional<FeatureAddressType> clientAddress;
	std::optional<FeatureAddressType> serverAddress;
};
bool convertToJson(const BindingManagementEntryListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, BindingManagementEntryListDataSelectorsType &dst);

struct BindingManagementRequestCallType { // complex
	std::optional<FeatureAddressType> clientAddress;
	std::optional<FeatureAddressType> serverAddress;
	std::optional<FeatureTypeType> serverFeatureType;
};
bool convertToJson(const BindingManagementRequestCallType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, BindingManagementRequestCallType &dst);

struct BindingManagementRequestCallElementsType { // complex
	std::optional<FeatureAddressElementsType> clientAddress;
	std::optional<FeatureAddressElementsType> serverAddress;
	std::optional<ElementTagType> serverFeatureType;
};
bool convertToJson(const BindingManagementRequestCallElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, BindingManagementRequestCallElementsType &dst);

struct BindingManagementDeleteCallType { // complex
	std::optional<BindingIdType> bindingId;
	std::optional<FeatureAddressType> clientAddress;
	std::optional<FeatureAddressType> serverAddress;
};
bool convertToJson(const BindingManagementDeleteCallType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, BindingManagementDeleteCallType &dst);

struct BindingManagementDeleteCallElementsType { // complex
	std::optional<ElementTagType> bindingId;
	std::optional<FeatureAddressElementsType> clientAddress;
	std::optional<FeatureAddressElementsType> serverAddress;
};
bool convertToJson(const BindingManagementDeleteCallElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, BindingManagementDeleteCallElementsType &dst);

struct ActuatorLevelFctType { // simple_complex 
	std::optional<ActuatorLevelFctEnumType> actuatorlevelfctenumtype;
	std::optional<EnumExtendType> enumextendtype;
};
struct ActuatorLevelDataType { // complex
	std::optional<ActuatorLevelFctType> function;
	std::optional<ScaledNumberType> value;
};
bool convertToJson(const ActuatorLevelDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, ActuatorLevelDataType &dst);

struct ActuatorLevelDataElementsType { // complex
	std::optional<ElementTagType> function;
	std::optional<ScaledNumberElementsType> value;
};
bool convertToJson(const ActuatorLevelDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, ActuatorLevelDataElementsType &dst);

struct ActuatorLevelDescriptionDataType { // complex
	std::optional<LabelType> label;
	std::optional<DescriptionType> description;
	std::optional<UnitOfMeasurementType> levelDefaultUnit;
};
bool convertToJson(const ActuatorLevelDescriptionDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, ActuatorLevelDescriptionDataType &dst);

struct ActuatorLevelDescriptionDataElementsType { // complex
	std::optional<ElementTagType> label;
	std::optional<ElementTagType> description;
	std::optional<ElementTagType> levelDefaultUnit;
};
bool convertToJson(const ActuatorLevelDescriptionDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, ActuatorLevelDescriptionDataElementsType &dst);

struct ActuatorSwitchFctType { // simple_complex 
	std::optional<ActuatorSwitchFctEnumType> actuatorswitchfctenumtype;
	std::optional<EnumExtendType> enumextendtype;
};
struct AlarmTypeType { // simple_complex 
	std::optional<AlarmTypeEnumType> alarmtypeenumtype;
	std::optional<EnumExtendType> enumextendtype;
};
struct BillTypeType { // simple_complex 
	std::optional<BillTypeEnumType> billtypeenumtype;
	std::optional<EnumExtendType> enumextendtype;
};
struct BillPositionTypeType { // simple_complex 
	std::optional<BillPositionTypeEnumType> billpositiontypeenumtype;
	std::optional<EnumExtendType> enumextendtype;
};
struct BillCostTypeType { // simple_complex 
	std::optional<BillCostTypeEnumType> billcosttypeenumtype;
	std::optional<EnumExtendType> enumextendtype;
};
struct IdentificationTypeType { // simple_complex 
	std::optional<IdentificationTypeEnumType> identificationtypeenumtype;
	std::optional<EnumExtendType> enumextendtype;
};
struct PowerSourceType { // simple_complex 
	std::optional<PowerSourceEnumType> powersourceenumtype;
	std::optional<EnumExtendType> enumextendtype;
};
struct DeviceConfigurationKeyNameType { // simple_complex 
	std::optional<DeviceConfigurationKeyNameEnumType> deviceconfigurationkeynameenumtype;
	std::optional<EnumExtendType> enumextendtype;
};
struct DeviceDiagnosisOperatingStateType { // simple_complex 
	std::optional<DeviceDiagnosisOperatingStateEnumType> devicediagnosisoperatingstateenumtype;
	std::optional<EnumExtendType> enumextendtype;
};
struct PowerSupplyConditionType { // simple_complex 
	std::optional<PowerSupplyConditionEnumType> powersupplyconditionenumtype;
	std::optional<EnumExtendType> enumextendtype;
};
struct ElectricalConnectionMeasurandVariantType { // simple_complex 
	std::optional<ElectricalConnectionMeasurandVariantEnumType> electricalconnectionmeasurandvariantenumtype;
	std::optional<EnumExtendType> enumextendtype;
};
struct ElectricalConnectionVoltageTypeType { // simple_complex 
	std::optional<ElectricalConnectionVoltageTypeEnumType> electricalconnectionvoltagetypeenumtype;
	std::optional<EnumExtendType> enumextendtype;
};
struct ElectricalConnectionAcMeasurementTypeType { // simple_complex 
	std::optional<ElectricalConnectionAcMeasurementTypeEnumType> electricalconnectionacmeasurementtypeenumtype;
	std::optional<EnumExtendType> enumextendtype;
};
struct ElectricalConnectionPhaseNameType { // simple_complex 
	std::optional<ElectricalConnectionPhaseNameEnumType> electricalconnectionphasenameenumtype;
	std::optional<EnumExtendType> enumextendtype;
};
struct ElectricalConnectionCharacteristicContextType { // simple_complex 
	std::optional<ElectricalConnectionCharacteristicContextEnumType> electricalconnectioncharacteristiccontextenumtype;
	std::optional<EnumExtendType> enumextendtype;
};
struct ElectricalConnectionCharacteristicTypeType { // simple_complex 
	std::optional<ElectricalConnectionCharacteristicTypeEnumType> electricalconnectioncharacteristictypeenumtype;
	std::optional<EnumExtendType> enumextendtype;
};
struct HvacSystemFunctionTypeType { // simple_complex 
	std::optional<HvacSystemFunctionTypeEnumType> hvacsystemfunctiontypeenumtype;
	std::optional<EnumExtendType> enumextendtype;
};
struct HvacOperationModeTypeType { // simple_complex 
	std::optional<HvacOperationModeTypeEnumType> hvacoperationmodetypeenumtype;
	std::optional<EnumExtendType> enumextendtype;
};
struct HvacOverrunTypeType { // simple_complex 
	std::optional<HvacOverrunTypeEnumType> hvacoverruntypeenumtype;
	std::optional<EnumExtendType> enumextendtype;
};
struct HvacOverrunStatusType { // simple_complex 
	std::optional<HvacOverrunStatusEnumType> hvacoverrunstatusenumtype;
	std::optional<EnumExtendType> enumextendtype;
};
struct SetpointTypeType { // simple_complex 
	std::optional<SetpointTypeEnumType> setpointtypeenumtype;
	std::optional<EnumExtendType> enumextendtype;
};
struct TimeSlotTimeModeType { // simple_complex 
	std::optional<TimeSlotTimeModeEnumType> timeslottimemodeenumtype;
	std::optional<EnumExtendType> enumextendtype;
};
struct TierBoundaryTypeType { // simple_complex 
	std::optional<TierBoundaryTypeEnumType> tierboundarytypeenumtype;
	std::optional<EnumExtendType> enumextendtype;
};
struct TierTypeType { // simple_complex 
	std::optional<TierTypeEnumType> tiertypeenumtype;
	std::optional<EnumExtendType> enumextendtype;
};
struct IncentiveTypeType { // simple_complex 
	std::optional<IncentiveTypeEnumType> incentivetypeenumtype;
	std::optional<EnumExtendType> enumextendtype;
};
struct IncentiveValueTypeType { // simple_complex 
	std::optional<IncentiveValueTypeEnumType> incentivevaluetypeenumtype;
	std::optional<EnumExtendType> enumextendtype;
};
struct LoadControlEventActionType { // simple_complex 
	std::optional<LoadControlEventActionEnumType> loadcontroleventactionenumtype;
	std::optional<EnumExtendType> enumextendtype;
};
struct LoadControlEventStateType { // simple_complex 
	std::optional<LoadControlEventStateEnumType> loadcontroleventstateenumtype;
	std::optional<EnumExtendType> enumextendtype;
};
struct LoadControlLimitTypeType { // simple_complex 
	std::optional<LoadControlLimitTypeEnumType> loadcontrollimittypeenumtype;
	std::optional<EnumExtendType> enumextendtype;
};
struct LoadControlCategoryType { // simple_complex 
	std::optional<LoadControlCategoryEnumType> loadcontrolcategoryenumtype;
	std::optional<EnumExtendType> enumextendtype;
};
struct UseCaseActorType { // simple_complex 
	std::optional<UseCaseActorEnumType> usecaseactorenumtype;
	std::optional<EnumExtendType> enumextendtype;
};
struct UseCaseNameType { // simple_complex 
	std::optional<UseCaseNameEnumType> usecasenameenumtype;
	std::optional<EnumExtendType> enumextendtype;
};
struct SensingStateType { // simple_complex 
	std::optional<SensingStateEnumType> sensingstateenumtype;
	std::optional<EnumExtendType> enumextendtype;
};
struct SensingTypeType { // simple_complex 
	std::optional<SensingTypeEnumType> sensingtypeenumtype;
	std::optional<EnumExtendType> enumextendtype;
};
struct StateInformationType { // simple_complex 
	std::optional<StateInformationFunctionalityEnumType> stateinformationfunctionalityenumtype;
	std::optional<StateInformationFailureEnumType> stateinformationfailureenumtype;
	std::optional<EnumExtendType> enumextendtype;
};
struct StateInformationCategoryType { // simple_complex 
	std::optional<StateInformationCategoryEnumType> stateinformationcategoryenumtype;
	std::optional<EnumExtendType> enumextendtype;
};
struct SupplyConditionEventTypeType { // simple_complex 
	std::optional<SupplyConditionEventTypeEnumType> supplyconditioneventtypeenumtype;
	std::optional<EnumExtendType> enumextendtype;
};
struct SupplyConditionOriginatorType { // simple_complex 
	std::optional<SupplyConditionOriginatorEnumType> supplyconditionoriginatorenumtype;
	std::optional<EnumExtendType> enumextendtype;
};
struct GridConditionType { // simple_complex 
	std::optional<GridConditionEnumType> gridconditionenumtype;
	std::optional<EnumExtendType> enumextendtype;
};
struct TaskManagementJobStateType { // simple_complex 
	std::optional<DirectControlActivityStateEnumType> directcontrolactivitystateenumtype;
	std::optional<HvacOverrunStatusEnumType> hvacoverrunstatusenumtype;
	std::optional<LoadControlEventStateEnumType> loadcontroleventstateenumtype;
	std::optional<PowerSequenceStateEnumType> powersequencestateenumtype;
	std::optional<EnumExtendType> enumextendtype;
};
struct TaskManagementJobSourceType { // simple_complex 
	std::optional<TaskManagementJobSourceEnumType> taskmanagementjobsourceenumtype;
	std::optional<EnumExtendType> enumextendtype;
};
struct CmdControlType { // complex
	std::optional<ElementTagType> var_delete;
	std::optional<ElementTagType> partial;
};
bool convertToJson(const CmdControlType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, CmdControlType &dst);

struct CmdType { // complex
	std::optional<PayloadContributionGroup> PayloadContributionGroup;
};
bool convertToJson(const CmdType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, CmdType &dst);

struct ActuatorSwitchDataType { // complex
	std::optional<ActuatorSwitchFctType> function;
};
bool convertToJson(const ActuatorSwitchDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, ActuatorSwitchDataType &dst);

struct ActuatorSwitchDataElementsType { // complex
	std::optional<ElementTagType> function;
};
bool convertToJson(const ActuatorSwitchDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, ActuatorSwitchDataElementsType &dst);

struct ActuatorSwitchDescriptionDataType { // complex
	std::optional<LabelType> label;
	std::optional<DescriptionType> description;
};
bool convertToJson(const ActuatorSwitchDescriptionDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, ActuatorSwitchDescriptionDataType &dst);

struct ActuatorSwitchDescriptionDataElementsType { // complex
	std::optional<ElementTagType> label;
	std::optional<ElementTagType> description;
};
bool convertToJson(const ActuatorSwitchDescriptionDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, ActuatorSwitchDescriptionDataElementsType &dst);

struct AlarmDataType { // complex
	std::optional<AlarmIdType> alarmId;
	std::optional<ThresholdIdType> thresholdId;
	std::optional<AbsoluteOrRelativeTimeType> timestamp;
	std::optional<AlarmTypeType> alarmType;
	std::optional<ScaledNumberType> measuredValue;
	std::optional<TimePeriodType> evaluationPeriod;
	std::optional<ScopeTypeType> scopeType;
	std::optional<LabelType> label;
	std::optional<DescriptionType> description;
};
bool convertToJson(const AlarmDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, AlarmDataType &dst);

struct AlarmDataElementsType { // complex
	std::optional<ElementTagType> alarmId;
	std::optional<ElementTagType> thresholdId;
	std::optional<ElementTagType> timestamp;
	std::optional<ElementTagType> alarmType;
	std::optional<ScaledNumberElementsType> measuredValue;
	std::optional<TimePeriodElementsType> evaluationPeriod;
	std::optional<ElementTagType> scopeType;
	std::optional<ElementTagType> label;
	std::optional<ElementTagType> description;
};
bool convertToJson(const AlarmDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, AlarmDataElementsType &dst);

struct AlarmListDataType { // complex
	std::optional<AlarmDataType> alarmData;
};
bool convertToJson(const AlarmListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, AlarmListDataType &dst);

struct AlarmListDataSelectorsType { // complex
	std::optional<AlarmIdType> alarmId;
	std::optional<ScopeTypeType> scopeType;
};
bool convertToJson(const AlarmListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, AlarmListDataSelectorsType &dst);

struct BillValueType { // complex
	std::optional<BillValueIdType> valueId;
	std::optional<UnitOfMeasurementType> unit;
	std::optional<ScaledNumberType> value;
	std::optional<ScaledNumberType> valuePercentage;
};
bool convertToJson(const BillValueType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, BillValueType &dst);

struct BillValueElementsType { // complex
	std::optional<ElementTagType> valueId;
	std::optional<ElementTagType> unit;
	std::optional<ScaledNumberElementsType> value;
	std::optional<ScaledNumberElementsType> valuePercentage;
};
bool convertToJson(const BillValueElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, BillValueElementsType &dst);

struct BillCostType { // complex
	std::optional<BillCostIdType> costId;
	std::optional<BillCostTypeType> costType;
	std::optional<BillValueIdType> valueId;
	std::optional<UnitOfMeasurementType> unit;
	std::optional<CurrencyType> currency;
	std::optional<ScaledNumberType> cost;
	std::optional<ScaledNumberType> costPercentage;
};
bool convertToJson(const BillCostType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, BillCostType &dst);

struct BillCostElementsType { // complex
	std::optional<ElementTagType> costId;
	std::optional<ElementTagType> costType;
	std::optional<ElementTagType> valueId;
	std::optional<ElementTagType> unit;
	std::optional<ElementTagType> currency;
	std::optional<ScaledNumberElementsType> cost;
	std::optional<ScaledNumberElementsType> costPercentage;
};
bool convertToJson(const BillCostElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, BillCostElementsType &dst);

struct BillPositionType { // complex
	std::optional<BillPositionIdType> positionId;
	std::optional<BillPositionTypeType> positionType;
	std::optional<TimePeriodType> timePeriod;
	std::optional<BillValueType> value;
	std::optional<BillCostType> cost;
	std::optional<LabelType> label;
	std::optional<DescriptionType> description;
};
bool convertToJson(const BillPositionType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, BillPositionType &dst);

struct BillPositionElementsType { // complex
	std::optional<ElementTagType> positionId;
	std::optional<ElementTagType> positionType;
	std::optional<TimePeriodElementsType> timePeriod;
	std::optional<BillValueElementsType> value;
	std::optional<BillCostElementsType> cost;
	std::optional<ElementTagType> label;
	std::optional<ElementTagType> description;
};
bool convertToJson(const BillPositionElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, BillPositionElementsType &dst);

struct BillDataType { // complex
	std::optional<BillIdType> billId;
	std::optional<BillTypeType> billType;
	std::optional<ScopeTypeType> scopeType;
	std::optional<BillPositionType> total;
	std::optional<BillPositionType> position;
};
bool convertToJson(const BillDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, BillDataType &dst);

struct BillDataElementsType { // complex
	std::optional<ElementTagType> billId;
	std::optional<ElementTagType> billType;
	std::optional<ElementTagType> scopeType;
	std::optional<BillPositionElementsType> total;
	std::optional<BillPositionElementsType> position;
};
bool convertToJson(const BillDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, BillDataElementsType &dst);

struct BillListDataType { // complex
	std::optional<BillDataType> billData;
};
bool convertToJson(const BillListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, BillListDataType &dst);

struct BillListDataSelectorsType { // complex
	std::optional<BillIdType> billId;
	std::optional<ScopeTypeType> scopeType;
};
bool convertToJson(const BillListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, BillListDataSelectorsType &dst);

struct BillConstraintsDataType { // complex
	std::optional<BillIdType> billId;
	std::optional<BillPositionCountType> positionCountMin;
	std::optional<BillPositionCountType> positionCountMax;
};
bool convertToJson(const BillConstraintsDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, BillConstraintsDataType &dst);

struct BillConstraintsDataElementsType { // complex
	std::optional<ElementTagType> billId;
	std::optional<ElementTagType> positionCountMin;
	std::optional<ElementTagType> positionCountMax;
};
bool convertToJson(const BillConstraintsDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, BillConstraintsDataElementsType &dst);

struct BillConstraintsListDataType { // complex
	std::optional<BillConstraintsDataType> billConstraintsData;
};
bool convertToJson(const BillConstraintsListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, BillConstraintsListDataType &dst);

struct BillConstraintsListDataSelectorsType { // complex
	std::optional<BillIdType> billId;
};
bool convertToJson(const BillConstraintsListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, BillConstraintsListDataSelectorsType &dst);

struct BillDescriptionDataType { // complex
	std::optional<BillIdType> billId;
	std::optional<bool> billWriteable;
	std::optional<bool> updateRequired;
	std::optional<BillTypeType> supportedBillType;
	std::optional<SessionIdType> sessionId;
};
bool convertToJson(const BillDescriptionDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, BillDescriptionDataType &dst);

struct BillDescriptionDataElementsType { // complex
	std::optional<ElementTagType> billId;
	std::optional<ElementTagType> billWriteable;
	std::optional<ElementTagType> updateRequired;
	std::optional<ElementTagType> supportedBillType;
	std::optional<ElementTagType> sessionId;
};
bool convertToJson(const BillDescriptionDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, BillDescriptionDataElementsType &dst);

struct BillDescriptionListDataType { // complex
	std::optional<BillDescriptionDataType> billDescriptionData;
};
bool convertToJson(const BillDescriptionListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, BillDescriptionListDataType &dst);

struct BillDescriptionListDataSelectorsType { // complex
	std::optional<BillIdType> billId;
};
bool convertToJson(const BillDescriptionListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, BillDescriptionListDataSelectorsType &dst);

struct IdentificationDataType { // complex
	std::optional<IdentificationIdType> identificationId;
	std::optional<IdentificationTypeType> identificationType;
	std::optional<IdentificationValueType> identificationValue;
	std::optional<bool> authorized;
};
bool convertToJson(const IdentificationDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, IdentificationDataType &dst);

struct IdentificationDataElementsType { // complex
	std::optional<ElementTagType> identificationId;
	std::optional<ElementTagType> identificationType;
	std::optional<ElementTagType> identificationValue;
	std::optional<ElementTagType> authorized;
};
bool convertToJson(const IdentificationDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, IdentificationDataElementsType &dst);

struct IdentificationListDataType { // complex
	std::optional<IdentificationDataType> identificationData;
};
bool convertToJson(const IdentificationListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, IdentificationListDataType &dst);

struct IdentificationListDataSelectorsType { // complex
	std::optional<IdentificationIdType> identificationId;
	std::optional<IdentificationTypeType> identificationType;
};
bool convertToJson(const IdentificationListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, IdentificationListDataSelectorsType &dst);

struct SessionIdentificationDataType { // complex
	std::optional<SessionIdType> sessionId;
	std::optional<IdentificationIdType> identificationId;
	std::optional<bool> isLatestSession;
	std::optional<TimePeriodType> timePeriod;
};
bool convertToJson(const SessionIdentificationDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SessionIdentificationDataType &dst);

struct SessionIdentificationDataElementsType { // complex
	std::optional<ElementTagType> sessionId;
	std::optional<ElementTagType> identificationId;
	std::optional<ElementTagType> isLatestSession;
	std::optional<TimePeriodElementsType> timePeriod;
};
bool convertToJson(const SessionIdentificationDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SessionIdentificationDataElementsType &dst);

struct SessionIdentificationListDataType { // complex
	std::optional<SessionIdentificationDataType> sessionIdentificationData;
};
bool convertToJson(const SessionIdentificationListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SessionIdentificationListDataType &dst);

struct SessionIdentificationListDataSelectorsType { // complex
	std::optional<SessionIdType> sessionId;
	std::optional<IdentificationIdType> identificationId;
	std::optional<bool> isLatestSession;
	std::optional<TimePeriodType> timePeriod;
};
bool convertToJson(const SessionIdentificationListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SessionIdentificationListDataSelectorsType &dst);

struct SessionMeasurementRelationDataType { // complex
	std::optional<SessionIdType> sessionId;
	std::optional<MeasurementIdType> measurementId;
};
bool convertToJson(const SessionMeasurementRelationDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SessionMeasurementRelationDataType &dst);

struct SessionMeasurementRelationDataElementsType { // complex
	std::optional<ElementTagType> sessionId;
	std::optional<ElementTagType> measurementId;
};
bool convertToJson(const SessionMeasurementRelationDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SessionMeasurementRelationDataElementsType &dst);

struct SessionMeasurementRelationListDataType { // complex
	std::optional<SessionMeasurementRelationDataType> sessionMeasurementRelationData;
};
bool convertToJson(const SessionMeasurementRelationListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SessionMeasurementRelationListDataType &dst);

struct SessionMeasurementRelationListDataSelectorsType { // complex
	std::optional<SessionIdType> sessionId;
	std::optional<MeasurementIdType> measurementId;
};
bool convertToJson(const SessionMeasurementRelationListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SessionMeasurementRelationListDataSelectorsType &dst);

struct DataTunnelingHeaderType { // complex
	std::optional<PurposeIdType> purposeId;
	std::optional<ChannelIdType> channelId;
	std::optional<uint32_t> sequenceId;
};
bool convertToJson(const DataTunnelingHeaderType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, DataTunnelingHeaderType &dst);

struct DataTunnelingHeaderElementsType { // complex
	std::optional<ElementTagType> purposeId;
	std::optional<ElementTagType> channelId;
	std::optional<ElementTagType> sequenceId;
};
bool convertToJson(const DataTunnelingHeaderElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, DataTunnelingHeaderElementsType &dst);

struct DataTunnelingCallType { // complex
	std::optional<DataTunnelingHeaderType> header;
	std::optional<std::string> payload;
};
bool convertToJson(const DataTunnelingCallType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, DataTunnelingCallType &dst);

struct DataTunnelingCallElementsType { // complex
	std::optional<DataTunnelingHeaderElementsType> header;
	std::optional<ElementTagType> payload;
};
bool convertToJson(const DataTunnelingCallElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, DataTunnelingCallElementsType &dst);

struct DeviceClassificationManufacturerDataType { // complex
	std::optional<DeviceClassificationStringType> deviceName;
	std::optional<DeviceClassificationStringType> deviceCode;
	std::optional<DeviceClassificationStringType> serialNumber;
	std::optional<DeviceClassificationStringType> softwareRevision;
	std::optional<DeviceClassificationStringType> hardwareRevision;
	std::optional<DeviceClassificationStringType> vendorName;
	std::optional<DeviceClassificationStringType> vendorCode;
	std::optional<DeviceClassificationStringType> brandName;
	std::optional<PowerSourceType> powerSource;
	std::optional<DeviceClassificationStringType> manufacturerNodeIdentification;
	std::optional<LabelType> manufacturerLabel;
	std::optional<DescriptionType> manufacturerDescription;
};
bool convertToJson(const DeviceClassificationManufacturerDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, DeviceClassificationManufacturerDataType &dst);

struct DeviceClassificationManufacturerDataElementsType { // complex
	std::optional<ElementTagType> deviceName;
	std::optional<ElementTagType> deviceCode;
	std::optional<ElementTagType> serialNumber;
	std::optional<ElementTagType> softwareRevision;
	std::optional<ElementTagType> hardwareRevision;
	std::optional<ElementTagType> vendorName;
	std::optional<ElementTagType> vendorCode;
	std::optional<ElementTagType> brandName;
	std::optional<ElementTagType> powerSource;
	std::optional<ElementTagType> manufacturerNodeIdentification;
	std::optional<ElementTagType> manufacturerLabel;
	std::optional<ElementTagType> manufacturerDescription;
};
bool convertToJson(const DeviceClassificationManufacturerDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, DeviceClassificationManufacturerDataElementsType &dst);

struct DeviceClassificationUserDataType { // complex
	std::optional<DeviceClassificationStringType> userNodeIdentification;
	std::optional<LabelType> userLabel;
	std::optional<DescriptionType> userDescription;
};
bool convertToJson(const DeviceClassificationUserDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, DeviceClassificationUserDataType &dst);

struct DeviceClassificationUserDataElementsType { // complex
	std::optional<ElementTagType> userNodeIdentification;
	std::optional<ElementTagType> userLabel;
	std::optional<ElementTagType> userDescription;
};
bool convertToJson(const DeviceClassificationUserDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, DeviceClassificationUserDataElementsType &dst);

struct DeviceConfigurationKeyValueValueType { // complex
	std::optional<bool> boolean;
	std::optional<std::string> date;
	std::optional<std::string> dateTime;
	std::optional<std::string> duration;
	std::optional<DeviceConfigurationKeyValueStringType> string;
	std::optional<std::string> time;
	std::optional<ScaledNumberType> scaledNumber;
	std::optional<long> integer;
};
bool convertToJson(const DeviceConfigurationKeyValueValueType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, DeviceConfigurationKeyValueValueType &dst);

struct DeviceConfigurationKeyValueValueElementsType { // complex
	std::optional<ElementTagType> boolean;
	std::optional<ElementTagType> date;
	std::optional<ElementTagType> dateTime;
	std::optional<ElementTagType> duration;
	std::optional<ElementTagType> string;
	std::optional<ElementTagType> time;
	std::optional<ScaledNumberElementsType> scaledNumber;
};
bool convertToJson(const DeviceConfigurationKeyValueValueElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, DeviceConfigurationKeyValueValueElementsType &dst);

struct DeviceConfigurationKeyValueDataType { // complex
	std::optional<DeviceConfigurationKeyIdType> keyId;
	std::optional<DeviceConfigurationKeyValueValueType> value;
	std::optional<bool> isValueChangeable;
};
bool convertToJson(const DeviceConfigurationKeyValueDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, DeviceConfigurationKeyValueDataType &dst);

struct DeviceConfigurationKeyValueDataElementsType { // complex
	std::optional<ElementTagType> keyId;
	std::optional<DeviceConfigurationKeyValueValueElementsType> value;
	std::optional<ElementTagType> isValueChangeable;
};
bool convertToJson(const DeviceConfigurationKeyValueDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, DeviceConfigurationKeyValueDataElementsType &dst);

struct DeviceConfigurationKeyValueListDataType { // complex
	std::optional<DeviceConfigurationKeyValueDataType> deviceConfigurationKeyValueData;
};
bool convertToJson(const DeviceConfigurationKeyValueListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, DeviceConfigurationKeyValueListDataType &dst);

struct DeviceConfigurationKeyValueListDataSelectorsType { // complex
	std::optional<DeviceConfigurationKeyIdType> keyId;
};
bool convertToJson(const DeviceConfigurationKeyValueListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, DeviceConfigurationKeyValueListDataSelectorsType &dst);

struct DeviceConfigurationKeyValueDescriptionDataType { // complex
	std::optional<DeviceConfigurationKeyIdType> keyId;
	std::optional<DeviceConfigurationKeyNameType> keyName;
	std::optional<DeviceConfigurationKeyValueTypeType> valueType;
	std::optional<UnitOfMeasurementType> unit;
	std::optional<LabelType> label;
	std::optional<DescriptionType> description;
};
bool convertToJson(const DeviceConfigurationKeyValueDescriptionDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, DeviceConfigurationKeyValueDescriptionDataType &dst);

struct DeviceConfigurationKeyValueDescriptionDataElementsType { // complex
	std::optional<ElementTagType> keyId;
	std::optional<ElementTagType> keyName;
	std::optional<ElementTagType> valueType;
	std::optional<ElementTagType> unit;
	std::optional<ElementTagType> label;
	std::optional<ElementTagType> description;
};
bool convertToJson(const DeviceConfigurationKeyValueDescriptionDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, DeviceConfigurationKeyValueDescriptionDataElementsType &dst);

struct DeviceConfigurationKeyValueDescriptionListDataType { // complex
	std::optional<DeviceConfigurationKeyValueDescriptionDataType> deviceConfigurationKeyValueDescriptionData;
};
bool convertToJson(const DeviceConfigurationKeyValueDescriptionListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, DeviceConfigurationKeyValueDescriptionListDataType &dst);

struct DeviceConfigurationKeyValueDescriptionListDataSelectorsType { // complex
	std::optional<DeviceConfigurationKeyIdType> keyId;
	std::optional<DeviceConfigurationKeyNameType> keyName;
};
bool convertToJson(const DeviceConfigurationKeyValueDescriptionListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, DeviceConfigurationKeyValueDescriptionListDataSelectorsType &dst);

struct DeviceConfigurationKeyValueConstraintsDataType { // complex
	std::optional<DeviceConfigurationKeyIdType> keyId;
	std::optional<DeviceConfigurationKeyValueValueType> valueRangeMin;
	std::optional<DeviceConfigurationKeyValueValueType> valueRangeMax;
	std::optional<DeviceConfigurationKeyValueValueType> valueStepSize;
};
bool convertToJson(const DeviceConfigurationKeyValueConstraintsDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, DeviceConfigurationKeyValueConstraintsDataType &dst);

struct DeviceConfigurationKeyValueConstraintsDataElementsType { // complex
	std::optional<ElementTagType> keyId;
	std::optional<DeviceConfigurationKeyValueValueElementsType> valueRangeMin;
	std::optional<DeviceConfigurationKeyValueValueElementsType> valueRangeMax;
	std::optional<DeviceConfigurationKeyValueValueElementsType> valueStepSize;
};
bool convertToJson(const DeviceConfigurationKeyValueConstraintsDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, DeviceConfigurationKeyValueConstraintsDataElementsType &dst);

struct DeviceConfigurationKeyValueConstraintsListDataType { // complex
	std::optional<DeviceConfigurationKeyValueConstraintsDataType> deviceConfigurationKeyValueConstraintsData;
};
bool convertToJson(const DeviceConfigurationKeyValueConstraintsListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, DeviceConfigurationKeyValueConstraintsListDataType &dst);

struct DeviceConfigurationKeyValueConstraintsListDataSelectorsType { // complex
	std::optional<DeviceConfigurationKeyIdType> keyId;
};
bool convertToJson(const DeviceConfigurationKeyValueConstraintsListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, DeviceConfigurationKeyValueConstraintsListDataSelectorsType &dst);

struct DeviceDiagnosisStateDataType { // complex
	std::optional<AbsoluteOrRelativeTimeType> timestamp;
	std::optional<DeviceDiagnosisOperatingStateType> operatingState;
	std::optional<VendorStateCodeType> vendorStateCode;
	std::optional<LastErrorCodeType> lastErrorCode;
	std::optional<std::string> upTime;
	std::optional<std::string> totalUpTime;
	std::optional<PowerSupplyConditionType> powerSupplyCondition;
};
bool convertToJson(const DeviceDiagnosisStateDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, DeviceDiagnosisStateDataType &dst);

struct DeviceDiagnosisStateDataElementsType { // complex
	std::optional<ElementTagType> timestamp;
	std::optional<ElementTagType> operatingState;
	std::optional<ElementTagType> vendorStateCode;
	std::optional<ElementTagType> lastErrorCode;
	std::optional<ElementTagType> upTime;
	std::optional<ElementTagType> totalUpTime;
	std::optional<ElementTagType> powerSupplyCondition;
};
bool convertToJson(const DeviceDiagnosisStateDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, DeviceDiagnosisStateDataElementsType &dst);

struct DeviceDiagnosisHeartbeatDataType { // complex
	std::optional<AbsoluteOrRelativeTimeType> timestamp;
	std::optional<uint64_t> heartbeatCounter;
	std::optional<std::string> heartbeatTimeout;
};
bool convertToJson(const DeviceDiagnosisHeartbeatDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, DeviceDiagnosisHeartbeatDataType &dst);

struct DeviceDiagnosisHeartbeatDataElementsType { // complex
	std::optional<ElementTagType> timestamp;
	std::optional<ElementTagType> heartbeatCounter;
	std::optional<ElementTagType> heartbeatTimeout;
};
bool convertToJson(const DeviceDiagnosisHeartbeatDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, DeviceDiagnosisHeartbeatDataElementsType &dst);

struct DeviceDiagnosisServiceDataType { // complex
	std::optional<AbsoluteOrRelativeTimeType> timestamp;
	std::optional<AbsoluteOrRelativeTimeType> installationTime;
	std::optional<uint64_t> bootCounter;
	std::optional<AbsoluteOrRelativeTimeType> nextService;
};
bool convertToJson(const DeviceDiagnosisServiceDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, DeviceDiagnosisServiceDataType &dst);

struct DeviceDiagnosisServiceDataElementsType { // complex
	std::optional<ElementTagType> timestamp;
	std::optional<ElementTagType> installationTime;
	std::optional<ElementTagType> bootCounter;
	std::optional<ElementTagType> nextService;
};
bool convertToJson(const DeviceDiagnosisServiceDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, DeviceDiagnosisServiceDataElementsType &dst);

struct ElectricalConnectionParameterDescriptionDataType { // complex
	std::optional<ElectricalConnectionIdType> electricalConnectionId;
	std::optional<ElectricalConnectionParameterIdType> parameterId;
	std::optional<MeasurementIdType> measurementId;
	std::optional<ElectricalConnectionVoltageTypeType> voltageType;
	std::optional<ElectricalConnectionPhaseNameType> acMeasuredPhases;
	std::optional<ElectricalConnectionPhaseNameType> acMeasuredInReferenceTo;
	std::optional<ElectricalConnectionAcMeasurementTypeType> acMeasurementType;
	std::optional<ElectricalConnectionMeasurandVariantType> acMeasurementVariant;
	std::optional<uint8_t> acMeasuredHarmonic;
	std::optional<ScopeTypeType> scopeType;
	std::optional<LabelType> label;
	std::optional<DescriptionType> description;
};
bool convertToJson(const ElectricalConnectionParameterDescriptionDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, ElectricalConnectionParameterDescriptionDataType &dst);

struct ElectricalConnectionParameterDescriptionDataElementsType { // complex
	std::optional<ElementTagType> electricalConnectionId;
	std::optional<ElementTagType> parameterId;
	std::optional<ElementTagType> measurementId;
	std::optional<ElementTagType> voltageType;
	std::optional<ElementTagType> acMeasuredPhases;
	std::optional<ElementTagType> acMeasuredInReferenceTo;
	std::optional<ElementTagType> acMeasurementType;
	std::optional<ElementTagType> acMeasurementVariant;
	std::optional<ElementTagType> acMeasuredHarmonic;
	std::optional<ElementTagType> scopeType;
	std::optional<ElementTagType> label;
	std::optional<ElementTagType> description;
};
bool convertToJson(const ElectricalConnectionParameterDescriptionDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, ElectricalConnectionParameterDescriptionDataElementsType &dst);

struct ElectricalConnectionParameterDescriptionListDataType { // complex
	std::optional<ElectricalConnectionParameterDescriptionDataType> electricalConnectionParameterDescriptionData;
};
bool convertToJson(const ElectricalConnectionParameterDescriptionListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, ElectricalConnectionParameterDescriptionListDataType &dst);

struct ElectricalConnectionParameterDescriptionListDataSelectorsType { // complex
	std::optional<ElectricalConnectionIdType> electricalConnectionId;
	std::optional<ElectricalConnectionParameterIdType> parameterId;
	std::optional<MeasurementIdType> measurementId;
	std::optional<ScopeTypeType> scopeType;
};
bool convertToJson(const ElectricalConnectionParameterDescriptionListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, ElectricalConnectionParameterDescriptionListDataSelectorsType &dst);

struct ElectricalConnectionPermittedValueSetDataType { // complex
	std::optional<ElectricalConnectionIdType> electricalConnectionId;
	std::optional<ElectricalConnectionParameterIdType> parameterId;
	std::optional<ScaledNumberSetType> permittedValueSet;
};
bool convertToJson(const ElectricalConnectionPermittedValueSetDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, ElectricalConnectionPermittedValueSetDataType &dst);

struct ElectricalConnectionPermittedValueSetDataElementsType { // complex
	std::optional<ElementTagType> electricalConnectionId;
	std::optional<ElementTagType> parameterId;
	std::optional<ScaledNumberSetElementsType> permittedValueSet;
};
bool convertToJson(const ElectricalConnectionPermittedValueSetDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, ElectricalConnectionPermittedValueSetDataElementsType &dst);

struct ElectricalConnectionPermittedValueSetListDataType { // complex
	std::optional<ElectricalConnectionPermittedValueSetDataType> electricalConnectionPermittedValueSetData;
};
bool convertToJson(const ElectricalConnectionPermittedValueSetListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, ElectricalConnectionPermittedValueSetListDataType &dst);

struct ElectricalConnectionPermittedValueSetListDataSelectorsType { // complex
	std::optional<ElectricalConnectionIdType> electricalConnectionId;
	std::optional<ElectricalConnectionParameterIdType> parameterId;
};
bool convertToJson(const ElectricalConnectionPermittedValueSetListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, ElectricalConnectionPermittedValueSetListDataSelectorsType &dst);

struct ElectricalConnectionCharacteristicDataType { // complex
	std::optional<ElectricalConnectionIdType> electricalConnectionId;
	std::optional<ElectricalConnectionParameterIdType> parameterId;
	std::optional<ElectricalConnectionCharacteristicIdType> characteristicId;
	std::optional<ElectricalConnectionCharacteristicContextType> characteristicContext;
	std::optional<ElectricalConnectionCharacteristicTypeType> characteristicType;
	std::optional<ScaledNumberType> value;
	std::optional<UnitOfMeasurementType> unit;
};
bool convertToJson(const ElectricalConnectionCharacteristicDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, ElectricalConnectionCharacteristicDataType &dst);

struct ElectricalConnectionCharacteristicDataElementsType { // complex
	std::optional<ElementTagType> electricalConnectionId;
	std::optional<ElementTagType> parameterId;
	std::optional<ElementTagType> characteristicId;
	std::optional<ElementTagType> characteristicContext;
	std::optional<ElementTagType> characteristicType;
	std::optional<ScaledNumberElementsType> value;
	std::optional<ElementTagType> unit;
};
bool convertToJson(const ElectricalConnectionCharacteristicDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, ElectricalConnectionCharacteristicDataElementsType &dst);

struct ElectricalConnectionCharacteristicListDataType { // complex
	std::optional<ElectricalConnectionCharacteristicDataType> electricalConnectionCharacteristicData;
};
bool convertToJson(const ElectricalConnectionCharacteristicListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, ElectricalConnectionCharacteristicListDataType &dst);

struct ElectricalConnectionCharacteristicListDataSelectorsType { // complex
	std::optional<ElectricalConnectionIdType> electricalConnectionId;
	std::optional<ElectricalConnectionParameterIdType> parameterId;
	std::optional<ElectricalConnectionCharacteristicIdType> characteristicId;
	std::optional<ElectricalConnectionCharacteristicContextType> characteristicContext;
	std::optional<ElectricalConnectionCharacteristicTypeType> characteristicType;
};
bool convertToJson(const ElectricalConnectionCharacteristicListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, ElectricalConnectionCharacteristicListDataSelectorsType &dst);

struct ElectricalConnectionStateDataType { // complex
	std::optional<ElectricalConnectionIdType> electricalConnectionId;
	std::optional<AbsoluteOrRelativeTimeType> timestamp;
	std::optional<EnergyModeType> currentEnergyMode;
	std::optional<std::string> consumptionTime;
	std::optional<std::string> productionTime;
	std::optional<std::string> totalConsumptionTime;
	std::optional<std::string> totalProductionTime;
};
bool convertToJson(const ElectricalConnectionStateDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, ElectricalConnectionStateDataType &dst);

struct ElectricalConnectionStateDataElementsType { // complex
	std::optional<ElementTagType> electricalConnectionId;
	std::optional<ElementTagType> timestamp;
	std::optional<ElementTagType> currentEnergyMode;
	std::optional<ElementTagType> consumptionTime;
	std::optional<ElementTagType> productionTime;
	std::optional<ElementTagType> totalConsumptionTime;
	std::optional<ElementTagType> totalProductionTime;
};
bool convertToJson(const ElectricalConnectionStateDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, ElectricalConnectionStateDataElementsType &dst);

struct ElectricalConnectionStateListDataType { // complex
	std::optional<ElectricalConnectionStateDataType> electricalConnectionStateData;
};
bool convertToJson(const ElectricalConnectionStateListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, ElectricalConnectionStateListDataType &dst);

struct ElectricalConnectionStateListDataSelectorsType { // complex
	std::optional<ElectricalConnectionIdType> electricalConnectionId;
};
bool convertToJson(const ElectricalConnectionStateListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, ElectricalConnectionStateListDataSelectorsType &dst);

struct ElectricalConnectionDescriptionDataType { // complex
	std::optional<ElectricalConnectionIdType> electricalConnectionId;
	std::optional<ElectricalConnectionVoltageTypeType> powerSupplyType;
	std::optional<uint32_t> acConnectedPhases;
	std::optional<std::string> acRmsPeriodDuration;
	std::optional<EnergyDirectionType> positiveEnergyDirection;
	std::optional<ScopeTypeType> scopeType;
	std::optional<LabelType> label;
	std::optional<DescriptionType> description;
};
bool convertToJson(const ElectricalConnectionDescriptionDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, ElectricalConnectionDescriptionDataType &dst);

struct ElectricalConnectionDescriptionDataElementsType { // complex
	std::optional<ElementTagType> electricalConnectionId;
	std::optional<ElementTagType> powerSupplyType;
	std::optional<ElementTagType> acConnectedPhases;
	std::optional<ElementTagType> acRmsPeriodDuration;
	std::optional<ElementTagType> positiveEnergyDirection;
	std::optional<ElementTagType> scopeType;
	std::optional<ElementTagType> label;
	std::optional<ElementTagType> description;
};
bool convertToJson(const ElectricalConnectionDescriptionDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, ElectricalConnectionDescriptionDataElementsType &dst);

struct ElectricalConnectionDescriptionListDataType { // complex
	std::optional<ElectricalConnectionDescriptionDataType> electricalConnectionDescriptionData;
};
bool convertToJson(const ElectricalConnectionDescriptionListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, ElectricalConnectionDescriptionListDataType &dst);

struct ElectricalConnectionDescriptionListDataSelectorsType { // complex
	std::optional<ElectricalConnectionIdType> electricalConnectionId;
	std::optional<ScopeTypeType> scopeType;
};
bool convertToJson(const ElectricalConnectionDescriptionListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, ElectricalConnectionDescriptionListDataSelectorsType &dst);

struct HvacSystemFunctionDataType { // complex
	std::optional<HvacSystemFunctionIdType> systemFunctionId;
	std::optional<HvacOperationModeIdType> currentOperationModeId;
	std::optional<bool> isOperationModeIdChangeable;
	std::optional<SetpointIdType> currentSetpointId;
	std::optional<bool> isSetpointIdChangeable;
	std::optional<bool> isOverrunActive;
};
bool convertToJson(const HvacSystemFunctionDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, HvacSystemFunctionDataType &dst);

struct HvacSystemFunctionDataElementsType { // complex
	std::optional<ElementTagType> systemFunctionId;
	std::optional<ElementTagType> currentOperationModeId;
	std::optional<ElementTagType> isOperationModeIdChangeable;
	std::optional<ElementTagType> currentSetpointId;
	std::optional<ElementTagType> isSetpointIdChangeable;
	std::optional<ElementTagType> isOverrunActive;
};
bool convertToJson(const HvacSystemFunctionDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, HvacSystemFunctionDataElementsType &dst);

struct HvacSystemFunctionListDataType { // complex
	std::optional<HvacSystemFunctionDataType> hvacSystemFunctionData;
};
bool convertToJson(const HvacSystemFunctionListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, HvacSystemFunctionListDataType &dst);

struct HvacSystemFunctionListDataSelectorsType { // complex
	std::optional<HvacSystemFunctionIdType> systemFunctionId;
};
bool convertToJson(const HvacSystemFunctionListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, HvacSystemFunctionListDataSelectorsType &dst);

struct HvacSystemFunctionOperationModeRelationDataType { // complex
	std::optional<HvacSystemFunctionIdType> systemFunctionId;
	std::optional<HvacOperationModeIdType> operationModeId;
};
bool convertToJson(const HvacSystemFunctionOperationModeRelationDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, HvacSystemFunctionOperationModeRelationDataType &dst);

struct HvacSystemFunctionOperationModeRelationDataElementsType { // complex
	std::optional<ElementTagType> systemFunctionId;
	std::optional<ElementTagType> operationModeId;
};
bool convertToJson(const HvacSystemFunctionOperationModeRelationDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, HvacSystemFunctionOperationModeRelationDataElementsType &dst);

struct HvacSystemFunctionOperationModeRelationListDataType { // complex
	std::optional<HvacSystemFunctionOperationModeRelationDataType> hvacSystemFunctionOperationModeRelationData;
};
bool convertToJson(const HvacSystemFunctionOperationModeRelationListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, HvacSystemFunctionOperationModeRelationListDataType &dst);

struct HvacSystemFunctionOperationModeRelationListDataSelectorsType { // complex
	std::optional<HvacSystemFunctionIdType> systemFunctionId;
};
bool convertToJson(const HvacSystemFunctionOperationModeRelationListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, HvacSystemFunctionOperationModeRelationListDataSelectorsType &dst);

struct HvacSystemFunctionSetpointRelationDataType { // complex
	std::optional<HvacSystemFunctionIdType> systemFunctionId;
	std::optional<HvacOperationModeIdType> operationModeId;
	std::optional<SetpointIdType> setpointId;
};
bool convertToJson(const HvacSystemFunctionSetpointRelationDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, HvacSystemFunctionSetpointRelationDataType &dst);

struct HvacSystemFunctionSetpointRelationDataElementsType { // complex
	std::optional<ElementTagType> systemFunctionId;
	std::optional<ElementTagType> operationModeId;
	std::optional<ElementTagType> setpointId;
};
bool convertToJson(const HvacSystemFunctionSetpointRelationDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, HvacSystemFunctionSetpointRelationDataElementsType &dst);

struct HvacSystemFunctionSetpointRelationListDataType { // complex
	std::optional<HvacSystemFunctionSetpointRelationDataType> hvacSystemFunctionSetpointRelationData;
};
bool convertToJson(const HvacSystemFunctionSetpointRelationListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, HvacSystemFunctionSetpointRelationListDataType &dst);

struct HvacSystemFunctionSetpointRelationListDataSelectorsType { // complex
	std::optional<HvacSystemFunctionIdType> systemFunctionId;
	std::optional<HvacOperationModeIdType> operationModeId;
};
bool convertToJson(const HvacSystemFunctionSetpointRelationListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, HvacSystemFunctionSetpointRelationListDataSelectorsType &dst);

struct HvacSystemFunctionPowerSequenceRelationDataType { // complex
	std::optional<HvacSystemFunctionIdType> systemFunctionId;
	std::optional<PowerSequenceIdType> sequenceId;
};
bool convertToJson(const HvacSystemFunctionPowerSequenceRelationDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, HvacSystemFunctionPowerSequenceRelationDataType &dst);

struct HvacSystemFunctionPowerSequenceRelationDataElementsType { // complex
	std::optional<ElementTagType> systemFunctionId;
	std::optional<ElementTagType> sequenceId;
};
bool convertToJson(const HvacSystemFunctionPowerSequenceRelationDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, HvacSystemFunctionPowerSequenceRelationDataElementsType &dst);

struct HvacSystemFunctionPowerSequenceRelationListDataType { // complex
	std::optional<HvacSystemFunctionPowerSequenceRelationDataType> hvacSystemFunctionPowerSequenceRelationData;
};
bool convertToJson(const HvacSystemFunctionPowerSequenceRelationListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, HvacSystemFunctionPowerSequenceRelationListDataType &dst);

struct HvacSystemFunctionPowerSequenceRelationListDataSelectorsType { // complex
	std::optional<HvacSystemFunctionIdType> systemFunctionId;
};
bool convertToJson(const HvacSystemFunctionPowerSequenceRelationListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, HvacSystemFunctionPowerSequenceRelationListDataSelectorsType &dst);

struct HvacSystemFunctionDescriptionDataType { // complex
	std::optional<HvacSystemFunctionIdType> systemFunctionId;
	std::optional<HvacSystemFunctionTypeType> systemFunctionType;
	std::optional<LabelType> label;
	std::optional<DescriptionType> description;
};
bool convertToJson(const HvacSystemFunctionDescriptionDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, HvacSystemFunctionDescriptionDataType &dst);

struct HvacSystemFunctionDescriptionDataElementsType { // complex
	std::optional<ElementTagType> systemFunctionId;
	std::optional<ElementTagType> systemFunctionType;
	std::optional<ElementTagType> label;
	std::optional<ElementTagType> description;
};
bool convertToJson(const HvacSystemFunctionDescriptionDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, HvacSystemFunctionDescriptionDataElementsType &dst);

struct HvacSystemFunctionDescriptionListDataType { // complex
	std::optional<HvacSystemFunctionDescriptionDataType> hvacSystemFunctionDescriptionData;
};
bool convertToJson(const HvacSystemFunctionDescriptionListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, HvacSystemFunctionDescriptionListDataType &dst);

struct HvacSystemFunctionDescriptionListDataSelectorsType { // complex
	std::optional<HvacSystemFunctionIdType> systemFunctionId;
};
bool convertToJson(const HvacSystemFunctionDescriptionListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, HvacSystemFunctionDescriptionListDataSelectorsType &dst);

struct HvacOperationModeDescriptionDataType { // complex
	std::optional<HvacOperationModeIdType> operationModeId;
	std::optional<HvacOperationModeTypeType> operationModeType;
	std::optional<LabelType> label;
	std::optional<DescriptionType> description;
};
bool convertToJson(const HvacOperationModeDescriptionDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, HvacOperationModeDescriptionDataType &dst);

struct HvacOperationModeDescriptionDataElementsType { // complex
	std::optional<ElementTagType> operationModeId;
	std::optional<ElementTagType> operationModeType;
	std::optional<ElementTagType> label;
	std::optional<ElementTagType> description;
};
bool convertToJson(const HvacOperationModeDescriptionDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, HvacOperationModeDescriptionDataElementsType &dst);

struct HvacOperationModeDescriptionListDataType { // complex
	std::optional<HvacOperationModeDescriptionDataType> hvacOperationModeDescriptionData;
};
bool convertToJson(const HvacOperationModeDescriptionListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, HvacOperationModeDescriptionListDataType &dst);

struct HvacOperationModeDescriptionListDataSelectorsType { // complex
	std::optional<HvacOperationModeIdType> operationModeId;
};
bool convertToJson(const HvacOperationModeDescriptionListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, HvacOperationModeDescriptionListDataSelectorsType &dst);

struct HvacOverrunDataType { // complex
	std::optional<HvacOverrunIdType> overrunId;
	std::optional<HvacOverrunStatusType> overrunStatus;
	std::optional<TimeTableIdType> timeTableId;
	std::optional<bool> isOverrunStatusChangeable;
};
bool convertToJson(const HvacOverrunDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, HvacOverrunDataType &dst);

struct HvacOverrunDataElementsType { // complex
	std::optional<ElementTagType> overrunId;
	std::optional<ElementTagType> overrunStatus;
	std::optional<ElementTagType> timeTableId;
	std::optional<ElementTagType> isOverrunStatusChangeable;
};
bool convertToJson(const HvacOverrunDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, HvacOverrunDataElementsType &dst);

struct HvacOverrunListDataType { // complex
	std::optional<HvacOverrunDataType> hvacOverrunData;
};
bool convertToJson(const HvacOverrunListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, HvacOverrunListDataType &dst);

struct HvacOverrunListDataSelectorsType { // complex
	std::optional<HvacOverrunIdType> overrunId;
};
bool convertToJson(const HvacOverrunListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, HvacOverrunListDataSelectorsType &dst);

struct HvacOverrunDescriptionDataType { // complex
	std::optional<HvacOverrunIdType> overrunId;
	std::optional<HvacOverrunTypeType> overrunType;
	std::optional<HvacSystemFunctionIdType> affectedSystemFunctionId;
	std::optional<LabelType> label;
	std::optional<DescriptionType> description;
};
bool convertToJson(const HvacOverrunDescriptionDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, HvacOverrunDescriptionDataType &dst);

struct HvacOverrunDescriptionDataElementsType { // complex
	std::optional<ElementTagType> overrunId;
	std::optional<ElementTagType> overrunType;
	std::optional<ElementTagType> affectedSystemFunctionId;
	std::optional<ElementTagType> label;
	std::optional<ElementTagType> description;
};
bool convertToJson(const HvacOverrunDescriptionDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, HvacOverrunDescriptionDataElementsType &dst);

struct HvacOverrunDescriptionListDataType { // complex
	std::optional<HvacOverrunDescriptionDataType> hvacOverrunDescriptionData;
};
bool convertToJson(const HvacOverrunDescriptionListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, HvacOverrunDescriptionListDataType &dst);

struct HvacOverrunDescriptionListDataSelectorsType { // complex
	std::optional<HvacOverrunIdType> overrunId;
};
bool convertToJson(const HvacOverrunDescriptionListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, HvacOverrunDescriptionListDataSelectorsType &dst);

struct SetpointDataType { // complex
	std::optional<SetpointIdType> setpointId;
	std::optional<ScaledNumberType> value;
	std::optional<ScaledNumberType> valueMin;
	std::optional<ScaledNumberType> valueMax;
	std::optional<ScaledNumberType> valueToleranceAbsolute;
	std::optional<ScaledNumberType> valueTolerancePercentage;
	std::optional<bool> isSetpointChangeable;
	std::optional<bool> isSetpointActive;
	std::optional<TimePeriodType> timePeriod;
};
bool convertToJson(const SetpointDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SetpointDataType &dst);

struct SetpointDataElementsType { // complex
	std::optional<ElementTagType> setpointId;
	std::optional<ScaledNumberElementsType> value;
	std::optional<ScaledNumberElementsType> valueMin;
	std::optional<ScaledNumberElementsType> valueMax;
	std::optional<ScaledNumberElementsType> valueToleranceAbsolute;
	std::optional<ScaledNumberElementsType> valueTolerancePercentage;
	std::optional<ElementTagType> isSetpointChangeable;
	std::optional<ElementTagType> isSetpointActive;
	std::optional<TimePeriodElementsType> timePeriod;
};
bool convertToJson(const SetpointDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SetpointDataElementsType &dst);

struct SetpointListDataType { // complex
	std::optional<SetpointDataType> setpointData;
};
bool convertToJson(const SetpointListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SetpointListDataType &dst);

struct SetpointListDataSelectorsType { // complex
	std::optional<SetpointIdType> setpointId;
};
bool convertToJson(const SetpointListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SetpointListDataSelectorsType &dst);

struct SetpointConstraintsDataType { // complex
	std::optional<SetpointIdType> setpointId;
	std::optional<ScaledNumberType> setpointRangeMin;
	std::optional<ScaledNumberType> setpointRangeMax;
	std::optional<ScaledNumberType> setpointStepSize;
};
bool convertToJson(const SetpointConstraintsDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SetpointConstraintsDataType &dst);

struct SetpointConstraintsDataElementsType { // complex
	std::optional<ElementTagType> setpointId;
	std::optional<ScaledNumberElementsType> setpointRangeMin;
	std::optional<ScaledNumberElementsType> setpointRangeMax;
	std::optional<ScaledNumberElementsType> setpointStepSize;
};
bool convertToJson(const SetpointConstraintsDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SetpointConstraintsDataElementsType &dst);

struct SetpointConstraintsListDataType { // complex
	std::optional<SetpointConstraintsDataType> setpointConstraintsData;
};
bool convertToJson(const SetpointConstraintsListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SetpointConstraintsListDataType &dst);

struct SetpointConstraintsListDataSelectorsType { // complex
	std::optional<SetpointIdType> setpointId;
};
bool convertToJson(const SetpointConstraintsListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SetpointConstraintsListDataSelectorsType &dst);

struct SetpointDescriptionDataType { // complex
	std::optional<SetpointIdType> setpointId;
	std::optional<MeasurementIdType> measurementId;
	std::optional<TimeTableIdType> timeTableId;
	std::optional<SetpointTypeType> setpointType;
	std::optional<UnitOfMeasurementType> unit;
	std::optional<ScopeTypeType> scopeType;
	std::optional<LabelType> label;
	std::optional<DescriptionType> description;
};
bool convertToJson(const SetpointDescriptionDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SetpointDescriptionDataType &dst);

struct SetpointDescriptionDataElementsType { // complex
	std::optional<ElementTagType> setpointId;
	std::optional<ElementTagType> measurementId;
	std::optional<ElementTagType> timeTableId;
	std::optional<ElementTagType> setpointType;
	std::optional<ElementTagType> unit;
	std::optional<ElementTagType> scopeType;
	std::optional<ElementTagType> label;
	std::optional<ElementTagType> description;
};
bool convertToJson(const SetpointDescriptionDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SetpointDescriptionDataElementsType &dst);

struct SetpointDescriptionListDataType { // complex
	std::optional<SetpointDescriptionDataType> setpointDescriptionData;
};
bool convertToJson(const SetpointDescriptionListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SetpointDescriptionListDataType &dst);

struct SetpointDescriptionListDataSelectorsType { // complex
	std::optional<SetpointIdType> setpointId;
	std::optional<MeasurementIdType> measurementId;
	std::optional<TimeTableIdType> timeTableId;
	std::optional<SetpointTypeType> setpointType;
	std::optional<ScopeTypeType> scopeType;
};
bool convertToJson(const SetpointDescriptionListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SetpointDescriptionListDataSelectorsType &dst);

struct TimeTableDataType { // complex
	std::optional<TimeTableIdType> timeTableId;
	std::optional<TimeSlotIdType> timeSlotId;
	std::optional<RecurrenceInformationType> recurrenceInformation;
	std::optional<AbsoluteOrRecurringTimeType> startTime;
	std::optional<AbsoluteOrRecurringTimeType> endTime;
};
bool convertToJson(const TimeTableDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TimeTableDataType &dst);

struct TimeTableDataElementsType { // complex
	std::optional<ElementTagType> timeTableId;
	std::optional<ElementTagType> timeSlotId;
	std::optional<RecurrenceInformationElementsType> recurrenceInformation;
	std::optional<AbsoluteOrRecurringTimeElementsType> startTime;
	std::optional<AbsoluteOrRecurringTimeElementsType> endTime;
};
bool convertToJson(const TimeTableDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TimeTableDataElementsType &dst);

struct TimeTableListDataType { // complex
	std::optional<TimeTableDataType> timeTableData;
};
bool convertToJson(const TimeTableListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TimeTableListDataType &dst);

struct TimeTableListDataSelectorsType { // complex
	std::optional<TimeTableIdType> timeTableId;
	std::optional<TimeSlotIdType> timeSlotId;
};
bool convertToJson(const TimeTableListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TimeTableListDataSelectorsType &dst);

struct TimeTableConstraintsDataType { // complex
	std::optional<uint32_t> timeTableId;
	std::optional<TimeSlotCountType> slotCountMin;
	std::optional<TimeSlotCountType> slotCountMax;
	std::optional<std::string> slotDurationMin;
	std::optional<std::string> slotDurationMax;
	std::optional<std::string> slotDurationStepSize;
	std::optional<std::string> slotShiftStepSize;
	std::optional<std::string> firstSlotBeginsAt;
};
bool convertToJson(const TimeTableConstraintsDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TimeTableConstraintsDataType &dst);

struct TimeTableConstraintsDataElementsType { // complex
	std::optional<ElementTagType> timeTableId;
	std::optional<ElementTagType> slotCountMin;
	std::optional<ElementTagType> slotCountMax;
	std::optional<ElementTagType> slotDurationMin;
	std::optional<ElementTagType> slotDurationMax;
	std::optional<ElementTagType> slotDurationStepSize;
	std::optional<ElementTagType> slotShiftStepSize;
	std::optional<ElementTagType> firstSlotBeginsAt;
};
bool convertToJson(const TimeTableConstraintsDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TimeTableConstraintsDataElementsType &dst);

struct TimeTableConstraintsListDataType { // complex
	std::optional<TimeTableConstraintsDataType> timeTableConstraintsData;
};
bool convertToJson(const TimeTableConstraintsListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TimeTableConstraintsListDataType &dst);

struct TimeTableConstraintsListDataSelectorsType { // complex
	std::optional<TimeTableIdType> timeTableId;
};
bool convertToJson(const TimeTableConstraintsListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TimeTableConstraintsListDataSelectorsType &dst);

struct TimeTableDescriptionDataType { // complex
	std::optional<uint32_t> timeTableId;
	std::optional<bool> timeSlotCountChangeable;
	std::optional<bool> timeSlotTimesChangeable;
	std::optional<TimeSlotTimeModeType> timeSlotTimeMode;
	std::optional<LabelType> label;
	std::optional<DescriptionType> description;
};
bool convertToJson(const TimeTableDescriptionDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TimeTableDescriptionDataType &dst);

struct TimeTableDescriptionDataElementsType { // complex
	std::optional<ElementTagType> timeTableId;
	std::optional<ElementTagType> timeSlotCountChangeable;
	std::optional<ElementTagType> timeSlotTimesChangeable;
	std::optional<ElementTagType> timeSlotTimeMode;
	std::optional<ElementTagType> label;
	std::optional<ElementTagType> description;
};
bool convertToJson(const TimeTableDescriptionDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TimeTableDescriptionDataElementsType &dst);

struct TimeTableDescriptionListDataType { // complex
	std::optional<TimeTableDescriptionDataType> timeTableDescriptionData;
};
bool convertToJson(const TimeTableDescriptionListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TimeTableDescriptionListDataType &dst);

struct TimeTableDescriptionListDataSelectorsType { // complex
	std::optional<TimeTableIdType> timeTableId;
};
bool convertToJson(const TimeTableDescriptionListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TimeTableDescriptionListDataSelectorsType &dst);

struct IncentiveTableType { // complex
	std::optional<TariffDataType> tariff;
	std::optional<IncentiveTableIncentiveSlotType> incentiveSlot;
};
bool convertToJson(const IncentiveTableType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, IncentiveTableType &dst);

struct IncentiveTableIncentiveSlotType { // complex
	std::optional<TimeTableDataType> timeInterval;
	std::optional<IncentiveTableTierType> tier;
};
bool convertToJson(const IncentiveTableIncentiveSlotType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, IncentiveTableIncentiveSlotType &dst);

struct IncentiveTableTierType { // complex
	std::optional<TierDataType> tier;
	std::optional<TierBoundaryDataType> boundary;
	std::optional<IncentiveDataType> incentive;
};
bool convertToJson(const IncentiveTableTierType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, IncentiveTableTierType &dst);

struct IncentiveTableDataType { // complex
	std::optional<IncentiveTableType> incentiveTable;
};
bool convertToJson(const IncentiveTableDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, IncentiveTableDataType &dst);

struct IncentiveTableElementsType { // complex
	std::optional<TariffDataElementsType> tariff;
	std::optional<IncentiveTableIncentiveSlotElementsType> incentiveSlot;
};
bool convertToJson(const IncentiveTableElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, IncentiveTableElementsType &dst);

struct IncentiveTableIncentiveSlotElementsType { // complex
	std::optional<TimeTableDataElementsType> timeInterval;
	std::optional<IncentiveTableTierElementsType> tier;
};
bool convertToJson(const IncentiveTableIncentiveSlotElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, IncentiveTableIncentiveSlotElementsType &dst);

struct IncentiveTableTierElementsType { // complex
	std::optional<TierDataElementsType> tier;
	std::optional<TierBoundaryDataElementsType> boundary;
	std::optional<IncentiveDataElementsType> incentive;
};
bool convertToJson(const IncentiveTableTierElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, IncentiveTableTierElementsType &dst);

struct IncentiveTableDataElementsType { // complex
	std::optional<IncentiveTableElementsType> incentiveTable;
};
bool convertToJson(const IncentiveTableDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, IncentiveTableDataElementsType &dst);

struct IncentiveTableDataSelectorsType { // complex
	std::optional<TariffListDataSelectorsType> tariff;
};
bool convertToJson(const IncentiveTableDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, IncentiveTableDataSelectorsType &dst);

struct IncentiveTableDescriptionType { // complex
	std::optional<TariffDescriptionDataType> tariffDescription;
	std::optional<IncentiveTableDescriptionTierType> tier;
};
bool convertToJson(const IncentiveTableDescriptionType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, IncentiveTableDescriptionType &dst);

struct IncentiveTableDescriptionTierType { // complex
	std::optional<TierDescriptionDataType> tierDescription;
	std::optional<TierBoundaryDescriptionDataType> boundaryDescription;
	std::optional<IncentiveDescriptionDataType> incentiveDescription;
};
bool convertToJson(const IncentiveTableDescriptionTierType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, IncentiveTableDescriptionTierType &dst);

struct IncentiveTableDescriptionDataType { // complex
	std::optional<IncentiveTableDescriptionType> incentiveTableDescription;
};
bool convertToJson(const IncentiveTableDescriptionDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, IncentiveTableDescriptionDataType &dst);

struct IncentiveTableDescriptionElementsType { // complex
	std::optional<TariffDescriptionDataElementsType> tariffDescription;
	std::optional<IncentiveTableDescriptionTierElementsType> tier;
};
bool convertToJson(const IncentiveTableDescriptionElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, IncentiveTableDescriptionElementsType &dst);

struct IncentiveTableDescriptionTierElementsType { // complex
	std::optional<TierDescriptionDataElementsType> tierDescription;
	std::optional<TierBoundaryDescriptionDataElementsType> boundaryDescription;
	std::optional<IncentiveDescriptionDataElementsType> incentiveDescription;
};
bool convertToJson(const IncentiveTableDescriptionTierElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, IncentiveTableDescriptionTierElementsType &dst);

struct IncentiveTableDescriptionDataElementsType { // complex
	std::optional<IncentiveTableDescriptionElementsType> incentiveTableDescription;
};
bool convertToJson(const IncentiveTableDescriptionDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, IncentiveTableDescriptionDataElementsType &dst);

struct IncentiveTableDescriptionDataSelectorsType { // complex
	std::optional<TariffDescriptionListDataSelectorsType> tariffDescription;
};
bool convertToJson(const IncentiveTableDescriptionDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, IncentiveTableDescriptionDataSelectorsType &dst);

struct IncentiveTableConstraintsType { // complex
	std::optional<TariffDataType> tariff;
	std::optional<TariffOverallConstraintsDataType> tariffConstraints;
	std::optional<TimeTableConstraintsDataType> incentiveSlotConstraints;
};
bool convertToJson(const IncentiveTableConstraintsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, IncentiveTableConstraintsType &dst);

struct IncentiveTableConstraintsDataType { // complex
	std::optional<IncentiveTableConstraintsType> incentiveTableConstraints;
};
bool convertToJson(const IncentiveTableConstraintsDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, IncentiveTableConstraintsDataType &dst);

struct IncentiveTableConstraintsElementsType { // complex
	std::optional<TariffDataElementsType> tariff;
	std::optional<TariffOverallConstraintsDataElementsType> tariffConstraints;
	std::optional<TimeTableConstraintsDataElementsType> incentiveSlotConstraints;
};
bool convertToJson(const IncentiveTableConstraintsElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, IncentiveTableConstraintsElementsType &dst);

struct IncentiveTableConstraintsDataElementsType { // complex
	std::optional<IncentiveTableConstraintsElementsType> incentiveTableConstraints;
};
bool convertToJson(const IncentiveTableConstraintsDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, IncentiveTableConstraintsDataElementsType &dst);

struct IncentiveTableConstraintsDataSelectorsType { // complex
	std::optional<TariffListDataSelectorsType> tariff;
};
bool convertToJson(const IncentiveTableConstraintsDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, IncentiveTableConstraintsDataSelectorsType &dst);

struct TariffOverallConstraintsDataType { // complex
	std::optional<TariffCountType> maxTariffCount;
	std::optional<TierBoundaryCountType> maxBoundaryCount;
	std::optional<TierCountType> maxTierCount;
	std::optional<IncentiveCountType> maxIncentiveCount;
	std::optional<TierBoundaryCountType> maxBoundariesPerTariff;
	std::optional<TierCountType> maxTiersPerTariff;
	std::optional<TierBoundaryCountType> maxBoundariesPerTier;
	std::optional<IncentiveCountType> maxIncentivesPerTier;
};
bool convertToJson(const TariffOverallConstraintsDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TariffOverallConstraintsDataType &dst);

struct TariffOverallConstraintsDataElementsType { // complex
	std::optional<ElementTagType> maxTariffCount;
	std::optional<ElementTagType> maxBoundaryCount;
	std::optional<ElementTagType> maxTierCount;
	std::optional<ElementTagType> maxIncentiveCount;
	std::optional<ElementTagType> maxBoundariesPerTariff;
	std::optional<ElementTagType> maxTiersPerTariff;
	std::optional<ElementTagType> maxBoundariesPerTier;
	std::optional<ElementTagType> maxIncentivesPerTier;
};
bool convertToJson(const TariffOverallConstraintsDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TariffOverallConstraintsDataElementsType &dst);

struct TariffDataType { // complex
	std::optional<TariffIdType> tariffId;
	std::optional<TierIdType> activeTierId;
};
bool convertToJson(const TariffDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TariffDataType &dst);

struct TariffDataElementsType { // complex
	std::optional<ElementTagType> tariffId;
	std::optional<ElementTagType> activeTierId;
};
bool convertToJson(const TariffDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TariffDataElementsType &dst);

struct TariffListDataType { // complex
	std::optional<TariffDataType> tariffData;
};
bool convertToJson(const TariffListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TariffListDataType &dst);

struct TariffListDataSelectorsType { // complex
	std::optional<TariffIdType> tariffId;
	std::optional<TierIdType> activeTierId;
};
bool convertToJson(const TariffListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TariffListDataSelectorsType &dst);

struct TariffTierRelationDataType { // complex
	std::optional<TariffIdType> tariffId;
	std::optional<TierIdType> tierId;
};
bool convertToJson(const TariffTierRelationDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TariffTierRelationDataType &dst);

struct TariffTierRelationDataElementsType { // complex
	std::optional<ElementTagType> tariffId;
	std::optional<ElementTagType> tierId;
};
bool convertToJson(const TariffTierRelationDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TariffTierRelationDataElementsType &dst);

struct TariffTierRelationListDataType { // complex
	std::optional<TariffTierRelationDataType> tariffTierRelationData;
};
bool convertToJson(const TariffTierRelationListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TariffTierRelationListDataType &dst);

struct TariffTierRelationListDataSelectorsType { // complex
	std::optional<TariffIdType> tariffId;
	std::optional<TierIdType> tierId;
};
bool convertToJson(const TariffTierRelationListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TariffTierRelationListDataSelectorsType &dst);

struct TariffBoundaryRelationDataType { // complex
	std::optional<TariffIdType> tariffId;
	std::optional<TierBoundaryIdType> boundaryId;
};
bool convertToJson(const TariffBoundaryRelationDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TariffBoundaryRelationDataType &dst);

struct TariffBoundaryRelationDataElementsType { // complex
	std::optional<ElementTagType> tariffId;
	std::optional<ElementTagType> boundaryId;
};
bool convertToJson(const TariffBoundaryRelationDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TariffBoundaryRelationDataElementsType &dst);

struct TariffBoundaryRelationListDataType { // complex
	std::optional<TariffBoundaryRelationDataType> tariffBoundaryRelationData;
};
bool convertToJson(const TariffBoundaryRelationListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TariffBoundaryRelationListDataType &dst);

struct TariffBoundaryRelationListDataSelectorsType { // complex
	std::optional<TariffIdType> tariffId;
	std::optional<TierBoundaryIdType> boundaryId;
};
bool convertToJson(const TariffBoundaryRelationListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TariffBoundaryRelationListDataSelectorsType &dst);

struct TariffDescriptionDataType { // complex
	std::optional<TariffIdType> tariffId;
	std::optional<CommodityIdType> commodityId;
	std::optional<MeasurementIdType> measurementId;
	std::optional<bool> tariffWriteable;
	std::optional<bool> updateRequired;
	std::optional<ScopeTypeType> scopeType;
	std::optional<LabelType> label;
	std::optional<DescriptionType> description;
	std::optional<bool> slotIdSupport;
};
bool convertToJson(const TariffDescriptionDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TariffDescriptionDataType &dst);

struct TariffDescriptionDataElementsType { // complex
	std::optional<ElementTagType> tariffId;
	std::optional<ElementTagType> commodityId;
	std::optional<ElementTagType> measurementId;
	std::optional<ElementTagType> tariffWriteable;
	std::optional<ElementTagType> updateRequired;
	std::optional<ElementTagType> scopeType;
	std::optional<ElementTagType> label;
	std::optional<ElementTagType> description;
	std::optional<ElementTagType> slotIdSupport;
};
bool convertToJson(const TariffDescriptionDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TariffDescriptionDataElementsType &dst);

struct TariffDescriptionListDataType { // complex
	std::optional<TariffDescriptionDataType> tariffDescriptionData;
};
bool convertToJson(const TariffDescriptionListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TariffDescriptionListDataType &dst);

struct TariffDescriptionListDataSelectorsType { // complex
	std::optional<TariffIdType> tariffId;
	std::optional<CommodityIdType> commodityId;
	std::optional<MeasurementIdType> measurementId;
	std::optional<ScopeTypeType> scopeType;
};
bool convertToJson(const TariffDescriptionListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TariffDescriptionListDataSelectorsType &dst);

struct TierBoundaryDataType { // complex
	std::optional<TierBoundaryIdType> boundaryId;
	std::optional<TimePeriodType> timePeriod;
	std::optional<TimeTableIdType> timeTableId;
	std::optional<ScaledNumberType> lowerBoundaryValue;
	std::optional<ScaledNumberType> upperBoundaryValue;
};
bool convertToJson(const TierBoundaryDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TierBoundaryDataType &dst);

struct TierBoundaryDataElementsType { // complex
	std::optional<ElementTagType> boundaryId;
	std::optional<TimePeriodElementsType> timePeriod;
	std::optional<ElementTagType> timeTableId;
	std::optional<ScaledNumberElementsType> lowerBoundaryValue;
	std::optional<ScaledNumberElementsType> upperBoundaryValue;
};
bool convertToJson(const TierBoundaryDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TierBoundaryDataElementsType &dst);

struct TierBoundaryListDataType { // complex
	std::optional<TierBoundaryDataType> tierBoundaryData;
};
bool convertToJson(const TierBoundaryListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TierBoundaryListDataType &dst);

struct TierBoundaryListDataSelectorsType { // complex
	std::optional<TierBoundaryIdType> boundaryId;
};
bool convertToJson(const TierBoundaryListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TierBoundaryListDataSelectorsType &dst);

struct TierBoundaryDescriptionDataType { // complex
	std::optional<TierBoundaryIdType> boundaryId;
	std::optional<TierBoundaryTypeType> boundaryType;
	std::optional<TierIdType> validForTierId;
	std::optional<TierIdType> switchToTierIdWhenLower;
	std::optional<TierIdType> switchToTierIdWhenHigher;
	std::optional<UnitOfMeasurementType> boundaryUnit;
	std::optional<LabelType> label;
	std::optional<DescriptionType> description;
};
bool convertToJson(const TierBoundaryDescriptionDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TierBoundaryDescriptionDataType &dst);

struct TierBoundaryDescriptionDataElementsType { // complex
	std::optional<ElementTagType> boundaryId;
	std::optional<ElementTagType> boundaryType;
	std::optional<ElementTagType> validForTierId;
	std::optional<ElementTagType> switchToTierIdWhenLower;
	std::optional<ElementTagType> switchToTierIdWhenHigher;
	std::optional<ElementTagType> boundaryUnit;
	std::optional<ElementTagType> label;
	std::optional<ElementTagType> description;
};
bool convertToJson(const TierBoundaryDescriptionDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TierBoundaryDescriptionDataElementsType &dst);

struct TierBoundaryDescriptionListDataType { // complex
	std::optional<TierBoundaryDescriptionDataType> tierBoundaryDescriptionData;
};
bool convertToJson(const TierBoundaryDescriptionListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TierBoundaryDescriptionListDataType &dst);

struct TierBoundaryDescriptionListDataSelectorsType { // complex
	std::optional<TierBoundaryIdType> boundaryId;
	std::optional<TierBoundaryTypeType> boundaryType;
};
bool convertToJson(const TierBoundaryDescriptionListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TierBoundaryDescriptionListDataSelectorsType &dst);

struct CommodityDataType { // complex
	std::optional<CommodityIdType> commodityId;
	std::optional<CommodityTypeType> commodityType;
	std::optional<EnergyDirectionType> positiveEnergyDirection;
	std::optional<LabelType> label;
	std::optional<DescriptionType> description;
};
bool convertToJson(const CommodityDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, CommodityDataType &dst);

struct CommodityDataElementsType { // complex
	std::optional<ElementTagType> commodityId;
	std::optional<ElementTagType> commodityType;
	std::optional<ElementTagType> positiveEnergyDirection;
	std::optional<ElementTagType> label;
	std::optional<ElementTagType> description;
};
bool convertToJson(const CommodityDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, CommodityDataElementsType &dst);

struct CommodityListDataType { // complex
	std::optional<CommodityDataType> commodityData;
};
bool convertToJson(const CommodityListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, CommodityListDataType &dst);

struct CommodityListDataSelectorsType { // complex
	std::optional<CommodityIdType> commodityId;
	std::optional<CommodityTypeType> commodityType;
};
bool convertToJson(const CommodityListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, CommodityListDataSelectorsType &dst);

struct TierDataType { // complex
	std::optional<TierIdType> tierId;
	std::optional<TimePeriodType> timePeriod;
	std::optional<TimeTableIdType> timeTableId;
	std::optional<IncentiveIdType> activeIncentiveId;
};
bool convertToJson(const TierDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TierDataType &dst);

struct TierDataElementsType { // complex
	std::optional<ElementTagType> tierId;
	std::optional<TimePeriodElementsType> timePeriod;
	std::optional<ElementTagType> timeTableId;
	std::optional<ElementTagType> activeIncentiveId;
};
bool convertToJson(const TierDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TierDataElementsType &dst);

struct TierListDataType { // complex
	std::optional<TierDataType> tierData;
};
bool convertToJson(const TierListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TierListDataType &dst);

struct TierListDataSelectorsType { // complex
	std::optional<TierIdType> tierId;
	std::optional<IncentiveIdType> activeIncentiveId;
};
bool convertToJson(const TierListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TierListDataSelectorsType &dst);

struct TierIncentiveRelationDataType { // complex
	std::optional<TierIdType> tierId;
	std::optional<IncentiveIdType> incentiveId;
};
bool convertToJson(const TierIncentiveRelationDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TierIncentiveRelationDataType &dst);

struct TierIncentiveRelationDataElementsType { // complex
	std::optional<ElementTagType> tierId;
	std::optional<ElementTagType> incentiveId;
};
bool convertToJson(const TierIncentiveRelationDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TierIncentiveRelationDataElementsType &dst);

struct TierIncentiveRelationListDataType { // complex
	std::optional<TierIncentiveRelationDataType> tierIncentiveRelationData;
};
bool convertToJson(const TierIncentiveRelationListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TierIncentiveRelationListDataType &dst);

struct TierIncentiveRelationListDataSelectorsType { // complex
	std::optional<TierIdType> tierId;
	std::optional<IncentiveIdType> incentiveId;
};
bool convertToJson(const TierIncentiveRelationListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TierIncentiveRelationListDataSelectorsType &dst);

struct TierDescriptionDataType { // complex
	std::optional<TierIdType> tierId;
	std::optional<TierTypeType> tierType;
	std::optional<LabelType> label;
	std::optional<DescriptionType> description;
};
bool convertToJson(const TierDescriptionDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TierDescriptionDataType &dst);

struct TierDescriptionDataElementsType { // complex
	std::optional<ElementTagType> tierId;
	std::optional<ElementTagType> tierType;
	std::optional<ElementTagType> label;
	std::optional<ElementTagType> description;
};
bool convertToJson(const TierDescriptionDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TierDescriptionDataElementsType &dst);

struct TierDescriptionListDataType { // complex
	std::optional<TierDescriptionDataType> tierDescriptionData;
};
bool convertToJson(const TierDescriptionListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TierDescriptionListDataType &dst);

struct TierDescriptionListDataSelectorsType { // complex
	std::optional<TierIdType> tierId;
	std::optional<TierTypeType> tierType;
};
bool convertToJson(const TierDescriptionListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TierDescriptionListDataSelectorsType &dst);

struct IncentiveDataType { // complex
	std::optional<IncentiveIdType> incentiveId;
	std::optional<IncentiveValueTypeType> valueType;
	std::optional<AbsoluteOrRelativeTimeType> timestamp;
	std::optional<TimePeriodType> timePeriod;
	std::optional<TimeTableIdType> timeTableId;
	std::optional<ScaledNumberType> value;
};
bool convertToJson(const IncentiveDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, IncentiveDataType &dst);

struct IncentiveDataElementsType { // complex
	std::optional<ElementTagType> incentiveId;
	std::optional<ElementTagType> valueType;
	std::optional<ElementTagType> timestamp;
	std::optional<TimePeriodElementsType> timePeriod;
	std::optional<ElementTagType> timeTableId;
	std::optional<ElementTagType> value;
};
bool convertToJson(const IncentiveDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, IncentiveDataElementsType &dst);

struct IncentiveListDataType { // complex
	std::optional<IncentiveDataType> incentiveData;
};
bool convertToJson(const IncentiveListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, IncentiveListDataType &dst);

struct IncentiveListDataSelectorsType { // complex
	std::optional<IncentiveIdType> incentiveId;
	std::optional<IncentiveValueTypeType> valueType;
	std::optional<TimestampIntervalType> timestampInterval;
};
bool convertToJson(const IncentiveListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, IncentiveListDataSelectorsType &dst);

struct IncentiveDescriptionDataType { // complex
	std::optional<IncentiveIdType> incentiveId;
	std::optional<IncentiveTypeType> incentiveType;
	std::optional<IncentivePriorityType> incentivePriority;
	std::optional<CurrencyType> currency;
	std::optional<UnitOfMeasurementType> unit;
	std::optional<LabelType> label;
	std::optional<DescriptionType> description;
};
bool convertToJson(const IncentiveDescriptionDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, IncentiveDescriptionDataType &dst);

struct IncentiveDescriptionDataElementsType { // complex
	std::optional<ElementTagType> incentiveId;
	std::optional<ElementTagType> incentiveType;
	std::optional<ElementTagType> incentivePriority;
	std::optional<ElementTagType> currency;
	std::optional<ElementTagType> unit;
	std::optional<ElementTagType> label;
	std::optional<ElementTagType> description;
};
bool convertToJson(const IncentiveDescriptionDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, IncentiveDescriptionDataElementsType &dst);

struct IncentiveDescriptionListDataType { // complex
	std::optional<IncentiveDescriptionDataType> incentiveDescriptionData;
};
bool convertToJson(const IncentiveDescriptionListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, IncentiveDescriptionListDataType &dst);

struct IncentiveDescriptionListDataSelectorsType { // complex
	std::optional<IncentiveIdType> incentiveId;
	std::optional<IncentiveTypeType> incentiveType;
};
bool convertToJson(const IncentiveDescriptionListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, IncentiveDescriptionListDataSelectorsType &dst);

struct LoadControlNodeDataType { // complex
	std::optional<bool> isNodeRemoteControllable;
};
bool convertToJson(const LoadControlNodeDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, LoadControlNodeDataType &dst);

struct LoadControlNodeDataElementsType { // complex
	std::optional<ElementTagType> isNodeRemoteControllable;
};
bool convertToJson(const LoadControlNodeDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, LoadControlNodeDataElementsType &dst);

struct LoadControlEventDataType { // complex
	std::optional<AbsoluteOrRelativeTimeType> timestamp;
	std::optional<LoadControlEventIdType> eventId;
	std::optional<LoadControlEventActionType> eventActionConsume;
	std::optional<LoadControlEventActionType> eventActionProduce;
	std::optional<TimePeriodType> timePeriod;
};
bool convertToJson(const LoadControlEventDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, LoadControlEventDataType &dst);

struct LoadControlEventDataElementsType { // complex
	std::optional<ElementTagType> timestamp;
	std::optional<ElementTagType> eventId;
	std::optional<ElementTagType> eventActionConsume;
	std::optional<ElementTagType> eventActionProduce;
	std::optional<TimePeriodElementsType> timePeriod;
};
bool convertToJson(const LoadControlEventDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, LoadControlEventDataElementsType &dst);

struct LoadControlEventListDataType { // complex
	std::optional<LoadControlEventDataType> loadControlEventData;
};
bool convertToJson(const LoadControlEventListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, LoadControlEventListDataType &dst);

struct LoadControlEventListDataSelectorsType { // complex
	std::optional<TimestampIntervalType> timestampInterval;
	std::optional<LoadControlEventIdType> eventId;
};
bool convertToJson(const LoadControlEventListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, LoadControlEventListDataSelectorsType &dst);

struct LoadControlStateDataType { // complex
	std::optional<AbsoluteOrRelativeTimeType> timestamp;
	std::optional<LoadControlEventIdType> eventId;
	std::optional<LoadControlEventStateType> eventStateConsume;
	std::optional<LoadControlEventActionType> appliedEventActionConsume;
	std::optional<LoadControlEventStateType> eventStateProduce;
	std::optional<LoadControlEventActionType> appliedEventActionProduce;
};
bool convertToJson(const LoadControlStateDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, LoadControlStateDataType &dst);

struct LoadControlStateDataElementsType { // complex
	std::optional<ElementTagType> timestamp;
	std::optional<ElementTagType> eventId;
	std::optional<ElementTagType> eventStateConsume;
	std::optional<ElementTagType> appliedEventActionConsume;
	std::optional<ElementTagType> eventStateProduce;
	std::optional<ElementTagType> appliedEventActionProduce;
};
bool convertToJson(const LoadControlStateDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, LoadControlStateDataElementsType &dst);

struct LoadControlStateListDataType { // complex
	std::optional<LoadControlStateDataType> loadControlStateData;
};
bool convertToJson(const LoadControlStateListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, LoadControlStateListDataType &dst);

struct LoadControlStateListDataSelectorsType { // complex
	std::optional<TimestampIntervalType> timestampInterval;
	std::optional<LoadControlEventIdType> eventId;
};
bool convertToJson(const LoadControlStateListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, LoadControlStateListDataSelectorsType &dst);

struct LoadControlLimitDataType { // complex
	std::optional<LoadControlLimitIdType> limitId;
	std::optional<bool> isLimitChangeable;
	std::optional<bool> isLimitActive;
	std::optional<TimePeriodType> timePeriod;
	std::optional<ScaledNumberType> value;
};
bool convertToJson(const LoadControlLimitDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, LoadControlLimitDataType &dst);

struct LoadControlLimitDataElementsType { // complex
	std::optional<ElementTagType> limitId;
	std::optional<ElementTagType> isLimitChangeable;
	std::optional<ElementTagType> isLimitActive;
	std::optional<TimePeriodElementsType> timePeriod;
	std::optional<ScaledNumberElementsType> value;
};
bool convertToJson(const LoadControlLimitDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, LoadControlLimitDataElementsType &dst);

struct LoadControlLimitListDataType { // complex
	std::optional<LoadControlLimitDataType> loadControlLimitData;
};
bool convertToJson(const LoadControlLimitListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, LoadControlLimitListDataType &dst);

struct LoadControlLimitListDataSelectorsType { // complex
	std::optional<LoadControlLimitIdType> limitId;
};
bool convertToJson(const LoadControlLimitListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, LoadControlLimitListDataSelectorsType &dst);

struct LoadControlLimitConstraintsDataType { // complex
	std::optional<LoadControlLimitIdType> limitId;
	std::optional<ScaledNumberType> valueRangeMin;
	std::optional<ScaledNumberType> valueRangeMax;
	std::optional<ScaledNumberType> valueStepSize;
};
bool convertToJson(const LoadControlLimitConstraintsDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, LoadControlLimitConstraintsDataType &dst);

struct LoadControlLimitConstraintsDataElementsType { // complex
	std::optional<ElementTagType> limitId;
	std::optional<ScaledNumberElementsType> valueRangeMin;
	std::optional<ScaledNumberElementsType> valueRangeMax;
	std::optional<ScaledNumberElementsType> valueStepSize;
};
bool convertToJson(const LoadControlLimitConstraintsDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, LoadControlLimitConstraintsDataElementsType &dst);

struct LoadControlLimitConstraintsListDataType { // complex
	std::optional<LoadControlLimitConstraintsDataType> loadControlLimitConstraintsData;
};
bool convertToJson(const LoadControlLimitConstraintsListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, LoadControlLimitConstraintsListDataType &dst);

struct LoadControlLimitConstraintsListDataSelectorsType { // complex
	std::optional<LoadControlLimitIdType> limitId;
};
bool convertToJson(const LoadControlLimitConstraintsListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, LoadControlLimitConstraintsListDataSelectorsType &dst);

struct LoadControlLimitDescriptionDataType { // complex
	std::optional<LoadControlLimitIdType> limitId;
	std::optional<LoadControlLimitTypeType> limitType;
	std::optional<LoadControlCategoryType> limitCategory;
	std::optional<EnergyDirectionType> limitDirection;
	std::optional<MeasurementIdType> measurementId;
	std::optional<UnitOfMeasurementType> unit;
	std::optional<ScopeTypeType> scopeType;
	std::optional<LabelType> label;
	std::optional<DescriptionType> description;
};
bool convertToJson(const LoadControlLimitDescriptionDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, LoadControlLimitDescriptionDataType &dst);

struct LoadControlLimitDescriptionDataElementsType { // complex
	std::optional<ElementTagType> limitId;
	std::optional<ElementTagType> limitType;
	std::optional<ElementTagType> limitCategory;
	std::optional<ElementTagType> limitDirection;
	std::optional<ElementTagType> measurementId;
	std::optional<ElementTagType> unit;
	std::optional<ElementTagType> scopeType;
	std::optional<ElementTagType> label;
	std::optional<ElementTagType> description;
};
bool convertToJson(const LoadControlLimitDescriptionDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, LoadControlLimitDescriptionDataElementsType &dst);

struct LoadControlLimitDescriptionListDataType { // complex
	std::optional<LoadControlLimitDescriptionDataType> loadControlLimitDescriptionData;
};
bool convertToJson(const LoadControlLimitDescriptionListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, LoadControlLimitDescriptionListDataType &dst);

struct LoadControlLimitDescriptionListDataSelectorsType { // complex
	std::optional<LoadControlLimitIdType> limitId;
	std::optional<LoadControlLimitTypeType> limitType;
	std::optional<EnergyDirectionType> limitDirection;
	std::optional<MeasurementIdType> measurementId;
	std::optional<ScopeTypeType> scopeType;
};
bool convertToJson(const LoadControlLimitDescriptionListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, LoadControlLimitDescriptionListDataSelectorsType &dst);

struct NetworkManagementAddNodeCallType { // complex
	std::optional<FeatureAddressType> nodeAddress;
	std::optional<NetworkManagementNativeSetupType> nativeSetup;
	std::optional<NetworkManagementProcessTimeoutType> timeout;
	std::optional<LabelType> label;
	std::optional<DescriptionType> description;
};
bool convertToJson(const NetworkManagementAddNodeCallType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, NetworkManagementAddNodeCallType &dst);

struct NetworkManagementAddNodeCallElementsType { // complex
	std::optional<FeatureAddressElementsType> nodeAddress;
	std::optional<ElementTagType> nativeSetup;
	std::optional<ElementTagType> timeout;
	std::optional<ElementTagType> label;
	std::optional<ElementTagType> description;
};
bool convertToJson(const NetworkManagementAddNodeCallElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, NetworkManagementAddNodeCallElementsType &dst);

struct NetworkManagementRemoveNodeCallType { // complex
	std::optional<FeatureAddressType> nodeAddress;
	std::optional<NetworkManagementProcessTimeoutType> timeout;
};
bool convertToJson(const NetworkManagementRemoveNodeCallType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, NetworkManagementRemoveNodeCallType &dst);

struct NetworkManagementRemoveNodeCallElementsType { // complex
	std::optional<FeatureAddressElementsType> nodeAddress;
	std::optional<ElementTagType> timeout;
};
bool convertToJson(const NetworkManagementRemoveNodeCallElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, NetworkManagementRemoveNodeCallElementsType &dst);

struct NetworkManagementModifyNodeCallType { // complex
	std::optional<FeatureAddressType> nodeAddress;
	std::optional<NetworkManagementNativeSetupType> nativeSetup;
	std::optional<NetworkManagementProcessTimeoutType> timeout;
	std::optional<LabelType> label;
	std::optional<DescriptionType> description;
};
bool convertToJson(const NetworkManagementModifyNodeCallType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, NetworkManagementModifyNodeCallType &dst);

struct NetworkManagementModifyNodeCallElementsType { // complex
	std::optional<FeatureAddressElementsType> nodeAddress;
	std::optional<ElementTagType> nativeSetup;
	std::optional<ElementTagType> timeout;
	std::optional<ElementTagType> label;
	std::optional<ElementTagType> description;
};
bool convertToJson(const NetworkManagementModifyNodeCallElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, NetworkManagementModifyNodeCallElementsType &dst);

struct NetworkManagementScanNetworkCallType { // complex
	std::optional<NetworkManagementScanSetupType> scanSetup;
	std::optional<NetworkManagementProcessTimeoutType> timeout;
};
bool convertToJson(const NetworkManagementScanNetworkCallType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, NetworkManagementScanNetworkCallType &dst);

struct NetworkManagementScanNetworkCallElementsType { // complex
	std::optional<ElementTagType> scanSetup;
	std::optional<ElementTagType> timeout;
};
bool convertToJson(const NetworkManagementScanNetworkCallElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, NetworkManagementScanNetworkCallElementsType &dst);

struct NetworkManagementDiscoverCallType { // complex
	std::optional<FeatureAddressType> discoverAddress;
};
bool convertToJson(const NetworkManagementDiscoverCallType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, NetworkManagementDiscoverCallType &dst);

struct NetworkManagementDiscoverCallElementsType { // complex
	std::optional<FeatureAddressElementsType> discoverAddress;
};
bool convertToJson(const NetworkManagementDiscoverCallElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, NetworkManagementDiscoverCallElementsType &dst);

struct NetworkManagementAbortCallType { // complex
};
bool convertToJson(const NetworkManagementAbortCallType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, NetworkManagementAbortCallType &dst);

struct NetworkManagementAbortCallElementsType { // complex
};
bool convertToJson(const NetworkManagementAbortCallElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, NetworkManagementAbortCallElementsType &dst);

struct NetworkManagementProcessStateDataType { // complex
	std::optional<NetworkManagementProcessStateStateType> state;
	std::optional<DescriptionType> description;
};
bool convertToJson(const NetworkManagementProcessStateDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, NetworkManagementProcessStateDataType &dst);

struct NetworkManagementProcessStateDataElementsType { // complex
	std::optional<ElementTagType> state;
	std::optional<ElementTagType> description;
};
bool convertToJson(const NetworkManagementProcessStateDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, NetworkManagementProcessStateDataElementsType &dst);

struct NetworkManagementJoiningModeDataType { // complex
	std::optional<NetworkManagementSetupType> setup;
};
bool convertToJson(const NetworkManagementJoiningModeDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, NetworkManagementJoiningModeDataType &dst);

struct NetworkManagementJoiningModeDataElementsType { // complex
	std::optional<ElementTagType> setup;
};
bool convertToJson(const NetworkManagementJoiningModeDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, NetworkManagementJoiningModeDataElementsType &dst);

struct NetworkManagementReportCandidateDataType { // complex
	std::optional<NetworkManagementCandidateSetupType> candidateSetup;
	std::optional<bool> setupUsableForAdd;
	std::optional<LabelType> label;
	std::optional<DescriptionType> description;
};
bool convertToJson(const NetworkManagementReportCandidateDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, NetworkManagementReportCandidateDataType &dst);

struct NetworkManagementReportCandidateDataElementsType { // complex
	std::optional<ElementTagType> candidateSetup;
	std::optional<ElementTagType> setupUsableForAdd;
	std::optional<ElementTagType> label;
	std::optional<ElementTagType> description;
};
bool convertToJson(const NetworkManagementReportCandidateDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, NetworkManagementReportCandidateDataElementsType &dst);

struct NetworkManagementDeviceDescriptionDataType { // complex
	std::optional<DeviceAddressType> deviceAddress;
	std::optional<DeviceTypeType> deviceType;
	std::optional<FeatureAddressType> networkManagementResponsibleAddress;
	std::optional<NetworkManagementNativeSetupType> nativeSetup;
	std::optional<NetworkManagementTechnologyAddressType> technologyAddress;
	std::optional<NetworkManagementCommunicationsTechnologyInformationType> communicationsTechnologyInformation;
	std::optional<NetworkManagementFeatureSetType> networkFeatureSet;
	std::optional<NetworkManagementStateChangeType> lastStateChange;
	std::optional<NetworkManagementMinimumTrustLevelType> minimumTrustLevel;
	std::optional<LabelType> label;
	std::optional<DescriptionType> description;
};
bool convertToJson(const NetworkManagementDeviceDescriptionDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, NetworkManagementDeviceDescriptionDataType &dst);

struct NetworkManagementDeviceDescriptionDataElementsType { // complex
	std::optional<DeviceAddressElementsType> deviceAddress;
	std::optional<ElementTagType> deviceType;
	std::optional<ElementTagType> networkManagementResponsibleAddress;
	std::optional<ElementTagType> nativeSetup;
	std::optional<ElementTagType> technologyAddress;
	std::optional<ElementTagType> communicationsTechnologyInformation;
	std::optional<ElementTagType> networkFeatureSet;
	std::optional<ElementTagType> lastStateChange;
	std::optional<ElementTagType> minimumTrustLevel;
	std::optional<ElementTagType> label;
	std::optional<ElementTagType> description;
};
bool convertToJson(const NetworkManagementDeviceDescriptionDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, NetworkManagementDeviceDescriptionDataElementsType &dst);

struct NetworkManagementDeviceDescriptionListDataType { // complex
	std::optional<NetworkManagementDeviceDescriptionDataType> networkManagementDeviceDescriptionData;
};
bool convertToJson(const NetworkManagementDeviceDescriptionListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, NetworkManagementDeviceDescriptionListDataType &dst);

struct NetworkManagementDeviceDescriptionListDataSelectorsType { // complex
	std::optional<DeviceAddressType> deviceAddress;
	std::optional<DeviceTypeType> deviceType;
};
bool convertToJson(const NetworkManagementDeviceDescriptionListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, NetworkManagementDeviceDescriptionListDataSelectorsType &dst);

struct NetworkManagementEntityDescriptionDataType { // complex
	std::optional<EntityAddressType> entityAddress;
	std::optional<EntityTypeType> entityType;
	std::optional<NetworkManagementStateChangeType> lastStateChange;
	std::optional<NetworkManagementMinimumTrustLevelType> minimumTrustLevel;
	std::optional<LabelType> label;
	std::optional<DescriptionType> description;
};
bool convertToJson(const NetworkManagementEntityDescriptionDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, NetworkManagementEntityDescriptionDataType &dst);

struct NetworkManagementEntityDescriptionDataElementsType { // complex
	std::optional<EntityAddressElementsType> entityAddress;
	std::optional<ElementTagType> entityType;
	std::optional<ElementTagType> lastStateChange;
	std::optional<ElementTagType> minimumTrustLevel;
	std::optional<ElementTagType> label;
	std::optional<ElementTagType> description;
};
bool convertToJson(const NetworkManagementEntityDescriptionDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, NetworkManagementEntityDescriptionDataElementsType &dst);

struct NetworkManagementEntityDescriptionListDataType { // complex
	std::optional<NetworkManagementEntityDescriptionDataType> networkManagementEntityDescriptionData;
};
bool convertToJson(const NetworkManagementEntityDescriptionListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, NetworkManagementEntityDescriptionListDataType &dst);

struct NetworkManagementEntityDescriptionListDataSelectorsType { // complex
	std::optional<EntityAddressType> entityAddress;
	std::optional<EntityTypeType> entityType;
};
bool convertToJson(const NetworkManagementEntityDescriptionListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, NetworkManagementEntityDescriptionListDataSelectorsType &dst);

struct NetworkManagementFeatureDescriptionDataType { // complex
	std::optional<FeatureAddressType> featureAddress;
	std::optional<FeatureTypeType> featureType;
	std::optional<FeatureSpecificUsageType> specificUsage;
	std::optional<FeatureGroupType> featureGroup;
	std::optional<RoleType> role;
	std::optional<FunctionPropertyType> supportedFunction;
	std::optional<NetworkManagementStateChangeType> lastStateChange;
	std::optional<NetworkManagementMinimumTrustLevelType> minimumTrustLevel;
	std::optional<LabelType> label;
	std::optional<DescriptionType> description;
	std::optional<MaxResponseDelayType> maxResponseDelay;
};
bool convertToJson(const NetworkManagementFeatureDescriptionDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, NetworkManagementFeatureDescriptionDataType &dst);

struct NetworkManagementFeatureDescriptionDataElementsType { // complex
	std::optional<FeatureAddressElementsType> featureAddress;
	std::optional<ElementTagType> featureType;
	std::optional<ElementTagType> specificUsage;
	std::optional<ElementTagType> featureGroup;
	std::optional<ElementTagType> role;
	std::optional<FunctionPropertyElementsType> supportedFunction;
	std::optional<ElementTagType> lastStateChange;
	std::optional<ElementTagType> minimumTrustLevel;
	std::optional<ElementTagType> label;
	std::optional<ElementTagType> description;
	std::optional<ElementTagType> maxResponseDelay;
};
bool convertToJson(const NetworkManagementFeatureDescriptionDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, NetworkManagementFeatureDescriptionDataElementsType &dst);

struct NetworkManagementFeatureDescriptionListDataType { // complex
	std::optional<NetworkManagementFeatureDescriptionDataType> networkManagementFeatureDescriptionData;
};
bool convertToJson(const NetworkManagementFeatureDescriptionListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, NetworkManagementFeatureDescriptionListDataType &dst);

struct NetworkManagementFeatureDescriptionListDataSelectorsType { // complex
	std::optional<FeatureAddressType> featureAddress;
	std::optional<FeatureTypeType> featureType;
};
bool convertToJson(const NetworkManagementFeatureDescriptionListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, NetworkManagementFeatureDescriptionListDataSelectorsType &dst);

struct NodeManagementSpecificationVersionListType { // complex
	std::optional<SpecificationVersionType> specificationVersion;
};
bool convertToJson(const NodeManagementSpecificationVersionListType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, NodeManagementSpecificationVersionListType &dst);

struct NodeManagementDetailedDiscoveryDeviceInformationType { // complex
	std::optional<NetworkManagementDeviceDescriptionDataType> description;
};
bool convertToJson(const NodeManagementDetailedDiscoveryDeviceInformationType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, NodeManagementDetailedDiscoveryDeviceInformationType &dst);

struct NodeManagementDetailedDiscoveryEntityInformationType { // complex
	std::optional<NetworkManagementEntityDescriptionDataType> description;
};
bool convertToJson(const NodeManagementDetailedDiscoveryEntityInformationType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, NodeManagementDetailedDiscoveryEntityInformationType &dst);

struct NodeManagementDetailedDiscoveryFeatureInformationType { // complex
	std::optional<NetworkManagementFeatureDescriptionDataType> description;
};
bool convertToJson(const NodeManagementDetailedDiscoveryFeatureInformationType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, NodeManagementDetailedDiscoveryFeatureInformationType &dst);

struct NodeManagementDetailedDiscoveryDataType { // complex
	std::optional<NodeManagementSpecificationVersionListType> specificationVersionList;
	std::optional<NodeManagementDetailedDiscoveryDeviceInformationType> deviceInformation;
	std::optional<NodeManagementDetailedDiscoveryEntityInformationType> entityInformation;
	std::optional<NodeManagementDetailedDiscoveryFeatureInformationType> featureInformation;
};
bool convertToJson(const NodeManagementDetailedDiscoveryDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, NodeManagementDetailedDiscoveryDataType &dst);

struct NodeManagementSpecificationVersionListElementsType { // complex
	std::optional<SpecificationVersionDataElementsType> specificationVersion;
};
bool convertToJson(const NodeManagementSpecificationVersionListElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, NodeManagementSpecificationVersionListElementsType &dst);

struct NodeManagementDetailedDiscoveryDeviceInformationElementsType { // complex
	std::optional<NetworkManagementDeviceDescriptionDataElementsType> description;
};
bool convertToJson(const NodeManagementDetailedDiscoveryDeviceInformationElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, NodeManagementDetailedDiscoveryDeviceInformationElementsType &dst);

struct NodeManagementDetailedDiscoveryEntityInformationElementsType { // complex
	std::optional<NetworkManagementEntityDescriptionDataElementsType> description;
};
bool convertToJson(const NodeManagementDetailedDiscoveryEntityInformationElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, NodeManagementDetailedDiscoveryEntityInformationElementsType &dst);

struct NodeManagementDetailedDiscoveryFeatureInformationElementsType { // complex
	std::optional<NetworkManagementFeatureDescriptionDataElementsType> description;
};
bool convertToJson(const NodeManagementDetailedDiscoveryFeatureInformationElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, NodeManagementDetailedDiscoveryFeatureInformationElementsType &dst);

struct NodeManagementDetailedDiscoveryDataElementsType { // complex
	std::optional<NodeManagementSpecificationVersionListElementsType> specificationVersionList;
	std::optional<NodeManagementDetailedDiscoveryDeviceInformationElementsType> deviceInformation;
	std::optional<NodeManagementDetailedDiscoveryEntityInformationElementsType> entityInformation;
	std::optional<NodeManagementDetailedDiscoveryFeatureInformationElementsType> featureInformation;
};
bool convertToJson(const NodeManagementDetailedDiscoveryDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, NodeManagementDetailedDiscoveryDataElementsType &dst);

struct NodeManagementDetailedDiscoveryDataSelectorsType { // complex
	std::optional<NetworkManagementDeviceDescriptionListDataSelectorsType> deviceInformation;
	std::optional<NetworkManagementEntityDescriptionListDataSelectorsType> entityInformation;
	std::optional<NetworkManagementFeatureDescriptionListDataSelectorsType> featureInformation;
};
bool convertToJson(const NodeManagementDetailedDiscoveryDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, NodeManagementDetailedDiscoveryDataSelectorsType &dst);

struct NodeManagementBindingDataType { // complex
	std::optional<BindingManagementEntryDataType> bindingEntry;
};
bool convertToJson(const NodeManagementBindingDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, NodeManagementBindingDataType &dst);

struct NodeManagementBindingDataElementsType { // complex
	std::optional<BindingManagementEntryDataElementsType> bindingEntry;
};
bool convertToJson(const NodeManagementBindingDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, NodeManagementBindingDataElementsType &dst);

struct NodeManagementBindingDataSelectorsType { // complex
	std::optional<BindingManagementEntryListDataSelectorsType> bindingEntry;
};
bool convertToJson(const NodeManagementBindingDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, NodeManagementBindingDataSelectorsType &dst);

struct NodeManagementBindingRequestCallType { // complex
	std::optional<BindingManagementRequestCallType> bindingRequest;
};
bool convertToJson(const NodeManagementBindingRequestCallType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, NodeManagementBindingRequestCallType &dst);

struct NodeManagementBindingRequestCallElementsType { // complex
	std::optional<BindingManagementRequestCallElementsType> bindingRequest;
};
bool convertToJson(const NodeManagementBindingRequestCallElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, NodeManagementBindingRequestCallElementsType &dst);

struct NodeManagementBindingDeleteCallType { // complex
	std::optional<BindingManagementDeleteCallType> bindingDelete;
};
bool convertToJson(const NodeManagementBindingDeleteCallType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, NodeManagementBindingDeleteCallType &dst);

struct NodeManagementBindingDeleteCallElementsType { // complex
	std::optional<BindingManagementDeleteCallElementsType> bindingDelete;
};
bool convertToJson(const NodeManagementBindingDeleteCallElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, NodeManagementBindingDeleteCallElementsType &dst);

struct NodeManagementSubscriptionDataType { // complex
	std::optional<SubscriptionManagementEntryDataType> subscriptionEntry;
};
bool convertToJson(const NodeManagementSubscriptionDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, NodeManagementSubscriptionDataType &dst);

struct NodeManagementSubscriptionDataElementsType { // complex
	std::optional<SubscriptionManagementEntryDataElementsType> subscriptionEntry;
};
bool convertToJson(const NodeManagementSubscriptionDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, NodeManagementSubscriptionDataElementsType &dst);

struct NodeManagementSubscriptionDataSelectorsType { // complex
	std::optional<SubscriptionManagementEntryListDataSelectorsType> subscriptionEntry;
};
bool convertToJson(const NodeManagementSubscriptionDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, NodeManagementSubscriptionDataSelectorsType &dst);

struct NodeManagementSubscriptionRequestCallType { // complex
	std::optional<SubscriptionManagementRequestCallType> subscriptionRequest;
};
bool convertToJson(const NodeManagementSubscriptionRequestCallType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, NodeManagementSubscriptionRequestCallType &dst);

struct NodeManagementSubscriptionRequestCallElementsType { // complex
	std::optional<SubscriptionManagementRequestCallElementsType> subscriptionRequest;
};
bool convertToJson(const NodeManagementSubscriptionRequestCallElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, NodeManagementSubscriptionRequestCallElementsType &dst);

struct NodeManagementSubscriptionDeleteCallType { // complex
	std::optional<SubscriptionManagementDeleteCallType> subscriptionDelete;
};
bool convertToJson(const NodeManagementSubscriptionDeleteCallType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, NodeManagementSubscriptionDeleteCallType &dst);

struct NodeManagementSubscriptionDeleteCallElementsType { // complex
	std::optional<SubscriptionManagementDeleteCallElementsType> subscriptionDelete;
};
bool convertToJson(const NodeManagementSubscriptionDeleteCallElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, NodeManagementSubscriptionDeleteCallElementsType &dst);

struct NodeManagementDestinationDataType { // complex
	std::optional<NetworkManagementDeviceDescriptionDataType> deviceDescription;
};
bool convertToJson(const NodeManagementDestinationDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, NodeManagementDestinationDataType &dst);

struct NodeManagementDestinationDataElementsType { // complex
	std::optional<NetworkManagementDeviceDescriptionDataElementsType> deviceDescription;
};
bool convertToJson(const NodeManagementDestinationDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, NodeManagementDestinationDataElementsType &dst);

struct NodeManagementDestinationListDataType { // complex
	std::optional<NodeManagementDestinationDataType> nodeManagementDestinationData;
};
bool convertToJson(const NodeManagementDestinationListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, NodeManagementDestinationListDataType &dst);

struct NodeManagementDestinationListDataSelectorsType { // complex
	std::optional<NetworkManagementDeviceDescriptionListDataSelectorsType> deviceDescription;
};
bool convertToJson(const NodeManagementDestinationListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, NodeManagementDestinationListDataSelectorsType &dst);

struct NodeManagementUseCaseDataType { // complex
	std::optional<UseCaseInformationDataType> useCaseInformation;
};
bool convertToJson(const NodeManagementUseCaseDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, NodeManagementUseCaseDataType &dst);

struct NodeManagementUseCaseDataElementsType { // complex
	std::optional<UseCaseInformationDataElementsType> useCaseInformation;
};
bool convertToJson(const NodeManagementUseCaseDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, NodeManagementUseCaseDataElementsType &dst);

struct NodeManagementUseCaseDataSelectorsType { // complex
	std::optional<UseCaseInformationListDataSelectorsType> useCaseInformation;
};
bool convertToJson(const NodeManagementUseCaseDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, NodeManagementUseCaseDataSelectorsType &dst);

struct SubscriptionManagementEntryDataType { // complex
	std::optional<SubscriptionIdType> subscriptionId;
	std::optional<FeatureAddressType> clientAddress;
	std::optional<FeatureAddressType> serverAddress;
	std::optional<LabelType> label;
	std::optional<DescriptionType> description;
};
bool convertToJson(const SubscriptionManagementEntryDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SubscriptionManagementEntryDataType &dst);

struct SubscriptionManagementEntryDataElementsType { // complex
	std::optional<ElementTagType> subscriptionId;
	std::optional<FeatureAddressElementsType> clientAddress;
	std::optional<FeatureAddressElementsType> serverAddress;
	std::optional<ElementTagType> label;
	std::optional<ElementTagType> description;
};
bool convertToJson(const SubscriptionManagementEntryDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SubscriptionManagementEntryDataElementsType &dst);

struct SubscriptionManagementEntryListDataType { // complex
	std::optional<SubscriptionManagementEntryDataType> subscriptionManagementEntryData;
};
bool convertToJson(const SubscriptionManagementEntryListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SubscriptionManagementEntryListDataType &dst);

struct SubscriptionManagementEntryListDataSelectorsType { // complex
	std::optional<SubscriptionIdType> subscriptionId;
	std::optional<FeatureAddressType> clientAddress;
	std::optional<FeatureAddressType> serverAddress;
};
bool convertToJson(const SubscriptionManagementEntryListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SubscriptionManagementEntryListDataSelectorsType &dst);

struct SubscriptionManagementRequestCallType { // complex
	std::optional<FeatureAddressType> clientAddress;
	std::optional<FeatureAddressType> serverAddress;
	std::optional<FeatureTypeType> serverFeatureType;
};
bool convertToJson(const SubscriptionManagementRequestCallType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SubscriptionManagementRequestCallType &dst);

struct SubscriptionManagementRequestCallElementsType { // complex
	std::optional<FeatureAddressElementsType> clientAddress;
	std::optional<FeatureAddressElementsType> serverAddress;
	std::optional<ElementTagType> serverFeatureType;
};
bool convertToJson(const SubscriptionManagementRequestCallElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SubscriptionManagementRequestCallElementsType &dst);

struct SubscriptionManagementDeleteCallType { // complex
	std::optional<SubscriptionIdType> subscriptionId;
	std::optional<FeatureAddressType> clientAddress;
	std::optional<FeatureAddressType> serverAddress;
};
bool convertToJson(const SubscriptionManagementDeleteCallType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SubscriptionManagementDeleteCallType &dst);

struct SubscriptionManagementDeleteCallElementsType { // complex
	std::optional<ElementTagType> subscriptionId;
	std::optional<FeatureAddressElementsType> clientAddress;
	std::optional<FeatureAddressElementsType> serverAddress;
};
bool convertToJson(const SubscriptionManagementDeleteCallElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SubscriptionManagementDeleteCallElementsType &dst);

struct UseCaseSupportType { // complex
	std::optional<UseCaseNameType> useCaseName;
	std::optional<SpecificationVersionType> useCaseVersion;
	std::optional<bool> useCaseAvailable;
	std::optional<UseCaseScenarioSupportType> scenarioSupport;
	std::optional<std::string> useCaseDocumentSubRevision;
};
bool convertToJson(const UseCaseSupportType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, UseCaseSupportType &dst);

struct UseCaseSupportElementsType { // complex
	std::optional<ElementTagType> useCaseName;
	std::optional<ElementTagType> useCaseVersion;
	std::optional<ElementTagType> useCaseAvailable;
	std::optional<ElementTagType> scenarioSupport;
	std::optional<ElementTagType> useCaseDocumentSubRevision;
};
bool convertToJson(const UseCaseSupportElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, UseCaseSupportElementsType &dst);

struct UseCaseSupportSelectorsType { // complex
	std::optional<UseCaseNameType> useCaseName;
	std::optional<SpecificationVersionType> useCaseVersion;
	std::optional<UseCaseScenarioSupportType> scenarioSupport;
};
bool convertToJson(const UseCaseSupportSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, UseCaseSupportSelectorsType &dst);

struct UseCaseInformationDataType { // complex
	std::optional<FeatureAddressType> address;
	std::optional<UseCaseActorType> actor;
	std::optional<UseCaseSupportType> useCaseSupport;
};
bool convertToJson(const UseCaseInformationDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, UseCaseInformationDataType &dst);

struct UseCaseInformationDataElementsType { // complex
	std::optional<FeatureAddressElementsType> address;
	std::optional<ElementTagType> actor;
	std::optional<UseCaseSupportElementsType> useCaseSupport;
};
bool convertToJson(const UseCaseInformationDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, UseCaseInformationDataElementsType &dst);

struct UseCaseInformationListDataType { // complex
	std::optional<UseCaseInformationDataType> useCaseInformationData;
};
bool convertToJson(const UseCaseInformationListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, UseCaseInformationListDataType &dst);

struct UseCaseInformationListDataSelectorsType { // complex
	std::optional<FeatureAddressType> address;
	std::optional<UseCaseActorType> actor;
	std::optional<UseCaseSupportSelectorsType> useCaseSupport;
};
bool convertToJson(const UseCaseInformationListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, UseCaseInformationListDataSelectorsType &dst);

struct SpecificationVersionDataElementsType { // complex
};
bool convertToJson(const SpecificationVersionDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SpecificationVersionDataElementsType &dst);

struct SpecificationVersionListDataType { // complex
	std::optional<SpecificationVersionType> specificationVersionData;
};
bool convertToJson(const SpecificationVersionListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SpecificationVersionListDataType &dst);

struct SpecificationVersionListDataSelectorsType { // complex
};
bool convertToJson(const SpecificationVersionListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SpecificationVersionListDataSelectorsType &dst);

struct OperatingConstraintsInterruptDataType { // complex
	std::optional<PowerSequenceIdType> sequenceId;
	std::optional<bool> isPausable;
	std::optional<bool> isStoppable;
	std::optional<bool> notInterruptibleAtHighPower;
	std::optional<uint32_t> maxCyclesPerDay;
};
bool convertToJson(const OperatingConstraintsInterruptDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, OperatingConstraintsInterruptDataType &dst);

struct OperatingConstraintsInterruptDataElementsType { // complex
	std::optional<ElementTagType> sequenceId;
	std::optional<ElementTagType> isPausable;
	std::optional<ElementTagType> isStoppable;
	std::optional<ElementTagType> notInterruptibleAtHighPower;
	std::optional<ElementTagType> maxCyclesPerDay;
};
bool convertToJson(const OperatingConstraintsInterruptDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, OperatingConstraintsInterruptDataElementsType &dst);

struct OperatingConstraintsInterruptListDataType { // complex
	std::optional<OperatingConstraintsInterruptDataType> operatingConstraintsInterruptData;
};
bool convertToJson(const OperatingConstraintsInterruptListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, OperatingConstraintsInterruptListDataType &dst);

struct OperatingConstraintsInterruptListDataSelectorsType { // complex
	std::optional<PowerSequenceIdType> sequenceId;
};
bool convertToJson(const OperatingConstraintsInterruptListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, OperatingConstraintsInterruptListDataSelectorsType &dst);

struct OperatingConstraintsDurationDataType { // complex
	std::optional<PowerSequenceIdType> sequenceId;
	std::optional<std::string> activeDurationMin;
	std::optional<std::string> activeDurationMax;
	std::optional<std::string> pauseDurationMin;
	std::optional<std::string> pauseDurationMax;
	std::optional<std::string> activeDurationSumMin;
	std::optional<std::string> activeDurationSumMax;
};
bool convertToJson(const OperatingConstraintsDurationDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, OperatingConstraintsDurationDataType &dst);

struct OperatingConstraintsDurationDataElementsType { // complex
	std::optional<ElementTagType> sequenceId;
	std::optional<ElementTagType> activeDurationMin;
	std::optional<ElementTagType> activeDurationMax;
	std::optional<ElementTagType> pauseDurationMin;
	std::optional<ElementTagType> pauseDurationMax;
	std::optional<ElementTagType> activeDurationSumMin;
	std::optional<ElementTagType> activeDurationSumMax;
};
bool convertToJson(const OperatingConstraintsDurationDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, OperatingConstraintsDurationDataElementsType &dst);

struct OperatingConstraintsDurationListDataType { // complex
	std::optional<OperatingConstraintsDurationDataType> operatingConstraintsDurationData;
};
bool convertToJson(const OperatingConstraintsDurationListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, OperatingConstraintsDurationListDataType &dst);

struct OperatingConstraintsDurationListDataSelectorsType { // complex
	std::optional<PowerSequenceIdType> sequenceId;
};
bool convertToJson(const OperatingConstraintsDurationListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, OperatingConstraintsDurationListDataSelectorsType &dst);

struct OperatingConstraintsPowerDescriptionDataType { // complex
	std::optional<PowerSequenceIdType> sequenceId;
	std::optional<EnergyDirectionType> positiveEnergyDirection;
	std::optional<UnitOfMeasurementType> powerUnit;
	std::optional<UnitOfMeasurementType> energyUnit;
	std::optional<DescriptionType> description;
};
bool convertToJson(const OperatingConstraintsPowerDescriptionDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, OperatingConstraintsPowerDescriptionDataType &dst);

struct OperatingConstraintsPowerDescriptionDataElementsType { // complex
	std::optional<ElementTagType> sequenceId;
	std::optional<ElementTagType> positiveEnergyDirection;
	std::optional<ElementTagType> powerUnit;
	std::optional<ElementTagType> energyUnit;
	std::optional<ElementTagType> description;
};
bool convertToJson(const OperatingConstraintsPowerDescriptionDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, OperatingConstraintsPowerDescriptionDataElementsType &dst);

struct OperatingConstraintsPowerDescriptionListDataType { // complex
	std::optional<OperatingConstraintsPowerDescriptionDataType> operatingConstraintsPowerDescriptionData;
};
bool convertToJson(const OperatingConstraintsPowerDescriptionListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, OperatingConstraintsPowerDescriptionListDataType &dst);

struct OperatingConstraintsPowerDescriptionListDataSelectorsType { // complex
	std::optional<PowerSequenceIdType> sequenceId;
};
bool convertToJson(const OperatingConstraintsPowerDescriptionListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, OperatingConstraintsPowerDescriptionListDataSelectorsType &dst);

struct OperatingConstraintsPowerRangeDataType { // complex
	std::optional<PowerSequenceIdType> sequenceId;
	std::optional<ScaledNumberType> powerMin;
	std::optional<ScaledNumberType> powerMax;
	std::optional<ScaledNumberType> energyMin;
	std::optional<ScaledNumberType> energyMax;
};
bool convertToJson(const OperatingConstraintsPowerRangeDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, OperatingConstraintsPowerRangeDataType &dst);

struct OperatingConstraintsPowerRangeDataElementsType { // complex
	std::optional<ElementTagType> sequenceId;
	std::optional<ScaledNumberElementsType> powerMin;
	std::optional<ScaledNumberElementsType> powerMax;
	std::optional<ScaledNumberElementsType> energyMin;
	std::optional<ScaledNumberElementsType> energyMax;
};
bool convertToJson(const OperatingConstraintsPowerRangeDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, OperatingConstraintsPowerRangeDataElementsType &dst);

struct OperatingConstraintsPowerRangeListDataType { // complex
	std::optional<OperatingConstraintsPowerRangeDataType> operatingConstraintsPowerRangeData;
};
bool convertToJson(const OperatingConstraintsPowerRangeListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, OperatingConstraintsPowerRangeListDataType &dst);

struct OperatingConstraintsPowerRangeListDataSelectorsType { // complex
	std::optional<PowerSequenceIdType> sequenceId;
};
bool convertToJson(const OperatingConstraintsPowerRangeListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, OperatingConstraintsPowerRangeListDataSelectorsType &dst);

struct OperatingConstraintsPowerLevelDataType { // complex
	std::optional<PowerSequenceIdType> sequenceId;
	std::optional<ScaledNumberType> power;
};
bool convertToJson(const OperatingConstraintsPowerLevelDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, OperatingConstraintsPowerLevelDataType &dst);

struct OperatingConstraintsPowerLevelDataElementsType { // complex
	std::optional<ElementTagType> sequenceId;
	std::optional<ScaledNumberElementsType> power;
};
bool convertToJson(const OperatingConstraintsPowerLevelDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, OperatingConstraintsPowerLevelDataElementsType &dst);

struct OperatingConstraintsPowerLevelListDataType { // complex
	std::optional<OperatingConstraintsPowerLevelDataType> operatingConstraintsPowerLevelData;
};
bool convertToJson(const OperatingConstraintsPowerLevelListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, OperatingConstraintsPowerLevelListDataType &dst);

struct OperatingConstraintsPowerLevelListDataSelectorsType { // complex
	std::optional<PowerSequenceIdType> sequenceId;
};
bool convertToJson(const OperatingConstraintsPowerLevelListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, OperatingConstraintsPowerLevelListDataSelectorsType &dst);

struct OperatingConstraintsResumeImplicationDataType { // complex
	std::optional<PowerSequenceIdType> sequenceId;
	std::optional<ScaledNumberType> resumeEnergyEstimated;
	std::optional<UnitOfMeasurementType> energyUnit;
	std::optional<ScaledNumberType> resumeCostEstimated;
	std::optional<CurrencyType> currency;
};
bool convertToJson(const OperatingConstraintsResumeImplicationDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, OperatingConstraintsResumeImplicationDataType &dst);

struct OperatingConstraintsResumeImplicationDataElementsType { // complex
	std::optional<ElementTagType> sequenceId;
	std::optional<ScaledNumberElementsType> resumeEnergyEstimated;
	std::optional<ElementTagType> energyUnit;
	std::optional<ScaledNumberElementsType> resumeCostEstimated;
	std::optional<ElementTagType> currency;
};
bool convertToJson(const OperatingConstraintsResumeImplicationDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, OperatingConstraintsResumeImplicationDataElementsType &dst);

struct OperatingConstraintsResumeImplicationListDataType { // complex
	std::optional<OperatingConstraintsResumeImplicationDataType> operatingConstraintsResumeImplicationData;
};
bool convertToJson(const OperatingConstraintsResumeImplicationListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, OperatingConstraintsResumeImplicationListDataType &dst);

struct OperatingConstraintsResumeImplicationListDataSelectorsType { // complex
	std::optional<PowerSequenceIdType> sequenceId;
};
bool convertToJson(const OperatingConstraintsResumeImplicationListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, OperatingConstraintsResumeImplicationListDataSelectorsType &dst);

struct SensingDataType { // complex
	std::optional<AbsoluteOrRelativeTimeType> timestamp;
	std::optional<SensingStateType> state;
	std::optional<ScaledNumberType> value;
};
bool convertToJson(const SensingDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SensingDataType &dst);

struct SensingDataElementsType { // complex
	std::optional<ElementTagType> timestamp;
	std::optional<ElementTagType> state;
	std::optional<ScaledNumberElementsType> value;
};
bool convertToJson(const SensingDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SensingDataElementsType &dst);

struct SensingListDataType { // complex
	std::optional<SensingDataType> sensingData;
};
bool convertToJson(const SensingListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SensingListDataType &dst);

struct SensingListDataSelectorsType { // complex
	std::optional<TimestampIntervalType> timestampInterval;
};
bool convertToJson(const SensingListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SensingListDataSelectorsType &dst);

struct SensingDescriptionDataType { // complex
	std::optional<SensingTypeType> sensingType;
	std::optional<UnitOfMeasurementType> unit;
	std::optional<ScopeTypeType> scopeType;
	std::optional<LabelType> label;
	std::optional<DescriptionType> description;
};
bool convertToJson(const SensingDescriptionDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SensingDescriptionDataType &dst);

struct SensingDescriptionDataElementsType { // complex
	std::optional<ElementTagType> sensingType;
	std::optional<ElementTagType> unit;
	std::optional<ElementTagType> scopeType;
	std::optional<ElementTagType> label;
	std::optional<ElementTagType> description;
};
bool convertToJson(const SensingDescriptionDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SensingDescriptionDataElementsType &dst);

struct SmartEnergyManagementPsAlternativesRelationType { // complex
	std::optional<AlternativesIdType> alternativesId;
};
bool convertToJson(const SmartEnergyManagementPsAlternativesRelationType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SmartEnergyManagementPsAlternativesRelationType &dst);

struct SmartEnergyManagementPsAlternativesType { // complex
	std::optional<SmartEnergyManagementPsAlternativesRelationType> relation;
	std::optional<SmartEnergyManagementPsPowerSequenceType> powerSequence;
};
bool convertToJson(const SmartEnergyManagementPsAlternativesType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SmartEnergyManagementPsAlternativesType &dst);

struct SmartEnergyManagementPsPowerSequenceType { // complex
	std::optional<PowerSequenceDescriptionDataType> description;
	std::optional<PowerSequenceStateDataType> state;
	std::optional<PowerSequenceScheduleDataType> schedule;
	std::optional<PowerSequenceScheduleConstraintsDataType> scheduleConstraints;
	std::optional<PowerSequenceSchedulePreferenceDataType> schedulePreference;
	std::optional<OperatingConstraintsInterruptDataType> operatingConstraintsInterrupt;
	std::optional<OperatingConstraintsDurationDataType> operatingConstraintsDuration;
	std::optional<OperatingConstraintsResumeImplicationDataType> operatingConstraintsResumeImplication;
	std::optional<SmartEnergyManagementPsPowerTimeSlotType> powerTimeSlot;
};
bool convertToJson(const SmartEnergyManagementPsPowerSequenceType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SmartEnergyManagementPsPowerSequenceType &dst);

struct SmartEnergyManagementPsPowerTimeSlotType { // complex
	std::optional<PowerTimeSlotScheduleDataType> schedule;
	std::optional<SmartEnergyManagementPsPowerTimeSlotValueListType> valueList;
	std::optional<PowerTimeSlotScheduleConstraintsDataType> scheduleConstraints;
};
bool convertToJson(const SmartEnergyManagementPsPowerTimeSlotType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SmartEnergyManagementPsPowerTimeSlotType &dst);

struct SmartEnergyManagementPsPowerTimeSlotValueListType { // complex
	std::optional<PowerTimeSlotValueDataType> value;
};
bool convertToJson(const SmartEnergyManagementPsPowerTimeSlotValueListType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SmartEnergyManagementPsPowerTimeSlotValueListType &dst);

struct SmartEnergyManagementPsDataType { // complex
	std::optional<PowerSequenceNodeScheduleInformationDataType> nodeScheduleInformation;
	std::optional<SmartEnergyManagementPsAlternativesType> alternatives;
};
bool convertToJson(const SmartEnergyManagementPsDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SmartEnergyManagementPsDataType &dst);

struct SmartEnergyManagementPsAlternativesRelationElementsType { // complex
	std::optional<ElementTagType> alternativesId;
};
bool convertToJson(const SmartEnergyManagementPsAlternativesRelationElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SmartEnergyManagementPsAlternativesRelationElementsType &dst);

struct SmartEnergyManagementPsAlternativesElementsType { // complex
	std::optional<SmartEnergyManagementPsAlternativesRelationElementsType> relation;
	std::optional<SmartEnergyManagementPsPowerSequenceElementsType> powerSequence;
};
bool convertToJson(const SmartEnergyManagementPsAlternativesElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SmartEnergyManagementPsAlternativesElementsType &dst);

struct SmartEnergyManagementPsPowerSequenceElementsType { // complex
	std::optional<PowerSequenceDescriptionDataElementsType> description;
	std::optional<PowerSequenceStateDataElementsType> state;
	std::optional<PowerSequenceScheduleDataElementsType> schedule;
	std::optional<PowerSequenceScheduleConstraintsDataElementsType> scheduleConstraints;
	std::optional<PowerSequenceSchedulePreferenceDataElementsType> schedulePreference;
	std::optional<OperatingConstraintsInterruptDataElementsType> operatingConstraintsInterrupt;
	std::optional<OperatingConstraintsDurationDataElementsType> operatingConstraintsDuration;
	std::optional<OperatingConstraintsResumeImplicationDataElementsType> operatingConstraintsResumeImplication;
	std::optional<SmartEnergyManagementPsPowerTimeSlotElementsType> powerTimeSlot;
};
bool convertToJson(const SmartEnergyManagementPsPowerSequenceElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SmartEnergyManagementPsPowerSequenceElementsType &dst);

struct SmartEnergyManagementPsPowerTimeSlotElementsType { // complex
	std::optional<PowerTimeSlotScheduleDataElementsType> schedule;
	std::optional<SmartEnergyManagementPsPowerTimeSlotValueListElementsType> valueList;
	std::optional<PowerTimeSlotScheduleConstraintsDataElementsType> scheduleConstraints;
};
bool convertToJson(const SmartEnergyManagementPsPowerTimeSlotElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SmartEnergyManagementPsPowerTimeSlotElementsType &dst);

struct SmartEnergyManagementPsPowerTimeSlotValueListElementsType { // complex
	std::optional<PowerTimeSlotValueDataElementsType> value;
};
bool convertToJson(const SmartEnergyManagementPsPowerTimeSlotValueListElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SmartEnergyManagementPsPowerTimeSlotValueListElementsType &dst);

struct SmartEnergyManagementPsDataElementsType { // complex
	std::optional<PowerSequenceNodeScheduleInformationDataElementsType> nodeScheduleInformation;
	std::optional<SmartEnergyManagementPsAlternativesElementsType> alternatives;
};
bool convertToJson(const SmartEnergyManagementPsDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SmartEnergyManagementPsDataElementsType &dst);

struct SmartEnergyManagementPsDataSelectorsType { // complex
	std::optional<PowerSequenceAlternativesRelationListDataSelectorsType> alternativesRelation;
	std::optional<PowerSequenceDescriptionListDataSelectorsType> powerSequenceDescription;
	std::optional<PowerTimeSlotScheduleListDataSelectorsType> powerTimeSlotSchedule;
	std::optional<PowerTimeSlotValueListDataSelectorsType> powerTimeSlotValue;
};
bool convertToJson(const SmartEnergyManagementPsDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SmartEnergyManagementPsDataSelectorsType &dst);

struct SmartEnergyManagementPsPriceDataType { // complex
	std::optional<PowerSequencePriceDataType> price;
};
bool convertToJson(const SmartEnergyManagementPsPriceDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SmartEnergyManagementPsPriceDataType &dst);

struct SmartEnergyManagementPsPriceDataElementsType { // complex
	std::optional<PowerSequencePriceDataElementsType> price;
};
bool convertToJson(const SmartEnergyManagementPsPriceDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SmartEnergyManagementPsPriceDataElementsType &dst);

struct SmartEnergyManagementPsPriceDataSelectorsType { // complex
	std::optional<PowerSequencePriceListDataSelectorsType> price;
};
bool convertToJson(const SmartEnergyManagementPsPriceDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SmartEnergyManagementPsPriceDataSelectorsType &dst);

struct SmartEnergyManagementPsConfigurationRequestCallType { // complex
	std::optional<PowerSequenceScheduleConfigurationRequestCallType> scheduleConfigurationRequest;
};
bool convertToJson(const SmartEnergyManagementPsConfigurationRequestCallType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SmartEnergyManagementPsConfigurationRequestCallType &dst);

struct SmartEnergyManagementPsConfigurationRequestCallElementsType { // complex
	std::optional<PowerSequenceScheduleConfigurationRequestCallElementsType> scheduleConfigurationRequest;
};
bool convertToJson(const SmartEnergyManagementPsConfigurationRequestCallElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SmartEnergyManagementPsConfigurationRequestCallElementsType &dst);

struct SmartEnergyManagementPsPriceCalculationRequestCallType { // complex
	std::optional<PowerSequencePriceCalculationRequestCallType> priceCalculationRequest;
};
bool convertToJson(const SmartEnergyManagementPsPriceCalculationRequestCallType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SmartEnergyManagementPsPriceCalculationRequestCallType &dst);

struct SmartEnergyManagementPsPriceCalculationRequestCallElementsType { // complex
	std::optional<PowerSequencePriceCalculationRequestCallElementsType> priceCalculationRequest;
};
bool convertToJson(const SmartEnergyManagementPsPriceCalculationRequestCallElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SmartEnergyManagementPsPriceCalculationRequestCallElementsType &dst);

struct StateInformationDataType { // complex
	std::optional<stateInformationIdType> stateInformationId;
	std::optional<StateInformationType> stateInformation;
	std::optional<bool> isActive;
	std::optional<StateInformationCategoryType> category;
	std::optional<AbsoluteOrRelativeTimeType> timeOfLastChange;
};
bool convertToJson(const StateInformationDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, StateInformationDataType &dst);

struct StateInformationDataElementsType { // complex
	std::optional<ElementTagType> stateInformationId;
	std::optional<ElementTagType> stateInformation;
	std::optional<ElementTagType> isActive;
	std::optional<ElementTagType> category;
	std::optional<ElementTagType> timeOfLastChange;
};
bool convertToJson(const StateInformationDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, StateInformationDataElementsType &dst);

struct StateInformationListDataType { // complex
	std::optional<StateInformationDataType> stateInformationData;
};
bool convertToJson(const StateInformationListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, StateInformationListDataType &dst);

struct StateInformationListDataSelectorsType { // complex
	std::optional<stateInformationIdType> stateInformationId;
	std::optional<StateInformationType> stateInformation;
	std::optional<bool> isActive;
	std::optional<StateInformationCategoryType> category;
};
bool convertToJson(const StateInformationListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, StateInformationListDataSelectorsType &dst);

struct SupplyConditionDataType { // complex
	std::optional<ConditionIdType> conditionId;
	std::optional<AbsoluteOrRelativeTimeType> timestamp;
	std::optional<SupplyConditionEventTypeType> eventType;
	std::optional<SupplyConditionOriginatorType> originator;
	std::optional<ThresholdIdType> thresholdId;
	std::optional<ScaledNumberType> thresholdPercentage;
	std::optional<TimePeriodType> relevantPeriod;
	std::optional<DescriptionType> description;
	std::optional<GridConditionType> gridCondition;
};
bool convertToJson(const SupplyConditionDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SupplyConditionDataType &dst);

struct SupplyConditionDataElementsType { // complex
	std::optional<ElementTagType> conditionId;
	std::optional<ElementTagType> timestamp;
	std::optional<ElementTagType> eventType;
	std::optional<ElementTagType> originator;
	std::optional<ElementTagType> thresholdId;
	std::optional<ScaledNumberElementsType> thresholdPercentage;
	std::optional<TimePeriodElementsType> relevantPeriod;
	std::optional<ElementTagType> description;
	std::optional<ElementTagType> gridCondition;
};
bool convertToJson(const SupplyConditionDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SupplyConditionDataElementsType &dst);

struct SupplyConditionListDataType { // complex
	std::optional<SupplyConditionDataType> supplyConditionData;
};
bool convertToJson(const SupplyConditionListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SupplyConditionListDataType &dst);

struct SupplyConditionListDataSelectorsType { // complex
	std::optional<ConditionIdType> conditionId;
	std::optional<TimestampIntervalType> timestampInterval;
	std::optional<SupplyConditionEventTypeType> eventType;
	std::optional<SupplyConditionOriginatorType> originator;
};
bool convertToJson(const SupplyConditionListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SupplyConditionListDataSelectorsType &dst);

struct SupplyConditionDescriptionDataType { // complex
	std::optional<ConditionIdType> conditionId;
	std::optional<CommodityTypeType> commodityType;
	std::optional<EnergyDirectionType> positiveEnergyDirection;
	std::optional<LabelType> label;
	std::optional<DescriptionType> description;
};
bool convertToJson(const SupplyConditionDescriptionDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SupplyConditionDescriptionDataType &dst);

struct SupplyConditionDescriptionDataElementsType { // complex
	std::optional<ElementTagType> conditionId;
	std::optional<ElementTagType> commodityType;
	std::optional<ElementTagType> positiveEnergyDirection;
	std::optional<ElementTagType> label;
	std::optional<ElementTagType> description;
};
bool convertToJson(const SupplyConditionDescriptionDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SupplyConditionDescriptionDataElementsType &dst);

struct SupplyConditionDescriptionListDataType { // complex
	std::optional<SupplyConditionDescriptionDataType> supplyConditionDescriptionData;
};
bool convertToJson(const SupplyConditionDescriptionListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SupplyConditionDescriptionListDataType &dst);

struct SupplyConditionDescriptionListDataSelectorsType { // complex
	std::optional<ConditionIdType> conditionId;
};
bool convertToJson(const SupplyConditionDescriptionListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SupplyConditionDescriptionListDataSelectorsType &dst);

struct SupplyConditionThresholdRelationDataType { // complex
	std::optional<ConditionIdType> conditionId;
	std::optional<ThresholdIdType> thresholdId;
};
bool convertToJson(const SupplyConditionThresholdRelationDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SupplyConditionThresholdRelationDataType &dst);

struct SupplyConditionThresholdRelationDataElementsType { // complex
	std::optional<ElementTagType> conditionId;
	std::optional<ElementTagType> thresholdId;
};
bool convertToJson(const SupplyConditionThresholdRelationDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SupplyConditionThresholdRelationDataElementsType &dst);

struct SupplyConditionThresholdRelationListDataType { // complex
	std::optional<SupplyConditionThresholdRelationDataType> supplyConditionThresholdRelationData;
};
bool convertToJson(const SupplyConditionThresholdRelationListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SupplyConditionThresholdRelationListDataType &dst);

struct SupplyConditionThresholdRelationListDataSelectorsType { // complex
	std::optional<ConditionIdType> conditionId;
	std::optional<ThresholdIdType> thresholdId;
};
bool convertToJson(const SupplyConditionThresholdRelationListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, SupplyConditionThresholdRelationListDataSelectorsType &dst);

struct TaskManagementDirectControlRelatedType { // complex
};
bool convertToJson(const TaskManagementDirectControlRelatedType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TaskManagementDirectControlRelatedType &dst);

struct TaskManagementDirectControlRelatedElementsType { // complex
};
bool convertToJson(const TaskManagementDirectControlRelatedElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TaskManagementDirectControlRelatedElementsType &dst);

struct TaskManagementHvacRelatedType { // complex
	std::optional<HvacOverrunIdType> overrunId;
};
bool convertToJson(const TaskManagementHvacRelatedType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TaskManagementHvacRelatedType &dst);

struct TaskManagementHvacRelatedElementsType { // complex
	std::optional<ElementTagType> overrunId;
};
bool convertToJson(const TaskManagementHvacRelatedElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TaskManagementHvacRelatedElementsType &dst);

struct TaskManagementLoadControlReleatedType { // complex
	std::optional<LoadControlEventIdType> eventId;
};
bool convertToJson(const TaskManagementLoadControlReleatedType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TaskManagementLoadControlReleatedType &dst);

struct TaskManagementLoadControlReleatedElementsType { // complex
	std::optional<ElementTagType> eventId;
};
bool convertToJson(const TaskManagementLoadControlReleatedElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TaskManagementLoadControlReleatedElementsType &dst);

struct TaskManagementPowerSequencesRelatedType { // complex
	std::optional<PowerSequenceIdType> sequenceId;
};
bool convertToJson(const TaskManagementPowerSequencesRelatedType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TaskManagementPowerSequencesRelatedType &dst);

struct TaskManagementPowerSequencesRelatedElementsType { // complex
	std::optional<ElementTagType> sequenceId;
};
bool convertToJson(const TaskManagementPowerSequencesRelatedElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TaskManagementPowerSequencesRelatedElementsType &dst);

struct TaskManagementSmartEnergyManagementPsRelatedType { // complex
	std::optional<PowerSequenceIdType> sequenceId;
};
bool convertToJson(const TaskManagementSmartEnergyManagementPsRelatedType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TaskManagementSmartEnergyManagementPsRelatedType &dst);

struct TaskManagementSmartEnergyManagementPsRelatedElementsType { // complex
	std::optional<ElementTagType> sequenceId;
};
bool convertToJson(const TaskManagementSmartEnergyManagementPsRelatedElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TaskManagementSmartEnergyManagementPsRelatedElementsType &dst);

struct TaskManagementJobDataType { // complex
	std::optional<TaskManagementJobIdType> jobId;
	std::optional<AbsoluteOrRelativeTimeType> timestamp;
	std::optional<TaskManagementJobStateType> jobState;
	std::optional<std::string> elapsedTime;
	std::optional<std::string> remainingTime;
};
bool convertToJson(const TaskManagementJobDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TaskManagementJobDataType &dst);

struct TaskManagementJobDataElementsType { // complex
	std::optional<ElementTagType> jobId;
	std::optional<ElementTagType> timestamp;
	std::optional<ElementTagType> jobState;
	std::optional<ElementTagType> elapsedTime;
	std::optional<ElementTagType> remainingTime;
};
bool convertToJson(const TaskManagementJobDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TaskManagementJobDataElementsType &dst);

struct TaskManagementJobListDataType { // complex
	std::optional<TaskManagementJobDataType> taskManagementJobData;
};
bool convertToJson(const TaskManagementJobListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TaskManagementJobListDataType &dst);

struct TaskManagementJobListDataSelectorsType { // complex
	std::optional<TaskManagementJobIdType> jobId;
	std::optional<TaskManagementJobStateType> jobState;
};
bool convertToJson(const TaskManagementJobListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TaskManagementJobListDataSelectorsType &dst);

struct TaskManagementJobRelationDataType { // complex
	std::optional<TaskManagementJobIdType> jobId;
	std::optional<TaskManagementDirectControlRelatedType> directControlRelated;
	std::optional<TaskManagementHvacRelatedType> hvacRelated;
	std::optional<TaskManagementLoadControlReleatedType> loadControlReleated;
	std::optional<TaskManagementPowerSequencesRelatedType> powerSequencesRelated;
	std::optional<TaskManagementSmartEnergyManagementPsRelatedType> smartEnergyManagementPsRelated;
};
bool convertToJson(const TaskManagementJobRelationDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TaskManagementJobRelationDataType &dst);

struct TaskManagementJobRelationDataElementsType { // complex
	std::optional<ElementTagType> jobId;
	std::optional<TaskManagementDirectControlRelatedElementsType> directControlRelated;
	std::optional<TaskManagementHvacRelatedElementsType> hvacRelated;
	std::optional<TaskManagementLoadControlReleatedElementsType> loadControlReleated;
	std::optional<TaskManagementPowerSequencesRelatedElementsType> powerSequencesRelated;
	std::optional<TaskManagementSmartEnergyManagementPsRelatedElementsType> smartEnergyManagementPsRelated;
};
bool convertToJson(const TaskManagementJobRelationDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TaskManagementJobRelationDataElementsType &dst);

struct TaskManagementJobRelationListDataType { // complex
	std::optional<TaskManagementJobRelationDataType> taskManagementJobRelationData;
};
bool convertToJson(const TaskManagementJobRelationListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TaskManagementJobRelationListDataType &dst);

struct TaskManagementJobRelationListDataSelectorsType { // complex
	std::optional<TaskManagementJobIdType> jobId;
};
bool convertToJson(const TaskManagementJobRelationListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TaskManagementJobRelationListDataSelectorsType &dst);

struct TaskManagementJobDescriptionDataType { // complex
	std::optional<TaskManagementJobIdType> jobId;
	std::optional<TaskManagementJobSourceType> jobSource;
	std::optional<LabelType> label;
	std::optional<DescriptionType> description;
};
bool convertToJson(const TaskManagementJobDescriptionDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TaskManagementJobDescriptionDataType &dst);

struct TaskManagementJobDescriptionDataElementsType { // complex
	std::optional<ElementTagType> jobId;
	std::optional<ElementTagType> jobSource;
	std::optional<ElementTagType> label;
	std::optional<ElementTagType> description;
};
bool convertToJson(const TaskManagementJobDescriptionDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TaskManagementJobDescriptionDataElementsType &dst);

struct TaskManagementJobDescriptionListDataType { // complex
	std::optional<TaskManagementJobDescriptionDataType> taskManagementJobDescriptionData;
};
bool convertToJson(const TaskManagementJobDescriptionListDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TaskManagementJobDescriptionListDataType &dst);

struct TaskManagementJobDescriptionListDataSelectorsType { // complex
	std::optional<TaskManagementJobIdType> jobId;
	std::optional<TaskManagementJobSourceType> jobSource;
};
bool convertToJson(const TaskManagementJobDescriptionListDataSelectorsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TaskManagementJobDescriptionListDataSelectorsType &dst);

struct TaskManagementOverviewDataType { // complex
	std::optional<bool> remoteControllable;
	std::optional<bool> jobsActive;
};
bool convertToJson(const TaskManagementOverviewDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TaskManagementOverviewDataType &dst);

struct TaskManagementOverviewDataElementsType { // complex
	std::optional<ElementTagType> remoteControllable;
	std::optional<ElementTagType> jobsActive;
};
bool convertToJson(const TaskManagementOverviewDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TaskManagementOverviewDataElementsType &dst);

struct TimeInformationDataType { // complex
	std::optional<std::string> utc;
	std::optional<std::string> utcOffset;
	std::optional<DayOfWeekType> dayOfWeek;
	std::optional<CalendarWeekType> calendarWeek;
};
bool convertToJson(const TimeInformationDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TimeInformationDataType &dst);

struct TimeInformationDataElementsType { // complex
	std::optional<ElementTagType> utc;
	std::optional<ElementTagType> utcOffset;
	std::optional<ElementTagType> dayOfWeek;
	std::optional<ElementTagType> calendarWeek;
};
bool convertToJson(const TimeInformationDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TimeInformationDataElementsType &dst);

struct TimeDistributorDataType { // complex
	std::optional<bool> isTimeDistributor;
	std::optional<uint32_t> distributorPriority;
};
bool convertToJson(const TimeDistributorDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TimeDistributorDataType &dst);

struct TimeDistributorDataElementsType { // complex
	std::optional<ElementTagType> isTimeDistributor;
	std::optional<ElementTagType> distributorPriority;
};
bool convertToJson(const TimeDistributorDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TimeDistributorDataElementsType &dst);

struct TimePrecisionDataType { // complex
	std::optional<bool> isSynchronised;
	std::optional<std::string> lastSyncAt;
	std::optional<int> clockDrift;
};
bool convertToJson(const TimePrecisionDataType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TimePrecisionDataType &dst);

struct TimePrecisionDataElementsType { // complex
	std::optional<ElementTagType> isSynchronised;
	std::optional<ElementTagType> lastSyncAt;
	std::optional<ElementTagType> clockDrift;
};
bool convertToJson(const TimePrecisionDataElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TimePrecisionDataElementsType &dst);

struct TimeDistributorEnquiryCallType { // complex
};
bool convertToJson(const TimeDistributorEnquiryCallType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TimeDistributorEnquiryCallType &dst);

struct TimeDistributorEnquiryCallElementsType { // complex
};
bool convertToJson(const TimeDistributorEnquiryCallElementsType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, TimeDistributorEnquiryCallElementsType &dst);

struct HeaderType { // complex
	std::optional<SpecificationVersionType> specificationVersion;
	std::optional<FeatureAddressType> addressSource;
	std::optional<FeatureAddressType> addressDestination;
	std::optional<FeatureAddressType> addressOriginator;
	std::optional<MsgCounterType> msgCounter;
	std::optional<MsgCounterType> msgCounterReference;
	std::optional<CmdClassifierType> cmdClassifier;
	std::optional<bool> ackRequest;
	std::optional<AbsoluteOrRelativeTimeType> timestamp;
};
bool convertToJson(const HeaderType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, HeaderType &dst);

struct DatagramType { // complex
	std::optional<HeaderType> header;
	std::optional<PayloadType> payload;
};
bool convertToJson(const DatagramType &src, JsonVariant& dst);
void convertFromJson(const JsonVariantConst& src, DatagramType &dst);

