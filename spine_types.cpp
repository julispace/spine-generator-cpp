
// This file is generated by pre_generator.py
#include "spine_types.h"

bool convertToJson(const MessagingTypeEnumType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case MessagingTypeEnumType::logging:
		 enumName = "logging";
		break;
	case MessagingTypeEnumType::information:
		 enumName = "information";
		break;
	case MessagingTypeEnumType::warning:
		 enumName = "warning";
		break;
	case MessagingTypeEnumType::alarm:
		 enumName = "alarm";
		break;
	case MessagingTypeEnumType::emergency:
		 enumName = "emergency";
		break;
	case MessagingTypeEnumType::obsolete:
		 enumName = "obsolete";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, MessagingTypeEnumType &dst) {
	if (src == "logging") {
		return MessagingTypeEnumType::logging;
	}
	if (src == "information") {
		return MessagingTypeEnumType::information;
	}
	if (src == "warning") {
		return MessagingTypeEnumType::warning;
	}
	if (src == "alarm") {
		return MessagingTypeEnumType::alarm;
	}
	if (src == "emergency") {
		return MessagingTypeEnumType::emergency;
	}
	if (src == "obsolete") {
		return MessagingTypeEnumType::obsolete;
	}
	 return MessagingTypeEnumType::obsolete;
}
bool convertToJson(const RecurringIntervalEnumType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case RecurringIntervalEnumType::yearly:
		 enumName = "yearly";
		break;
	case RecurringIntervalEnumType::monthly:
		 enumName = "monthly";
		break;
	case RecurringIntervalEnumType::weekly:
		 enumName = "weekly";
		break;
	case RecurringIntervalEnumType::daily:
		 enumName = "daily";
		break;
	case RecurringIntervalEnumType::hourly:
		 enumName = "hourly";
		break;
	case RecurringIntervalEnumType::everyMinute:
		 enumName = "everyMinute";
		break;
	case RecurringIntervalEnumType::everySecond:
		 enumName = "everySecond";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, RecurringIntervalEnumType &dst) {
	if (src == "yearly") {
		return RecurringIntervalEnumType::yearly;
	}
	if (src == "monthly") {
		return RecurringIntervalEnumType::monthly;
	}
	if (src == "weekly") {
		return RecurringIntervalEnumType::weekly;
	}
	if (src == "daily") {
		return RecurringIntervalEnumType::daily;
	}
	if (src == "hourly") {
		return RecurringIntervalEnumType::hourly;
	}
	if (src == "everyMinute") {
		return RecurringIntervalEnumType::everyMinute;
	}
	if (src == "everySecond") {
		return RecurringIntervalEnumType::everySecond;
	}
	 return RecurringIntervalEnumType::everySecond;
}
bool convertToJson(const MonthType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case MonthType::january:
		 enumName = "january";
		break;
	case MonthType::february:
		 enumName = "february";
		break;
	case MonthType::march:
		 enumName = "march";
		break;
	case MonthType::april:
		 enumName = "april";
		break;
	case MonthType::may:
		 enumName = "may";
		break;
	case MonthType::june:
		 enumName = "june";
		break;
	case MonthType::july:
		 enumName = "july";
		break;
	case MonthType::august:
		 enumName = "august";
		break;
	case MonthType::september:
		 enumName = "september";
		break;
	case MonthType::october:
		 enumName = "october";
		break;
	case MonthType::november:
		 enumName = "november";
		break;
	case MonthType::december:
		 enumName = "december";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, MonthType &dst) {
	if (src == "january") {
		return MonthType::january;
	}
	if (src == "february") {
		return MonthType::february;
	}
	if (src == "march") {
		return MonthType::march;
	}
	if (src == "april") {
		return MonthType::april;
	}
	if (src == "may") {
		return MonthType::may;
	}
	if (src == "june") {
		return MonthType::june;
	}
	if (src == "july") {
		return MonthType::july;
	}
	if (src == "august") {
		return MonthType::august;
	}
	if (src == "september") {
		return MonthType::september;
	}
	if (src == "october") {
		return MonthType::october;
	}
	if (src == "november") {
		return MonthType::november;
	}
	if (src == "december") {
		return MonthType::december;
	}
	 return MonthType::december;
}
bool convertToJson(const DayOfWeekType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case DayOfWeekType::monday:
		 enumName = "monday";
		break;
	case DayOfWeekType::tuesday:
		 enumName = "tuesday";
		break;
	case DayOfWeekType::wednesday:
		 enumName = "wednesday";
		break;
	case DayOfWeekType::thursday:
		 enumName = "thursday";
		break;
	case DayOfWeekType::friday:
		 enumName = "friday";
		break;
	case DayOfWeekType::saturday:
		 enumName = "saturday";
		break;
	case DayOfWeekType::sunday:
		 enumName = "sunday";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, DayOfWeekType &dst) {
	if (src == "monday") {
		return DayOfWeekType::monday;
	}
	if (src == "tuesday") {
		return DayOfWeekType::tuesday;
	}
	if (src == "wednesday") {
		return DayOfWeekType::wednesday;
	}
	if (src == "thursday") {
		return DayOfWeekType::thursday;
	}
	if (src == "friday") {
		return DayOfWeekType::friday;
	}
	if (src == "saturday") {
		return DayOfWeekType::saturday;
	}
	if (src == "sunday") {
		return DayOfWeekType::sunday;
	}
	 return DayOfWeekType::sunday;
}
bool convertToJson(const OccurrenceEnumType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case OccurrenceEnumType::first:
		 enumName = "first";
		break;
	case OccurrenceEnumType::second:
		 enumName = "second";
		break;
	case OccurrenceEnumType::third:
		 enumName = "third";
		break;
	case OccurrenceEnumType::fourth:
		 enumName = "fourth";
		break;
	case OccurrenceEnumType::last:
		 enumName = "last";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, OccurrenceEnumType &dst) {
	if (src == "first") {
		return OccurrenceEnumType::first;
	}
	if (src == "second") {
		return OccurrenceEnumType::second;
	}
	if (src == "third") {
		return OccurrenceEnumType::third;
	}
	if (src == "fourth") {
		return OccurrenceEnumType::fourth;
	}
	if (src == "last") {
		return OccurrenceEnumType::last;
	}
	 return OccurrenceEnumType::last;
}
bool convertToJson(const CommodityTypeEnumType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case CommodityTypeEnumType::electricity:
		 enumName = "electricity";
		break;
	case CommodityTypeEnumType::gas:
		 enumName = "gas";
		break;
	case CommodityTypeEnumType::oil:
		 enumName = "oil";
		break;
	case CommodityTypeEnumType::water:
		 enumName = "water";
		break;
	case CommodityTypeEnumType::wasteWater:
		 enumName = "wasteWater";
		break;
	case CommodityTypeEnumType::domesticHotWater:
		 enumName = "domesticHotWater";
		break;
	case CommodityTypeEnumType::heatingWater:
		 enumName = "heatingWater";
		break;
	case CommodityTypeEnumType::steam:
		 enumName = "steam";
		break;
	case CommodityTypeEnumType::heat:
		 enumName = "heat";
		break;
	case CommodityTypeEnumType::coolingLoad:
		 enumName = "coolingLoad";
		break;
	case CommodityTypeEnumType::air:
		 enumName = "air";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, CommodityTypeEnumType &dst) {
	if (src == "electricity") {
		return CommodityTypeEnumType::electricity;
	}
	if (src == "gas") {
		return CommodityTypeEnumType::gas;
	}
	if (src == "oil") {
		return CommodityTypeEnumType::oil;
	}
	if (src == "water") {
		return CommodityTypeEnumType::water;
	}
	if (src == "wasteWater") {
		return CommodityTypeEnumType::wasteWater;
	}
	if (src == "domesticHotWater") {
		return CommodityTypeEnumType::domesticHotWater;
	}
	if (src == "heatingWater") {
		return CommodityTypeEnumType::heatingWater;
	}
	if (src == "steam") {
		return CommodityTypeEnumType::steam;
	}
	if (src == "heat") {
		return CommodityTypeEnumType::heat;
	}
	if (src == "coolingLoad") {
		return CommodityTypeEnumType::coolingLoad;
	}
	if (src == "air") {
		return CommodityTypeEnumType::air;
	}
	 return CommodityTypeEnumType::air;
}
bool convertToJson(const EnergyDirectionEnumType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case EnergyDirectionEnumType::consume:
		 enumName = "consume";
		break;
	case EnergyDirectionEnumType::produce:
		 enumName = "produce";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, EnergyDirectionEnumType &dst) {
	if (src == "consume") {
		return EnergyDirectionEnumType::consume;
	}
	if (src == "produce") {
		return EnergyDirectionEnumType::produce;
	}
	 return EnergyDirectionEnumType::produce;
}
bool convertToJson(const EnergyModeEnumType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case EnergyModeEnumType::consume:
		 enumName = "consume";
		break;
	case EnergyModeEnumType::produce:
		 enumName = "produce";
		break;
	case EnergyModeEnumType::idle:
		 enumName = "idle";
		break;
	case EnergyModeEnumType::auto:
		 enumName = "auto";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, EnergyModeEnumType &dst) {
	if (src == "consume") {
		return EnergyModeEnumType::consume;
	}
	if (src == "produce") {
		return EnergyModeEnumType::produce;
	}
	if (src == "idle") {
		return EnergyModeEnumType::idle;
	}
	if (src == "auto") {
		return EnergyModeEnumType::auto;
	}
	 return EnergyModeEnumType::auto;
}
bool convertToJson(const UnitOfMeasurementEnumType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case UnitOfMeasurementEnumType::unknown:
		 enumName = "unknown";
		break;
	case UnitOfMeasurementEnumType::var_1:
		 enumName = "1";
		break;
	case UnitOfMeasurementEnumType::m:
		 enumName = "m";
		break;
	case UnitOfMeasurementEnumType::kg:
		 enumName = "kg";
		break;
	case UnitOfMeasurementEnumType::s:
		 enumName = "s";
		break;
	case UnitOfMeasurementEnumType::A:
		 enumName = "A";
		break;
	case UnitOfMeasurementEnumType::K:
		 enumName = "K";
		break;
	case UnitOfMeasurementEnumType::mol:
		 enumName = "mol";
		break;
	case UnitOfMeasurementEnumType::cd:
		 enumName = "cd";
		break;
	case UnitOfMeasurementEnumType::V:
		 enumName = "V";
		break;
	case UnitOfMeasurementEnumType::W:
		 enumName = "W";
		break;
	case UnitOfMeasurementEnumType::Wh:
		 enumName = "Wh";
		break;
	case UnitOfMeasurementEnumType::VA:
		 enumName = "VA";
		break;
	case UnitOfMeasurementEnumType::VAh:
		 enumName = "VAh";
		break;
	case UnitOfMeasurementEnumType::var:
		 enumName = "var";
		break;
	case UnitOfMeasurementEnumType::varh:
		 enumName = "varh";
		break;
	case UnitOfMeasurementEnumType::degC:
		 enumName = "degC";
		break;
	case UnitOfMeasurementEnumType::degF:
		 enumName = "degF";
		break;
	case UnitOfMeasurementEnumType::Lm:
		 enumName = "Lm";
		break;
	case UnitOfMeasurementEnumType::lx:
		 enumName = "lx";
		break;
	case UnitOfMeasurementEnumType::Ohm:
		 enumName = "Ohm";
		break;
	case UnitOfMeasurementEnumType::Hz:
		 enumName = "Hz";
		break;
	case UnitOfMeasurementEnumType::dB:
		 enumName = "dB";
		break;
	case UnitOfMeasurementEnumType::dBm:
		 enumName = "dBm";
		break;
	case UnitOfMeasurementEnumType::pct:
		 enumName = "pct";
		break;
	case UnitOfMeasurementEnumType::ppm:
		 enumName = "ppm";
		break;
	case UnitOfMeasurementEnumType::l:
		 enumName = "l";
		break;
	case UnitOfMeasurementEnumType::l_s:
		 enumName = "l/s";
		break;
	case UnitOfMeasurementEnumType::l_h:
		 enumName = "l/h";
		break;
	case UnitOfMeasurementEnumType::deg:
		 enumName = "deg";
		break;
	case UnitOfMeasurementEnumType::rad:
		 enumName = "rad";
		break;
	case UnitOfMeasurementEnumType::rad_s:
		 enumName = "rad/s";
		break;
	case UnitOfMeasurementEnumType::sr:
		 enumName = "sr";
		break;
	case UnitOfMeasurementEnumType::Gy:
		 enumName = "Gy";
		break;
	case UnitOfMeasurementEnumType::Bq:
		 enumName = "Bq";
		break;
	case UnitOfMeasurementEnumType::Bq_m_3:
		 enumName = "Bq/m^3";
		break;
	case UnitOfMeasurementEnumType::Sv:
		 enumName = "Sv";
		break;
	case UnitOfMeasurementEnumType::Rd:
		 enumName = "Rd";
		break;
	case UnitOfMeasurementEnumType::C:
		 enumName = "C";
		break;
	case UnitOfMeasurementEnumType::F:
		 enumName = "F";
		break;
	case UnitOfMeasurementEnumType::H:
		 enumName = "H";
		break;
	case UnitOfMeasurementEnumType::J:
		 enumName = "J";
		break;
	case UnitOfMeasurementEnumType::N:
		 enumName = "N";
		break;
	case UnitOfMeasurementEnumType::N_m:
		 enumName = "N_m";
		break;
	case UnitOfMeasurementEnumType::N_s:
		 enumName = "N_s";
		break;
	case UnitOfMeasurementEnumType::Wb:
		 enumName = "Wb";
		break;
	case UnitOfMeasurementEnumType::T:
		 enumName = "T";
		break;
	case UnitOfMeasurementEnumType::Pa:
		 enumName = "Pa";
		break;
	case UnitOfMeasurementEnumType::bar:
		 enumName = "bar";
		break;
	case UnitOfMeasurementEnumType::atm:
		 enumName = "atm";
		break;
	case UnitOfMeasurementEnumType::psi:
		 enumName = "psi";
		break;
	case UnitOfMeasurementEnumType::mmHg:
		 enumName = "mmHg";
		break;
	case UnitOfMeasurementEnumType::m_2:
		 enumName = "m^2";
		break;
	case UnitOfMeasurementEnumType::m_3:
		 enumName = "m^3";
		break;
	case UnitOfMeasurementEnumType::m_3_h:
		 enumName = "m^3/h";
		break;
	case UnitOfMeasurementEnumType::m_s:
		 enumName = "m/s";
		break;
	case UnitOfMeasurementEnumType::m_s_2:
		 enumName = "m/s^2";
		break;
	case UnitOfMeasurementEnumType::m_3_s:
		 enumName = "m^3/s";
		break;
	case UnitOfMeasurementEnumType::m_m_3:
		 enumName = "m/m^3";
		break;
	case UnitOfMeasurementEnumType::kg_m_3:
		 enumName = "kg/m^3";
		break;
	case UnitOfMeasurementEnumType::kg_m:
		 enumName = "kg_m";
		break;
	case UnitOfMeasurementEnumType::m_2_s:
		 enumName = "m^2/s";
		break;
	case UnitOfMeasurementEnumType::W_m_K:
		 enumName = "W/m_K";
		break;
	case UnitOfMeasurementEnumType::J_K:
		 enumName = "J/K";
		break;
	case UnitOfMeasurementEnumType::var_1_s:
		 enumName = "1/s";
		break;
	case UnitOfMeasurementEnumType::W_m_2:
		 enumName = "W/m^2";
		break;
	case UnitOfMeasurementEnumType::J_m_2:
		 enumName = "J/m^2";
		break;
	case UnitOfMeasurementEnumType::S:
		 enumName = "S";
		break;
	case UnitOfMeasurementEnumType::S_m:
		 enumName = "S/m";
		break;
	case UnitOfMeasurementEnumType::K_s:
		 enumName = "K/s";
		break;
	case UnitOfMeasurementEnumType::Pa_s:
		 enumName = "Pa/s";
		break;
	case UnitOfMeasurementEnumType::J_kg_K:
		 enumName = "J/kg_K";
		break;
	case UnitOfMeasurementEnumType::Vs:
		 enumName = "Vs";
		break;
	case UnitOfMeasurementEnumType::V_m:
		 enumName = "V/m";
		break;
	case UnitOfMeasurementEnumType::V_Hz:
		 enumName = "V/Hz";
		break;
	case UnitOfMeasurementEnumType::As:
		 enumName = "As";
		break;
	case UnitOfMeasurementEnumType::A_m:
		 enumName = "A/m";
		break;
	case UnitOfMeasurementEnumType::Hz_s:
		 enumName = "Hz/s";
		break;
	case UnitOfMeasurementEnumType::kg_s:
		 enumName = "kg/s";
		break;
	case UnitOfMeasurementEnumType::kg_m_2:
		 enumName = "kg_m^2";
		break;
	case UnitOfMeasurementEnumType::J_Wh:
		 enumName = "J/Wh";
		break;
	case UnitOfMeasurementEnumType::W_s:
		 enumName = "W/s";
		break;
	case UnitOfMeasurementEnumType::ft_3:
		 enumName = "ft^3";
		break;
	case UnitOfMeasurementEnumType::ft_3_h:
		 enumName = "ft^3/h";
		break;
	case UnitOfMeasurementEnumType::ccf:
		 enumName = "ccf";
		break;
	case UnitOfMeasurementEnumType::ccf_h:
		 enumName = "ccf/h";
		break;
	case UnitOfMeasurementEnumType::US_liq_gal:
		 enumName = "US.liq.gal";
		break;
	case UnitOfMeasurementEnumType::US_liq_gal_h:
		 enumName = "US.liq.gal/h";
		break;
	case UnitOfMeasurementEnumType::Imp_gal:
		 enumName = "Imp.gal";
		break;
	case UnitOfMeasurementEnumType::Imp_gal_h:
		 enumName = "Imp.gal/h";
		break;
	case UnitOfMeasurementEnumType::Btu:
		 enumName = "Btu";
		break;
	case UnitOfMeasurementEnumType::Btu_h:
		 enumName = "Btu/h";
		break;
	case UnitOfMeasurementEnumType::Ah:
		 enumName = "Ah";
		break;
	case UnitOfMeasurementEnumType::kg_Wh:
		 enumName = "kg/Wh";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, UnitOfMeasurementEnumType &dst) {
	if (src == "unknown") {
		return UnitOfMeasurementEnumType::unknown;
	}
	if (src == "1") {
		return UnitOfMeasurementEnumType::var_1;
	}
	if (src == "m") {
		return UnitOfMeasurementEnumType::m;
	}
	if (src == "kg") {
		return UnitOfMeasurementEnumType::kg;
	}
	if (src == "s") {
		return UnitOfMeasurementEnumType::s;
	}
	if (src == "A") {
		return UnitOfMeasurementEnumType::A;
	}
	if (src == "K") {
		return UnitOfMeasurementEnumType::K;
	}
	if (src == "mol") {
		return UnitOfMeasurementEnumType::mol;
	}
	if (src == "cd") {
		return UnitOfMeasurementEnumType::cd;
	}
	if (src == "V") {
		return UnitOfMeasurementEnumType::V;
	}
	if (src == "W") {
		return UnitOfMeasurementEnumType::W;
	}
	if (src == "Wh") {
		return UnitOfMeasurementEnumType::Wh;
	}
	if (src == "VA") {
		return UnitOfMeasurementEnumType::VA;
	}
	if (src == "VAh") {
		return UnitOfMeasurementEnumType::VAh;
	}
	if (src == "var") {
		return UnitOfMeasurementEnumType::var;
	}
	if (src == "varh") {
		return UnitOfMeasurementEnumType::varh;
	}
	if (src == "degC") {
		return UnitOfMeasurementEnumType::degC;
	}
	if (src == "degF") {
		return UnitOfMeasurementEnumType::degF;
	}
	if (src == "Lm") {
		return UnitOfMeasurementEnumType::Lm;
	}
	if (src == "lx") {
		return UnitOfMeasurementEnumType::lx;
	}
	if (src == "Ohm") {
		return UnitOfMeasurementEnumType::Ohm;
	}
	if (src == "Hz") {
		return UnitOfMeasurementEnumType::Hz;
	}
	if (src == "dB") {
		return UnitOfMeasurementEnumType::dB;
	}
	if (src == "dBm") {
		return UnitOfMeasurementEnumType::dBm;
	}
	if (src == "pct") {
		return UnitOfMeasurementEnumType::pct;
	}
	if (src == "ppm") {
		return UnitOfMeasurementEnumType::ppm;
	}
	if (src == "l") {
		return UnitOfMeasurementEnumType::l;
	}
	if (src == "l/s") {
		return UnitOfMeasurementEnumType::l_s;
	}
	if (src == "l/h") {
		return UnitOfMeasurementEnumType::l_h;
	}
	if (src == "deg") {
		return UnitOfMeasurementEnumType::deg;
	}
	if (src == "rad") {
		return UnitOfMeasurementEnumType::rad;
	}
	if (src == "rad/s") {
		return UnitOfMeasurementEnumType::rad_s;
	}
	if (src == "sr") {
		return UnitOfMeasurementEnumType::sr;
	}
	if (src == "Gy") {
		return UnitOfMeasurementEnumType::Gy;
	}
	if (src == "Bq") {
		return UnitOfMeasurementEnumType::Bq;
	}
	if (src == "Bq/m^3") {
		return UnitOfMeasurementEnumType::Bq_m_3;
	}
	if (src == "Sv") {
		return UnitOfMeasurementEnumType::Sv;
	}
	if (src == "Rd") {
		return UnitOfMeasurementEnumType::Rd;
	}
	if (src == "C") {
		return UnitOfMeasurementEnumType::C;
	}
	if (src == "F") {
		return UnitOfMeasurementEnumType::F;
	}
	if (src == "H") {
		return UnitOfMeasurementEnumType::H;
	}
	if (src == "J") {
		return UnitOfMeasurementEnumType::J;
	}
	if (src == "N") {
		return UnitOfMeasurementEnumType::N;
	}
	if (src == "N_m") {
		return UnitOfMeasurementEnumType::N_m;
	}
	if (src == "N_s") {
		return UnitOfMeasurementEnumType::N_s;
	}
	if (src == "Wb") {
		return UnitOfMeasurementEnumType::Wb;
	}
	if (src == "T") {
		return UnitOfMeasurementEnumType::T;
	}
	if (src == "Pa") {
		return UnitOfMeasurementEnumType::Pa;
	}
	if (src == "bar") {
		return UnitOfMeasurementEnumType::bar;
	}
	if (src == "atm") {
		return UnitOfMeasurementEnumType::atm;
	}
	if (src == "psi") {
		return UnitOfMeasurementEnumType::psi;
	}
	if (src == "mmHg") {
		return UnitOfMeasurementEnumType::mmHg;
	}
	if (src == "m^2") {
		return UnitOfMeasurementEnumType::m_2;
	}
	if (src == "m^3") {
		return UnitOfMeasurementEnumType::m_3;
	}
	if (src == "m^3/h") {
		return UnitOfMeasurementEnumType::m_3_h;
	}
	if (src == "m/s") {
		return UnitOfMeasurementEnumType::m_s;
	}
	if (src == "m/s^2") {
		return UnitOfMeasurementEnumType::m_s_2;
	}
	if (src == "m^3/s") {
		return UnitOfMeasurementEnumType::m_3_s;
	}
	if (src == "m/m^3") {
		return UnitOfMeasurementEnumType::m_m_3;
	}
	if (src == "kg/m^3") {
		return UnitOfMeasurementEnumType::kg_m_3;
	}
	if (src == "kg_m") {
		return UnitOfMeasurementEnumType::kg_m;
	}
	if (src == "m^2/s") {
		return UnitOfMeasurementEnumType::m_2_s;
	}
	if (src == "W/m_K") {
		return UnitOfMeasurementEnumType::W_m_K;
	}
	if (src == "J/K") {
		return UnitOfMeasurementEnumType::J_K;
	}
	if (src == "1/s") {
		return UnitOfMeasurementEnumType::var_1_s;
	}
	if (src == "W/m^2") {
		return UnitOfMeasurementEnumType::W_m_2;
	}
	if (src == "J/m^2") {
		return UnitOfMeasurementEnumType::J_m_2;
	}
	if (src == "S") {
		return UnitOfMeasurementEnumType::S;
	}
	if (src == "S/m") {
		return UnitOfMeasurementEnumType::S_m;
	}
	if (src == "K/s") {
		return UnitOfMeasurementEnumType::K_s;
	}
	if (src == "Pa/s") {
		return UnitOfMeasurementEnumType::Pa_s;
	}
	if (src == "J/kg_K") {
		return UnitOfMeasurementEnumType::J_kg_K;
	}
	if (src == "Vs") {
		return UnitOfMeasurementEnumType::Vs;
	}
	if (src == "V/m") {
		return UnitOfMeasurementEnumType::V_m;
	}
	if (src == "V/Hz") {
		return UnitOfMeasurementEnumType::V_Hz;
	}
	if (src == "As") {
		return UnitOfMeasurementEnumType::As;
	}
	if (src == "A/m") {
		return UnitOfMeasurementEnumType::A_m;
	}
	if (src == "Hz/s") {
		return UnitOfMeasurementEnumType::Hz_s;
	}
	if (src == "kg/s") {
		return UnitOfMeasurementEnumType::kg_s;
	}
	if (src == "kg_m^2") {
		return UnitOfMeasurementEnumType::kg_m_2;
	}
	if (src == "J/Wh") {
		return UnitOfMeasurementEnumType::J_Wh;
	}
	if (src == "W/s") {
		return UnitOfMeasurementEnumType::W_s;
	}
	if (src == "ft^3") {
		return UnitOfMeasurementEnumType::ft_3;
	}
	if (src == "ft^3/h") {
		return UnitOfMeasurementEnumType::ft_3_h;
	}
	if (src == "ccf") {
		return UnitOfMeasurementEnumType::ccf;
	}
	if (src == "ccf/h") {
		return UnitOfMeasurementEnumType::ccf_h;
	}
	if (src == "US.liq.gal") {
		return UnitOfMeasurementEnumType::US_liq_gal;
	}
	if (src == "US.liq.gal/h") {
		return UnitOfMeasurementEnumType::US_liq_gal_h;
	}
	if (src == "Imp.gal") {
		return UnitOfMeasurementEnumType::Imp_gal;
	}
	if (src == "Imp.gal/h") {
		return UnitOfMeasurementEnumType::Imp_gal_h;
	}
	if (src == "Btu") {
		return UnitOfMeasurementEnumType::Btu;
	}
	if (src == "Btu/h") {
		return UnitOfMeasurementEnumType::Btu_h;
	}
	if (src == "Ah") {
		return UnitOfMeasurementEnumType::Ah;
	}
	if (src == "kg/Wh") {
		return UnitOfMeasurementEnumType::kg_Wh;
	}
	 return UnitOfMeasurementEnumType::kg_Wh;
}
bool convertToJson(const CurrencyEnumType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case CurrencyEnumType::AED:
		 enumName = "AED";
		break;
	case CurrencyEnumType::AFN:
		 enumName = "AFN";
		break;
	case CurrencyEnumType::ALL:
		 enumName = "ALL";
		break;
	case CurrencyEnumType::AMD:
		 enumName = "AMD";
		break;
	case CurrencyEnumType::ANG:
		 enumName = "ANG";
		break;
	case CurrencyEnumType::AOA:
		 enumName = "AOA";
		break;
	case CurrencyEnumType::ARS:
		 enumName = "ARS";
		break;
	case CurrencyEnumType::AUD:
		 enumName = "AUD";
		break;
	case CurrencyEnumType::AWG:
		 enumName = "AWG";
		break;
	case CurrencyEnumType::AZN:
		 enumName = "AZN";
		break;
	case CurrencyEnumType::BAM:
		 enumName = "BAM";
		break;
	case CurrencyEnumType::BBD:
		 enumName = "BBD";
		break;
	case CurrencyEnumType::BDT:
		 enumName = "BDT";
		break;
	case CurrencyEnumType::BGN:
		 enumName = "BGN";
		break;
	case CurrencyEnumType::BHD:
		 enumName = "BHD";
		break;
	case CurrencyEnumType::BIF:
		 enumName = "BIF";
		break;
	case CurrencyEnumType::BMD:
		 enumName = "BMD";
		break;
	case CurrencyEnumType::BND:
		 enumName = "BND";
		break;
	case CurrencyEnumType::BOB:
		 enumName = "BOB";
		break;
	case CurrencyEnumType::BOV:
		 enumName = "BOV";
		break;
	case CurrencyEnumType::BRL:
		 enumName = "BRL";
		break;
	case CurrencyEnumType::BSD:
		 enumName = "BSD";
		break;
	case CurrencyEnumType::BTN:
		 enumName = "BTN";
		break;
	case CurrencyEnumType::BWP:
		 enumName = "BWP";
		break;
	case CurrencyEnumType::BYR:
		 enumName = "BYR";
		break;
	case CurrencyEnumType::BZD:
		 enumName = "BZD";
		break;
	case CurrencyEnumType::CAD:
		 enumName = "CAD";
		break;
	case CurrencyEnumType::CDF:
		 enumName = "CDF";
		break;
	case CurrencyEnumType::CHE:
		 enumName = "CHE";
		break;
	case CurrencyEnumType::CHF:
		 enumName = "CHF";
		break;
	case CurrencyEnumType::CHW:
		 enumName = "CHW";
		break;
	case CurrencyEnumType::CLF:
		 enumName = "CLF";
		break;
	case CurrencyEnumType::CLP:
		 enumName = "CLP";
		break;
	case CurrencyEnumType::CNY:
		 enumName = "CNY";
		break;
	case CurrencyEnumType::COP:
		 enumName = "COP";
		break;
	case CurrencyEnumType::COU:
		 enumName = "COU";
		break;
	case CurrencyEnumType::CRC:
		 enumName = "CRC";
		break;
	case CurrencyEnumType::CUC:
		 enumName = "CUC";
		break;
	case CurrencyEnumType::CUP:
		 enumName = "CUP";
		break;
	case CurrencyEnumType::CVE:
		 enumName = "CVE";
		break;
	case CurrencyEnumType::CZK:
		 enumName = "CZK";
		break;
	case CurrencyEnumType::DJF:
		 enumName = "DJF";
		break;
	case CurrencyEnumType::DKK:
		 enumName = "DKK";
		break;
	case CurrencyEnumType::DOP:
		 enumName = "DOP";
		break;
	case CurrencyEnumType::DZD:
		 enumName = "DZD";
		break;
	case CurrencyEnumType::EGP:
		 enumName = "EGP";
		break;
	case CurrencyEnumType::ERN:
		 enumName = "ERN";
		break;
	case CurrencyEnumType::ETB:
		 enumName = "ETB";
		break;
	case CurrencyEnumType::EUR:
		 enumName = "EUR";
		break;
	case CurrencyEnumType::FJD:
		 enumName = "FJD";
		break;
	case CurrencyEnumType::FKP:
		 enumName = "FKP";
		break;
	case CurrencyEnumType::GBP:
		 enumName = "GBP";
		break;
	case CurrencyEnumType::GEL:
		 enumName = "GEL";
		break;
	case CurrencyEnumType::GHS:
		 enumName = "GHS";
		break;
	case CurrencyEnumType::GIP:
		 enumName = "GIP";
		break;
	case CurrencyEnumType::GMD:
		 enumName = "GMD";
		break;
	case CurrencyEnumType::GNF:
		 enumName = "GNF";
		break;
	case CurrencyEnumType::GTQ:
		 enumName = "GTQ";
		break;
	case CurrencyEnumType::GYD:
		 enumName = "GYD";
		break;
	case CurrencyEnumType::HKD:
		 enumName = "HKD";
		break;
	case CurrencyEnumType::HNL:
		 enumName = "HNL";
		break;
	case CurrencyEnumType::HRK:
		 enumName = "HRK";
		break;
	case CurrencyEnumType::HTG:
		 enumName = "HTG";
		break;
	case CurrencyEnumType::HUF:
		 enumName = "HUF";
		break;
	case CurrencyEnumType::IDR:
		 enumName = "IDR";
		break;
	case CurrencyEnumType::ILS:
		 enumName = "ILS";
		break;
	case CurrencyEnumType::INR:
		 enumName = "INR";
		break;
	case CurrencyEnumType::IQD:
		 enumName = "IQD";
		break;
	case CurrencyEnumType::IRR:
		 enumName = "IRR";
		break;
	case CurrencyEnumType::ISK:
		 enumName = "ISK";
		break;
	case CurrencyEnumType::JMD:
		 enumName = "JMD";
		break;
	case CurrencyEnumType::JOD:
		 enumName = "JOD";
		break;
	case CurrencyEnumType::JPY:
		 enumName = "JPY";
		break;
	case CurrencyEnumType::KES:
		 enumName = "KES";
		break;
	case CurrencyEnumType::KGS:
		 enumName = "KGS";
		break;
	case CurrencyEnumType::KHR:
		 enumName = "KHR";
		break;
	case CurrencyEnumType::KMF:
		 enumName = "KMF";
		break;
	case CurrencyEnumType::KPW:
		 enumName = "KPW";
		break;
	case CurrencyEnumType::KRW:
		 enumName = "KRW";
		break;
	case CurrencyEnumType::KWD:
		 enumName = "KWD";
		break;
	case CurrencyEnumType::KYD:
		 enumName = "KYD";
		break;
	case CurrencyEnumType::KZT:
		 enumName = "KZT";
		break;
	case CurrencyEnumType::LAK:
		 enumName = "LAK";
		break;
	case CurrencyEnumType::LBP:
		 enumName = "LBP";
		break;
	case CurrencyEnumType::LKR:
		 enumName = "LKR";
		break;
	case CurrencyEnumType::LRD:
		 enumName = "LRD";
		break;
	case CurrencyEnumType::LSL:
		 enumName = "LSL";
		break;
	case CurrencyEnumType::LYD:
		 enumName = "LYD";
		break;
	case CurrencyEnumType::MAD:
		 enumName = "MAD";
		break;
	case CurrencyEnumType::MDL:
		 enumName = "MDL";
		break;
	case CurrencyEnumType::MGA:
		 enumName = "MGA";
		break;
	case CurrencyEnumType::MKD:
		 enumName = "MKD";
		break;
	case CurrencyEnumType::MMK:
		 enumName = "MMK";
		break;
	case CurrencyEnumType::MNT:
		 enumName = "MNT";
		break;
	case CurrencyEnumType::MOP:
		 enumName = "MOP";
		break;
	case CurrencyEnumType::MRO:
		 enumName = "MRO";
		break;
	case CurrencyEnumType::MUR:
		 enumName = "MUR";
		break;
	case CurrencyEnumType::MVR:
		 enumName = "MVR";
		break;
	case CurrencyEnumType::MWK:
		 enumName = "MWK";
		break;
	case CurrencyEnumType::MXN:
		 enumName = "MXN";
		break;
	case CurrencyEnumType::MXV:
		 enumName = "MXV";
		break;
	case CurrencyEnumType::MYR:
		 enumName = "MYR";
		break;
	case CurrencyEnumType::MZN:
		 enumName = "MZN";
		break;
	case CurrencyEnumType::NAD:
		 enumName = "NAD";
		break;
	case CurrencyEnumType::NGN:
		 enumName = "NGN";
		break;
	case CurrencyEnumType::NIO:
		 enumName = "NIO";
		break;
	case CurrencyEnumType::NOK:
		 enumName = "NOK";
		break;
	case CurrencyEnumType::NPR:
		 enumName = "NPR";
		break;
	case CurrencyEnumType::NZD:
		 enumName = "NZD";
		break;
	case CurrencyEnumType::OMR:
		 enumName = "OMR";
		break;
	case CurrencyEnumType::PAB:
		 enumName = "PAB";
		break;
	case CurrencyEnumType::PEN:
		 enumName = "PEN";
		break;
	case CurrencyEnumType::PGK:
		 enumName = "PGK";
		break;
	case CurrencyEnumType::PHP:
		 enumName = "PHP";
		break;
	case CurrencyEnumType::PKR:
		 enumName = "PKR";
		break;
	case CurrencyEnumType::PLN:
		 enumName = "PLN";
		break;
	case CurrencyEnumType::PYG:
		 enumName = "PYG";
		break;
	case CurrencyEnumType::QAR:
		 enumName = "QAR";
		break;
	case CurrencyEnumType::RON:
		 enumName = "RON";
		break;
	case CurrencyEnumType::RSD:
		 enumName = "RSD";
		break;
	case CurrencyEnumType::RUB:
		 enumName = "RUB";
		break;
	case CurrencyEnumType::RWF:
		 enumName = "RWF";
		break;
	case CurrencyEnumType::SAR:
		 enumName = "SAR";
		break;
	case CurrencyEnumType::SBD:
		 enumName = "SBD";
		break;
	case CurrencyEnumType::SCR:
		 enumName = "SCR";
		break;
	case CurrencyEnumType::SDG:
		 enumName = "SDG";
		break;
	case CurrencyEnumType::SEK:
		 enumName = "SEK";
		break;
	case CurrencyEnumType::SGD:
		 enumName = "SGD";
		break;
	case CurrencyEnumType::SHP:
		 enumName = "SHP";
		break;
	case CurrencyEnumType::SLL:
		 enumName = "SLL";
		break;
	case CurrencyEnumType::SOS:
		 enumName = "SOS";
		break;
	case CurrencyEnumType::SRD:
		 enumName = "SRD";
		break;
	case CurrencyEnumType::SSP:
		 enumName = "SSP";
		break;
	case CurrencyEnumType::STD:
		 enumName = "STD";
		break;
	case CurrencyEnumType::SVC:
		 enumName = "SVC";
		break;
	case CurrencyEnumType::SYP:
		 enumName = "SYP";
		break;
	case CurrencyEnumType::SZL:
		 enumName = "SZL";
		break;
	case CurrencyEnumType::THB:
		 enumName = "THB";
		break;
	case CurrencyEnumType::TJS:
		 enumName = "TJS";
		break;
	case CurrencyEnumType::TMT:
		 enumName = "TMT";
		break;
	case CurrencyEnumType::TND:
		 enumName = "TND";
		break;
	case CurrencyEnumType::TOP:
		 enumName = "TOP";
		break;
	case CurrencyEnumType::TRY:
		 enumName = "TRY";
		break;
	case CurrencyEnumType::TTD:
		 enumName = "TTD";
		break;
	case CurrencyEnumType::TWD:
		 enumName = "TWD";
		break;
	case CurrencyEnumType::TZS:
		 enumName = "TZS";
		break;
	case CurrencyEnumType::UAH:
		 enumName = "UAH";
		break;
	case CurrencyEnumType::UGX:
		 enumName = "UGX";
		break;
	case CurrencyEnumType::USD:
		 enumName = "USD";
		break;
	case CurrencyEnumType::USN:
		 enumName = "USN";
		break;
	case CurrencyEnumType::UYI:
		 enumName = "UYI";
		break;
	case CurrencyEnumType::UYU:
		 enumName = "UYU";
		break;
	case CurrencyEnumType::UZS:
		 enumName = "UZS";
		break;
	case CurrencyEnumType::VEF:
		 enumName = "VEF";
		break;
	case CurrencyEnumType::VND:
		 enumName = "VND";
		break;
	case CurrencyEnumType::VUV:
		 enumName = "VUV";
		break;
	case CurrencyEnumType::WST:
		 enumName = "WST";
		break;
	case CurrencyEnumType::XAF:
		 enumName = "XAF";
		break;
	case CurrencyEnumType::XAG:
		 enumName = "XAG";
		break;
	case CurrencyEnumType::XAU:
		 enumName = "XAU";
		break;
	case CurrencyEnumType::XBA:
		 enumName = "XBA";
		break;
	case CurrencyEnumType::XBB:
		 enumName = "XBB";
		break;
	case CurrencyEnumType::XBC:
		 enumName = "XBC";
		break;
	case CurrencyEnumType::XBD:
		 enumName = "XBD";
		break;
	case CurrencyEnumType::XCD:
		 enumName = "XCD";
		break;
	case CurrencyEnumType::XDR:
		 enumName = "XDR";
		break;
	case CurrencyEnumType::XOF:
		 enumName = "XOF";
		break;
	case CurrencyEnumType::XPD:
		 enumName = "XPD";
		break;
	case CurrencyEnumType::XPF:
		 enumName = "XPF";
		break;
	case CurrencyEnumType::XPT:
		 enumName = "XPT";
		break;
	case CurrencyEnumType::XSU:
		 enumName = "XSU";
		break;
	case CurrencyEnumType::XTS:
		 enumName = "XTS";
		break;
	case CurrencyEnumType::XUA:
		 enumName = "XUA";
		break;
	case CurrencyEnumType::XXX:
		 enumName = "XXX";
		break;
	case CurrencyEnumType::YER:
		 enumName = "YER";
		break;
	case CurrencyEnumType::ZAR:
		 enumName = "ZAR";
		break;
	case CurrencyEnumType::ZMW:
		 enumName = "ZMW";
		break;
	case CurrencyEnumType::ZWL:
		 enumName = "ZWL";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, CurrencyEnumType &dst) {
	if (src == "AED") {
		return CurrencyEnumType::AED;
	}
	if (src == "AFN") {
		return CurrencyEnumType::AFN;
	}
	if (src == "ALL") {
		return CurrencyEnumType::ALL;
	}
	if (src == "AMD") {
		return CurrencyEnumType::AMD;
	}
	if (src == "ANG") {
		return CurrencyEnumType::ANG;
	}
	if (src == "AOA") {
		return CurrencyEnumType::AOA;
	}
	if (src == "ARS") {
		return CurrencyEnumType::ARS;
	}
	if (src == "AUD") {
		return CurrencyEnumType::AUD;
	}
	if (src == "AWG") {
		return CurrencyEnumType::AWG;
	}
	if (src == "AZN") {
		return CurrencyEnumType::AZN;
	}
	if (src == "BAM") {
		return CurrencyEnumType::BAM;
	}
	if (src == "BBD") {
		return CurrencyEnumType::BBD;
	}
	if (src == "BDT") {
		return CurrencyEnumType::BDT;
	}
	if (src == "BGN") {
		return CurrencyEnumType::BGN;
	}
	if (src == "BHD") {
		return CurrencyEnumType::BHD;
	}
	if (src == "BIF") {
		return CurrencyEnumType::BIF;
	}
	if (src == "BMD") {
		return CurrencyEnumType::BMD;
	}
	if (src == "BND") {
		return CurrencyEnumType::BND;
	}
	if (src == "BOB") {
		return CurrencyEnumType::BOB;
	}
	if (src == "BOV") {
		return CurrencyEnumType::BOV;
	}
	if (src == "BRL") {
		return CurrencyEnumType::BRL;
	}
	if (src == "BSD") {
		return CurrencyEnumType::BSD;
	}
	if (src == "BTN") {
		return CurrencyEnumType::BTN;
	}
	if (src == "BWP") {
		return CurrencyEnumType::BWP;
	}
	if (src == "BYR") {
		return CurrencyEnumType::BYR;
	}
	if (src == "BZD") {
		return CurrencyEnumType::BZD;
	}
	if (src == "CAD") {
		return CurrencyEnumType::CAD;
	}
	if (src == "CDF") {
		return CurrencyEnumType::CDF;
	}
	if (src == "CHE") {
		return CurrencyEnumType::CHE;
	}
	if (src == "CHF") {
		return CurrencyEnumType::CHF;
	}
	if (src == "CHW") {
		return CurrencyEnumType::CHW;
	}
	if (src == "CLF") {
		return CurrencyEnumType::CLF;
	}
	if (src == "CLP") {
		return CurrencyEnumType::CLP;
	}
	if (src == "CNY") {
		return CurrencyEnumType::CNY;
	}
	if (src == "COP") {
		return CurrencyEnumType::COP;
	}
	if (src == "COU") {
		return CurrencyEnumType::COU;
	}
	if (src == "CRC") {
		return CurrencyEnumType::CRC;
	}
	if (src == "CUC") {
		return CurrencyEnumType::CUC;
	}
	if (src == "CUP") {
		return CurrencyEnumType::CUP;
	}
	if (src == "CVE") {
		return CurrencyEnumType::CVE;
	}
	if (src == "CZK") {
		return CurrencyEnumType::CZK;
	}
	if (src == "DJF") {
		return CurrencyEnumType::DJF;
	}
	if (src == "DKK") {
		return CurrencyEnumType::DKK;
	}
	if (src == "DOP") {
		return CurrencyEnumType::DOP;
	}
	if (src == "DZD") {
		return CurrencyEnumType::DZD;
	}
	if (src == "EGP") {
		return CurrencyEnumType::EGP;
	}
	if (src == "ERN") {
		return CurrencyEnumType::ERN;
	}
	if (src == "ETB") {
		return CurrencyEnumType::ETB;
	}
	if (src == "EUR") {
		return CurrencyEnumType::EUR;
	}
	if (src == "FJD") {
		return CurrencyEnumType::FJD;
	}
	if (src == "FKP") {
		return CurrencyEnumType::FKP;
	}
	if (src == "GBP") {
		return CurrencyEnumType::GBP;
	}
	if (src == "GEL") {
		return CurrencyEnumType::GEL;
	}
	if (src == "GHS") {
		return CurrencyEnumType::GHS;
	}
	if (src == "GIP") {
		return CurrencyEnumType::GIP;
	}
	if (src == "GMD") {
		return CurrencyEnumType::GMD;
	}
	if (src == "GNF") {
		return CurrencyEnumType::GNF;
	}
	if (src == "GTQ") {
		return CurrencyEnumType::GTQ;
	}
	if (src == "GYD") {
		return CurrencyEnumType::GYD;
	}
	if (src == "HKD") {
		return CurrencyEnumType::HKD;
	}
	if (src == "HNL") {
		return CurrencyEnumType::HNL;
	}
	if (src == "HRK") {
		return CurrencyEnumType::HRK;
	}
	if (src == "HTG") {
		return CurrencyEnumType::HTG;
	}
	if (src == "HUF") {
		return CurrencyEnumType::HUF;
	}
	if (src == "IDR") {
		return CurrencyEnumType::IDR;
	}
	if (src == "ILS") {
		return CurrencyEnumType::ILS;
	}
	if (src == "INR") {
		return CurrencyEnumType::INR;
	}
	if (src == "IQD") {
		return CurrencyEnumType::IQD;
	}
	if (src == "IRR") {
		return CurrencyEnumType::IRR;
	}
	if (src == "ISK") {
		return CurrencyEnumType::ISK;
	}
	if (src == "JMD") {
		return CurrencyEnumType::JMD;
	}
	if (src == "JOD") {
		return CurrencyEnumType::JOD;
	}
	if (src == "JPY") {
		return CurrencyEnumType::JPY;
	}
	if (src == "KES") {
		return CurrencyEnumType::KES;
	}
	if (src == "KGS") {
		return CurrencyEnumType::KGS;
	}
	if (src == "KHR") {
		return CurrencyEnumType::KHR;
	}
	if (src == "KMF") {
		return CurrencyEnumType::KMF;
	}
	if (src == "KPW") {
		return CurrencyEnumType::KPW;
	}
	if (src == "KRW") {
		return CurrencyEnumType::KRW;
	}
	if (src == "KWD") {
		return CurrencyEnumType::KWD;
	}
	if (src == "KYD") {
		return CurrencyEnumType::KYD;
	}
	if (src == "KZT") {
		return CurrencyEnumType::KZT;
	}
	if (src == "LAK") {
		return CurrencyEnumType::LAK;
	}
	if (src == "LBP") {
		return CurrencyEnumType::LBP;
	}
	if (src == "LKR") {
		return CurrencyEnumType::LKR;
	}
	if (src == "LRD") {
		return CurrencyEnumType::LRD;
	}
	if (src == "LSL") {
		return CurrencyEnumType::LSL;
	}
	if (src == "LYD") {
		return CurrencyEnumType::LYD;
	}
	if (src == "MAD") {
		return CurrencyEnumType::MAD;
	}
	if (src == "MDL") {
		return CurrencyEnumType::MDL;
	}
	if (src == "MGA") {
		return CurrencyEnumType::MGA;
	}
	if (src == "MKD") {
		return CurrencyEnumType::MKD;
	}
	if (src == "MMK") {
		return CurrencyEnumType::MMK;
	}
	if (src == "MNT") {
		return CurrencyEnumType::MNT;
	}
	if (src == "MOP") {
		return CurrencyEnumType::MOP;
	}
	if (src == "MRO") {
		return CurrencyEnumType::MRO;
	}
	if (src == "MUR") {
		return CurrencyEnumType::MUR;
	}
	if (src == "MVR") {
		return CurrencyEnumType::MVR;
	}
	if (src == "MWK") {
		return CurrencyEnumType::MWK;
	}
	if (src == "MXN") {
		return CurrencyEnumType::MXN;
	}
	if (src == "MXV") {
		return CurrencyEnumType::MXV;
	}
	if (src == "MYR") {
		return CurrencyEnumType::MYR;
	}
	if (src == "MZN") {
		return CurrencyEnumType::MZN;
	}
	if (src == "NAD") {
		return CurrencyEnumType::NAD;
	}
	if (src == "NGN") {
		return CurrencyEnumType::NGN;
	}
	if (src == "NIO") {
		return CurrencyEnumType::NIO;
	}
	if (src == "NOK") {
		return CurrencyEnumType::NOK;
	}
	if (src == "NPR") {
		return CurrencyEnumType::NPR;
	}
	if (src == "NZD") {
		return CurrencyEnumType::NZD;
	}
	if (src == "OMR") {
		return CurrencyEnumType::OMR;
	}
	if (src == "PAB") {
		return CurrencyEnumType::PAB;
	}
	if (src == "PEN") {
		return CurrencyEnumType::PEN;
	}
	if (src == "PGK") {
		return CurrencyEnumType::PGK;
	}
	if (src == "PHP") {
		return CurrencyEnumType::PHP;
	}
	if (src == "PKR") {
		return CurrencyEnumType::PKR;
	}
	if (src == "PLN") {
		return CurrencyEnumType::PLN;
	}
	if (src == "PYG") {
		return CurrencyEnumType::PYG;
	}
	if (src == "QAR") {
		return CurrencyEnumType::QAR;
	}
	if (src == "RON") {
		return CurrencyEnumType::RON;
	}
	if (src == "RSD") {
		return CurrencyEnumType::RSD;
	}
	if (src == "RUB") {
		return CurrencyEnumType::RUB;
	}
	if (src == "RWF") {
		return CurrencyEnumType::RWF;
	}
	if (src == "SAR") {
		return CurrencyEnumType::SAR;
	}
	if (src == "SBD") {
		return CurrencyEnumType::SBD;
	}
	if (src == "SCR") {
		return CurrencyEnumType::SCR;
	}
	if (src == "SDG") {
		return CurrencyEnumType::SDG;
	}
	if (src == "SEK") {
		return CurrencyEnumType::SEK;
	}
	if (src == "SGD") {
		return CurrencyEnumType::SGD;
	}
	if (src == "SHP") {
		return CurrencyEnumType::SHP;
	}
	if (src == "SLL") {
		return CurrencyEnumType::SLL;
	}
	if (src == "SOS") {
		return CurrencyEnumType::SOS;
	}
	if (src == "SRD") {
		return CurrencyEnumType::SRD;
	}
	if (src == "SSP") {
		return CurrencyEnumType::SSP;
	}
	if (src == "STD") {
		return CurrencyEnumType::STD;
	}
	if (src == "SVC") {
		return CurrencyEnumType::SVC;
	}
	if (src == "SYP") {
		return CurrencyEnumType::SYP;
	}
	if (src == "SZL") {
		return CurrencyEnumType::SZL;
	}
	if (src == "THB") {
		return CurrencyEnumType::THB;
	}
	if (src == "TJS") {
		return CurrencyEnumType::TJS;
	}
	if (src == "TMT") {
		return CurrencyEnumType::TMT;
	}
	if (src == "TND") {
		return CurrencyEnumType::TND;
	}
	if (src == "TOP") {
		return CurrencyEnumType::TOP;
	}
	if (src == "TRY") {
		return CurrencyEnumType::TRY;
	}
	if (src == "TTD") {
		return CurrencyEnumType::TTD;
	}
	if (src == "TWD") {
		return CurrencyEnumType::TWD;
	}
	if (src == "TZS") {
		return CurrencyEnumType::TZS;
	}
	if (src == "UAH") {
		return CurrencyEnumType::UAH;
	}
	if (src == "UGX") {
		return CurrencyEnumType::UGX;
	}
	if (src == "USD") {
		return CurrencyEnumType::USD;
	}
	if (src == "USN") {
		return CurrencyEnumType::USN;
	}
	if (src == "UYI") {
		return CurrencyEnumType::UYI;
	}
	if (src == "UYU") {
		return CurrencyEnumType::UYU;
	}
	if (src == "UZS") {
		return CurrencyEnumType::UZS;
	}
	if (src == "VEF") {
		return CurrencyEnumType::VEF;
	}
	if (src == "VND") {
		return CurrencyEnumType::VND;
	}
	if (src == "VUV") {
		return CurrencyEnumType::VUV;
	}
	if (src == "WST") {
		return CurrencyEnumType::WST;
	}
	if (src == "XAF") {
		return CurrencyEnumType::XAF;
	}
	if (src == "XAG") {
		return CurrencyEnumType::XAG;
	}
	if (src == "XAU") {
		return CurrencyEnumType::XAU;
	}
	if (src == "XBA") {
		return CurrencyEnumType::XBA;
	}
	if (src == "XBB") {
		return CurrencyEnumType::XBB;
	}
	if (src == "XBC") {
		return CurrencyEnumType::XBC;
	}
	if (src == "XBD") {
		return CurrencyEnumType::XBD;
	}
	if (src == "XCD") {
		return CurrencyEnumType::XCD;
	}
	if (src == "XDR") {
		return CurrencyEnumType::XDR;
	}
	if (src == "XOF") {
		return CurrencyEnumType::XOF;
	}
	if (src == "XPD") {
		return CurrencyEnumType::XPD;
	}
	if (src == "XPF") {
		return CurrencyEnumType::XPF;
	}
	if (src == "XPT") {
		return CurrencyEnumType::XPT;
	}
	if (src == "XSU") {
		return CurrencyEnumType::XSU;
	}
	if (src == "XTS") {
		return CurrencyEnumType::XTS;
	}
	if (src == "XUA") {
		return CurrencyEnumType::XUA;
	}
	if (src == "XXX") {
		return CurrencyEnumType::XXX;
	}
	if (src == "YER") {
		return CurrencyEnumType::YER;
	}
	if (src == "ZAR") {
		return CurrencyEnumType::ZAR;
	}
	if (src == "ZMW") {
		return CurrencyEnumType::ZMW;
	}
	if (src == "ZWL") {
		return CurrencyEnumType::ZWL;
	}
	 return CurrencyEnumType::ZWL;
}
bool convertToJson(const ScopeTypeEnumType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case ScopeTypeEnumType::ac:
		 enumName = "ac";
		break;
	case ScopeTypeEnumType::acCosPhiGrid:
		 enumName = "acCosPhiGrid";
		break;
	case ScopeTypeEnumType::acCurrentA:
		 enumName = "acCurrentA";
		break;
	case ScopeTypeEnumType::acCurrentB:
		 enumName = "acCurrentB";
		break;
	case ScopeTypeEnumType::acCurrentC:
		 enumName = "acCurrentC";
		break;
	case ScopeTypeEnumType::acFrequencyGrid:
		 enumName = "acFrequencyGrid";
		break;
	case ScopeTypeEnumType::acPowerA:
		 enumName = "acPowerA";
		break;
	case ScopeTypeEnumType::acPowerB:
		 enumName = "acPowerB";
		break;
	case ScopeTypeEnumType::acPowerC:
		 enumName = "acPowerC";
		break;
	case ScopeTypeEnumType::acPowerLimitPct:
		 enumName = "acPowerLimitPct";
		break;
	case ScopeTypeEnumType::acPowerTotal:
		 enumName = "acPowerTotal";
		break;
	case ScopeTypeEnumType::acVoltageA:
		 enumName = "acVoltageA";
		break;
	case ScopeTypeEnumType::acVoltageB:
		 enumName = "acVoltageB";
		break;
	case ScopeTypeEnumType::acVoltageC:
		 enumName = "acVoltageC";
		break;
	case ScopeTypeEnumType::acYieldDay:
		 enumName = "acYieldDay";
		break;
	case ScopeTypeEnumType::acYieldTotal:
		 enumName = "acYieldTotal";
		break;
	case ScopeTypeEnumType::dcCurrent:
		 enumName = "dcCurrent";
		break;
	case ScopeTypeEnumType::dcPower:
		 enumName = "dcPower";
		break;
	case ScopeTypeEnumType::dcString1:
		 enumName = "dcString1";
		break;
	case ScopeTypeEnumType::dcString2:
		 enumName = "dcString2";
		break;
	case ScopeTypeEnumType::dcString3:
		 enumName = "dcString3";
		break;
	case ScopeTypeEnumType::dcString4:
		 enumName = "dcString4";
		break;
	case ScopeTypeEnumType::dcString5:
		 enumName = "dcString5";
		break;
	case ScopeTypeEnumType::dcString6:
		 enumName = "dcString6";
		break;
	case ScopeTypeEnumType::dcTotal:
		 enumName = "dcTotal";
		break;
	case ScopeTypeEnumType::dcVoltage:
		 enumName = "dcVoltage";
		break;
	case ScopeTypeEnumType::dhwTemperature:
		 enumName = "dhwTemperature";
		break;
	case ScopeTypeEnumType::flowTemperature:
		 enumName = "flowTemperature";
		break;
	case ScopeTypeEnumType::outsideAirTemperature:
		 enumName = "outsideAirTemperature";
		break;
	case ScopeTypeEnumType::returnTemperature:
		 enumName = "returnTemperature";
		break;
	case ScopeTypeEnumType::roomAirTemperature:
		 enumName = "roomAirTemperature";
		break;
	case ScopeTypeEnumType::charge:
		 enumName = "charge";
		break;
	case ScopeTypeEnumType::stateOfCharge:
		 enumName = "stateOfCharge";
		break;
	case ScopeTypeEnumType::discharge:
		 enumName = "discharge";
		break;
	case ScopeTypeEnumType::gridConsumption:
		 enumName = "gridConsumption";
		break;
	case ScopeTypeEnumType::gridFeedIn:
		 enumName = "gridFeedIn";
		break;
	case ScopeTypeEnumType::selfConsumption:
		 enumName = "selfConsumption";
		break;
	case ScopeTypeEnumType::overloadProtection:
		 enumName = "overloadProtection";
		break;
	case ScopeTypeEnumType::acPower:
		 enumName = "acPower";
		break;
	case ScopeTypeEnumType::acEnergy:
		 enumName = "acEnergy";
		break;
	case ScopeTypeEnumType::acCurrent:
		 enumName = "acCurrent";
		break;
	case ScopeTypeEnumType::acVoltage:
		 enumName = "acVoltage";
		break;
	case ScopeTypeEnumType::batteryControl:
		 enumName = "batteryControl";
		break;
	case ScopeTypeEnumType::simpleIncentiveTable:
		 enumName = "simpleIncentiveTable";
		break;
	case ScopeTypeEnumType::stateOfHealth:
		 enumName = "stateOfHealth";
		break;
	case ScopeTypeEnumType::travelRange:
		 enumName = "travelRange";
		break;
	case ScopeTypeEnumType::nominalEnergyCapacity:
		 enumName = "nominalEnergyCapacity";
		break;
	case ScopeTypeEnumType::acPowerReal:
		 enumName = "acPowerReal";
		break;
	case ScopeTypeEnumType::acPowerApparent:
		 enumName = "acPowerApparent";
		break;
	case ScopeTypeEnumType::acPowerReactive:
		 enumName = "acPowerReactive";
		break;
	case ScopeTypeEnumType::acYieldMonth:
		 enumName = "acYieldMonth";
		break;
	case ScopeTypeEnumType::acYieldYear:
		 enumName = "acYieldYear";
		break;
	case ScopeTypeEnumType::acFrequency:
		 enumName = "acFrequency";
		break;
	case ScopeTypeEnumType::acCosPhi:
		 enumName = "acCosPhi";
		break;
	case ScopeTypeEnumType::dcEnergy:
		 enumName = "dcEnergy";
		break;
	case ScopeTypeEnumType::insulationResistance:
		 enumName = "insulationResistance";
		break;
	case ScopeTypeEnumType::stateOfEnergy:
		 enumName = "stateOfEnergy";
		break;
	case ScopeTypeEnumType::useableCapacity:
		 enumName = "useableCapacity";
		break;
	case ScopeTypeEnumType::dcChargeEnergy:
		 enumName = "dcChargeEnergy";
		break;
	case ScopeTypeEnumType::dcDischargeEnergy:
		 enumName = "dcDischargeEnergy";
		break;
	case ScopeTypeEnumType::loadCycleCount:
		 enumName = "loadCycleCount";
		break;
	case ScopeTypeEnumType::componentTemperature:
		 enumName = "componentTemperature";
		break;
	case ScopeTypeEnumType::gridLimit:
		 enumName = "gridLimit";
		break;
	case ScopeTypeEnumType::gridLimitFallback:
		 enumName = "gridLimitFallback";
		break;
	case ScopeTypeEnumType::acPowerApparentTotal:
		 enumName = "acPowerApparentTotal";
		break;
	case ScopeTypeEnumType::acPowerReactiveTotal:
		 enumName = "acPowerReactiveTotal";
		break;
	case ScopeTypeEnumType::acCurrentTotal:
		 enumName = "acCurrentTotal";
		break;
	case ScopeTypeEnumType::acEnergyConsumed:
		 enumName = "acEnergyConsumed";
		break;
	case ScopeTypeEnumType::acEnergyProduced:
		 enumName = "acEnergyProduced";
		break;
	case ScopeTypeEnumType::batteryAcPower:
		 enumName = "batteryAcPower";
		break;
	case ScopeTypeEnumType::batteryAcPowerPhaseSpecific:
		 enumName = "batteryAcPowerPhaseSpecific";
		break;
	case ScopeTypeEnumType::batteryDcPower:
		 enumName = "batteryDcPower";
		break;
	case ScopeTypeEnumType::pccPower:
		 enumName = "pccPower";
		break;
	case ScopeTypeEnumType::activePowerLimit:
		 enumName = "activePowerLimit";
		break;
	case ScopeTypeEnumType::activePowerLimitPercentage:
		 enumName = "activePowerLimitPercentage";
		break;
	case ScopeTypeEnumType::simpleCommittedIncentiveTable:
		 enumName = "simpleCommittedIncentiveTable";
		break;
	case ScopeTypeEnumType::simplePreliminaryIncentiveTable:
		 enumName = "simplePreliminaryIncentiveTable";
		break;
	case ScopeTypeEnumType::committedPowerPlan:
		 enumName = "committedPowerPlan";
		break;
	case ScopeTypeEnumType::preliminaryPowerPlan:
		 enumName = "preliminaryPowerPlan";
		break;
	case ScopeTypeEnumType::incentiveTableEnConsWithPoETF:
		 enumName = "incentiveTableEnConsWithPoETF";
		break;
	case ScopeTypeEnumType::incentiveTableEnProdWithPoETF:
		 enumName = "incentiveTableEnProdWithPoETF";
		break;
	case ScopeTypeEnumType::incentiveTableEnConsWithPoE:
		 enumName = "incentiveTableEnConsWithPoE";
		break;
	case ScopeTypeEnumType::incentiveTableEnProdWithPoE:
		 enumName = "incentiveTableEnProdWithPoE";
		break;
	case ScopeTypeEnumType::incentiveTableEnConsWithTF:
		 enumName = "incentiveTableEnConsWithTF";
		break;
	case ScopeTypeEnumType::incentiveTableEnProdWithTF:
		 enumName = "incentiveTableEnProdWithTF";
		break;
	case ScopeTypeEnumType::activePowerForecast:
		 enumName = "activePowerForecast";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, ScopeTypeEnumType &dst) {
	if (src == "ac") {
		return ScopeTypeEnumType::ac;
	}
	if (src == "acCosPhiGrid") {
		return ScopeTypeEnumType::acCosPhiGrid;
	}
	if (src == "acCurrentA") {
		return ScopeTypeEnumType::acCurrentA;
	}
	if (src == "acCurrentB") {
		return ScopeTypeEnumType::acCurrentB;
	}
	if (src == "acCurrentC") {
		return ScopeTypeEnumType::acCurrentC;
	}
	if (src == "acFrequencyGrid") {
		return ScopeTypeEnumType::acFrequencyGrid;
	}
	if (src == "acPowerA") {
		return ScopeTypeEnumType::acPowerA;
	}
	if (src == "acPowerB") {
		return ScopeTypeEnumType::acPowerB;
	}
	if (src == "acPowerC") {
		return ScopeTypeEnumType::acPowerC;
	}
	if (src == "acPowerLimitPct") {
		return ScopeTypeEnumType::acPowerLimitPct;
	}
	if (src == "acPowerTotal") {
		return ScopeTypeEnumType::acPowerTotal;
	}
	if (src == "acVoltageA") {
		return ScopeTypeEnumType::acVoltageA;
	}
	if (src == "acVoltageB") {
		return ScopeTypeEnumType::acVoltageB;
	}
	if (src == "acVoltageC") {
		return ScopeTypeEnumType::acVoltageC;
	}
	if (src == "acYieldDay") {
		return ScopeTypeEnumType::acYieldDay;
	}
	if (src == "acYieldTotal") {
		return ScopeTypeEnumType::acYieldTotal;
	}
	if (src == "dcCurrent") {
		return ScopeTypeEnumType::dcCurrent;
	}
	if (src == "dcPower") {
		return ScopeTypeEnumType::dcPower;
	}
	if (src == "dcString1") {
		return ScopeTypeEnumType::dcString1;
	}
	if (src == "dcString2") {
		return ScopeTypeEnumType::dcString2;
	}
	if (src == "dcString3") {
		return ScopeTypeEnumType::dcString3;
	}
	if (src == "dcString4") {
		return ScopeTypeEnumType::dcString4;
	}
	if (src == "dcString5") {
		return ScopeTypeEnumType::dcString5;
	}
	if (src == "dcString6") {
		return ScopeTypeEnumType::dcString6;
	}
	if (src == "dcTotal") {
		return ScopeTypeEnumType::dcTotal;
	}
	if (src == "dcVoltage") {
		return ScopeTypeEnumType::dcVoltage;
	}
	if (src == "dhwTemperature") {
		return ScopeTypeEnumType::dhwTemperature;
	}
	if (src == "flowTemperature") {
		return ScopeTypeEnumType::flowTemperature;
	}
	if (src == "outsideAirTemperature") {
		return ScopeTypeEnumType::outsideAirTemperature;
	}
	if (src == "returnTemperature") {
		return ScopeTypeEnumType::returnTemperature;
	}
	if (src == "roomAirTemperature") {
		return ScopeTypeEnumType::roomAirTemperature;
	}
	if (src == "charge") {
		return ScopeTypeEnumType::charge;
	}
	if (src == "stateOfCharge") {
		return ScopeTypeEnumType::stateOfCharge;
	}
	if (src == "discharge") {
		return ScopeTypeEnumType::discharge;
	}
	if (src == "gridConsumption") {
		return ScopeTypeEnumType::gridConsumption;
	}
	if (src == "gridFeedIn") {
		return ScopeTypeEnumType::gridFeedIn;
	}
	if (src == "selfConsumption") {
		return ScopeTypeEnumType::selfConsumption;
	}
	if (src == "overloadProtection") {
		return ScopeTypeEnumType::overloadProtection;
	}
	if (src == "acPower") {
		return ScopeTypeEnumType::acPower;
	}
	if (src == "acEnergy") {
		return ScopeTypeEnumType::acEnergy;
	}
	if (src == "acCurrent") {
		return ScopeTypeEnumType::acCurrent;
	}
	if (src == "acVoltage") {
		return ScopeTypeEnumType::acVoltage;
	}
	if (src == "batteryControl") {
		return ScopeTypeEnumType::batteryControl;
	}
	if (src == "simpleIncentiveTable") {
		return ScopeTypeEnumType::simpleIncentiveTable;
	}
	if (src == "stateOfHealth") {
		return ScopeTypeEnumType::stateOfHealth;
	}
	if (src == "travelRange") {
		return ScopeTypeEnumType::travelRange;
	}
	if (src == "nominalEnergyCapacity") {
		return ScopeTypeEnumType::nominalEnergyCapacity;
	}
	if (src == "acPowerReal") {
		return ScopeTypeEnumType::acPowerReal;
	}
	if (src == "acPowerApparent") {
		return ScopeTypeEnumType::acPowerApparent;
	}
	if (src == "acPowerReactive") {
		return ScopeTypeEnumType::acPowerReactive;
	}
	if (src == "acYieldMonth") {
		return ScopeTypeEnumType::acYieldMonth;
	}
	if (src == "acYieldYear") {
		return ScopeTypeEnumType::acYieldYear;
	}
	if (src == "acFrequency") {
		return ScopeTypeEnumType::acFrequency;
	}
	if (src == "acCosPhi") {
		return ScopeTypeEnumType::acCosPhi;
	}
	if (src == "dcEnergy") {
		return ScopeTypeEnumType::dcEnergy;
	}
	if (src == "insulationResistance") {
		return ScopeTypeEnumType::insulationResistance;
	}
	if (src == "stateOfEnergy") {
		return ScopeTypeEnumType::stateOfEnergy;
	}
	if (src == "useableCapacity") {
		return ScopeTypeEnumType::useableCapacity;
	}
	if (src == "dcChargeEnergy") {
		return ScopeTypeEnumType::dcChargeEnergy;
	}
	if (src == "dcDischargeEnergy") {
		return ScopeTypeEnumType::dcDischargeEnergy;
	}
	if (src == "loadCycleCount") {
		return ScopeTypeEnumType::loadCycleCount;
	}
	if (src == "componentTemperature") {
		return ScopeTypeEnumType::componentTemperature;
	}
	if (src == "gridLimit") {
		return ScopeTypeEnumType::gridLimit;
	}
	if (src == "gridLimitFallback") {
		return ScopeTypeEnumType::gridLimitFallback;
	}
	if (src == "acPowerApparentTotal") {
		return ScopeTypeEnumType::acPowerApparentTotal;
	}
	if (src == "acPowerReactiveTotal") {
		return ScopeTypeEnumType::acPowerReactiveTotal;
	}
	if (src == "acCurrentTotal") {
		return ScopeTypeEnumType::acCurrentTotal;
	}
	if (src == "acEnergyConsumed") {
		return ScopeTypeEnumType::acEnergyConsumed;
	}
	if (src == "acEnergyProduced") {
		return ScopeTypeEnumType::acEnergyProduced;
	}
	if (src == "batteryAcPower") {
		return ScopeTypeEnumType::batteryAcPower;
	}
	if (src == "batteryAcPowerPhaseSpecific") {
		return ScopeTypeEnumType::batteryAcPowerPhaseSpecific;
	}
	if (src == "batteryDcPower") {
		return ScopeTypeEnumType::batteryDcPower;
	}
	if (src == "pccPower") {
		return ScopeTypeEnumType::pccPower;
	}
	if (src == "activePowerLimit") {
		return ScopeTypeEnumType::activePowerLimit;
	}
	if (src == "activePowerLimitPercentage") {
		return ScopeTypeEnumType::activePowerLimitPercentage;
	}
	if (src == "simpleCommittedIncentiveTable") {
		return ScopeTypeEnumType::simpleCommittedIncentiveTable;
	}
	if (src == "simplePreliminaryIncentiveTable") {
		return ScopeTypeEnumType::simplePreliminaryIncentiveTable;
	}
	if (src == "committedPowerPlan") {
		return ScopeTypeEnumType::committedPowerPlan;
	}
	if (src == "preliminaryPowerPlan") {
		return ScopeTypeEnumType::preliminaryPowerPlan;
	}
	if (src == "incentiveTableEnConsWithPoETF") {
		return ScopeTypeEnumType::incentiveTableEnConsWithPoETF;
	}
	if (src == "incentiveTableEnProdWithPoETF") {
		return ScopeTypeEnumType::incentiveTableEnProdWithPoETF;
	}
	if (src == "incentiveTableEnConsWithPoE") {
		return ScopeTypeEnumType::incentiveTableEnConsWithPoE;
	}
	if (src == "incentiveTableEnProdWithPoE") {
		return ScopeTypeEnumType::incentiveTableEnProdWithPoE;
	}
	if (src == "incentiveTableEnConsWithTF") {
		return ScopeTypeEnumType::incentiveTableEnConsWithTF;
	}
	if (src == "incentiveTableEnProdWithTF") {
		return ScopeTypeEnumType::incentiveTableEnProdWithTF;
	}
	if (src == "activePowerForecast") {
		return ScopeTypeEnumType::activePowerForecast;
	}
	 return ScopeTypeEnumType::activePowerForecast;
}
bool convertToJson(const RoleType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case RoleType::client:
		 enumName = "client";
		break;
	case RoleType::server:
		 enumName = "server";
		break;
	case RoleType::special:
		 enumName = "special";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, RoleType &dst) {
	if (src == "client") {
		return RoleType::client;
	}
	if (src == "server") {
		return RoleType::server;
	}
	if (src == "special") {
		return RoleType::special;
	}
	 return RoleType::special;
}
bool convertToJson(const DeviceTypeEnumType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case DeviceTypeEnumType::Dishwasher:
		 enumName = "Dishwasher";
		break;
	case DeviceTypeEnumType::Dryer:
		 enumName = "Dryer";
		break;
	case DeviceTypeEnumType::EnvironmentSensor:
		 enumName = "EnvironmentSensor";
		break;
	case DeviceTypeEnumType::Generic:
		 enumName = "Generic";
		break;
	case DeviceTypeEnumType::HeatGenerationSystem:
		 enumName = "HeatGenerationSystem";
		break;
	case DeviceTypeEnumType::HeatSinkSystem:
		 enumName = "HeatSinkSystem";
		break;
	case DeviceTypeEnumType::HeatStorageSystem:
		 enumName = "HeatStorageSystem";
		break;
	case DeviceTypeEnumType::HVACController:
		 enumName = "HVACController";
		break;
	case DeviceTypeEnumType::SubMeter:
		 enumName = "SubMeter";
		break;
	case DeviceTypeEnumType::Washer:
		 enumName = "Washer";
		break;
	case DeviceTypeEnumType::ElectricitySupplySystem:
		 enumName = "ElectricitySupplySystem";
		break;
	case DeviceTypeEnumType::EnergyManagementSystem:
		 enumName = "EnergyManagementSystem";
		break;
	case DeviceTypeEnumType::Inverter:
		 enumName = "Inverter";
		break;
	case DeviceTypeEnumType::ChargingStation:
		 enumName = "ChargingStation";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, DeviceTypeEnumType &dst) {
	if (src == "Dishwasher") {
		return DeviceTypeEnumType::Dishwasher;
	}
	if (src == "Dryer") {
		return DeviceTypeEnumType::Dryer;
	}
	if (src == "EnvironmentSensor") {
		return DeviceTypeEnumType::EnvironmentSensor;
	}
	if (src == "Generic") {
		return DeviceTypeEnumType::Generic;
	}
	if (src == "HeatGenerationSystem") {
		return DeviceTypeEnumType::HeatGenerationSystem;
	}
	if (src == "HeatSinkSystem") {
		return DeviceTypeEnumType::HeatSinkSystem;
	}
	if (src == "HeatStorageSystem") {
		return DeviceTypeEnumType::HeatStorageSystem;
	}
	if (src == "HVACController") {
		return DeviceTypeEnumType::HVACController;
	}
	if (src == "SubMeter") {
		return DeviceTypeEnumType::SubMeter;
	}
	if (src == "Washer") {
		return DeviceTypeEnumType::Washer;
	}
	if (src == "ElectricitySupplySystem") {
		return DeviceTypeEnumType::ElectricitySupplySystem;
	}
	if (src == "EnergyManagementSystem") {
		return DeviceTypeEnumType::EnergyManagementSystem;
	}
	if (src == "Inverter") {
		return DeviceTypeEnumType::Inverter;
	}
	if (src == "ChargingStation") {
		return DeviceTypeEnumType::ChargingStation;
	}
	 return DeviceTypeEnumType::ChargingStation;
}
bool convertToJson(const EntityTypeEnumType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case EntityTypeEnumType::Battery:
		 enumName = "Battery";
		break;
	case EntityTypeEnumType::Compressor:
		 enumName = "Compressor";
		break;
	case EntityTypeEnumType::DeviceInformation:
		 enumName = "DeviceInformation";
		break;
	case EntityTypeEnumType::DHWCircuit:
		 enumName = "DHWCircuit";
		break;
	case EntityTypeEnumType::DHWStorage:
		 enumName = "DHWStorage";
		break;
	case EntityTypeEnumType::Dishwasher:
		 enumName = "Dishwasher";
		break;
	case EntityTypeEnumType::Dryer:
		 enumName = "Dryer";
		break;
	case EntityTypeEnumType::ElectricalImmersionHeater:
		 enumName = "ElectricalImmersionHeater";
		break;
	case EntityTypeEnumType::Fan:
		 enumName = "Fan";
		break;
	case EntityTypeEnumType::GasHeatingAppliance:
		 enumName = "GasHeatingAppliance";
		break;
	case EntityTypeEnumType::Generic:
		 enumName = "Generic";
		break;
	case EntityTypeEnumType::HeatingBufferStorage:
		 enumName = "HeatingBufferStorage";
		break;
	case EntityTypeEnumType::HeatingCircuit:
		 enumName = "HeatingCircuit";
		break;
	case EntityTypeEnumType::HeatingObject:
		 enumName = "HeatingObject";
		break;
	case EntityTypeEnumType::HeatingZone:
		 enumName = "HeatingZone";
		break;
	case EntityTypeEnumType::HeatPumpAppliance:
		 enumName = "HeatPumpAppliance";
		break;
	case EntityTypeEnumType::HeatSinkCircuit:
		 enumName = "HeatSinkCircuit";
		break;
	case EntityTypeEnumType::HeatSourceCircuit:
		 enumName = "HeatSourceCircuit";
		break;
	case EntityTypeEnumType::HeatSourceUnit:
		 enumName = "HeatSourceUnit";
		break;
	case EntityTypeEnumType::HVACController:
		 enumName = "HVACController";
		break;
	case EntityTypeEnumType::HVACRoom:
		 enumName = "HVACRoom";
		break;
	case EntityTypeEnumType::InstantDHWHeater:
		 enumName = "InstantDHWHeater";
		break;
	case EntityTypeEnumType::Inverter:
		 enumName = "Inverter";
		break;
	case EntityTypeEnumType::OilHeatingAppliance:
		 enumName = "OilHeatingAppliance";
		break;
	case EntityTypeEnumType::Pump:
		 enumName = "Pump";
		break;
	case EntityTypeEnumType::RefrigerantCircuit:
		 enumName = "RefrigerantCircuit";
		break;
	case EntityTypeEnumType::SmartEnergyAppliance:
		 enumName = "SmartEnergyAppliance";
		break;
	case EntityTypeEnumType::SolarDHWStorage:
		 enumName = "SolarDHWStorage";
		break;
	case EntityTypeEnumType::SolarThermalCircuit:
		 enumName = "SolarThermalCircuit";
		break;
	case EntityTypeEnumType::SubMeterElectricity:
		 enumName = "SubMeterElectricity";
		break;
	case EntityTypeEnumType::TemperatureSensor:
		 enumName = "TemperatureSensor";
		break;
	case EntityTypeEnumType::Washer:
		 enumName = "Washer";
		break;
	case EntityTypeEnumType::BatterySystem:
		 enumName = "BatterySystem";
		break;
	case EntityTypeEnumType::ElectricityGenerationSystem:
		 enumName = "ElectricityGenerationSystem";
		break;
	case EntityTypeEnumType::ElectricityStorageSystem:
		 enumName = "ElectricityStorageSystem";
		break;
	case EntityTypeEnumType::GridConnectionPointOfPremises:
		 enumName = "GridConnectionPointOfPremises";
		break;
	case EntityTypeEnumType::Household:
		 enumName = "Household";
		break;
	case EntityTypeEnumType::PVSystem:
		 enumName = "PVSystem";
		break;
	case EntityTypeEnumType::EV:
		 enumName = "EV";
		break;
	case EntityTypeEnumType::EVSE:
		 enumName = "EVSE";
		break;
	case EntityTypeEnumType::ChargingOutlet:
		 enumName = "ChargingOutlet";
		break;
	case EntityTypeEnumType::CEM:
		 enumName = "CEM";
		break;
	case EntityTypeEnumType::PV:
		 enumName = "PV";
		break;
	case EntityTypeEnumType::PVESHybrid:
		 enumName = "PVESHybrid";
		break;
	case EntityTypeEnumType::ElectricalStorage:
		 enumName = "ElectricalStorage";
		break;
	case EntityTypeEnumType::PVString:
		 enumName = "PVString";
		break;
	case EntityTypeEnumType::GridGuard:
		 enumName = "GridGuard";
		break;
	case EntityTypeEnumType::ControllableSystem:
		 enumName = "ControllableSystem";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, EntityTypeEnumType &dst) {
	if (src == "Battery") {
		return EntityTypeEnumType::Battery;
	}
	if (src == "Compressor") {
		return EntityTypeEnumType::Compressor;
	}
	if (src == "DeviceInformation") {
		return EntityTypeEnumType::DeviceInformation;
	}
	if (src == "DHWCircuit") {
		return EntityTypeEnumType::DHWCircuit;
	}
	if (src == "DHWStorage") {
		return EntityTypeEnumType::DHWStorage;
	}
	if (src == "Dishwasher") {
		return EntityTypeEnumType::Dishwasher;
	}
	if (src == "Dryer") {
		return EntityTypeEnumType::Dryer;
	}
	if (src == "ElectricalImmersionHeater") {
		return EntityTypeEnumType::ElectricalImmersionHeater;
	}
	if (src == "Fan") {
		return EntityTypeEnumType::Fan;
	}
	if (src == "GasHeatingAppliance") {
		return EntityTypeEnumType::GasHeatingAppliance;
	}
	if (src == "Generic") {
		return EntityTypeEnumType::Generic;
	}
	if (src == "HeatingBufferStorage") {
		return EntityTypeEnumType::HeatingBufferStorage;
	}
	if (src == "HeatingCircuit") {
		return EntityTypeEnumType::HeatingCircuit;
	}
	if (src == "HeatingObject") {
		return EntityTypeEnumType::HeatingObject;
	}
	if (src == "HeatingZone") {
		return EntityTypeEnumType::HeatingZone;
	}
	if (src == "HeatPumpAppliance") {
		return EntityTypeEnumType::HeatPumpAppliance;
	}
	if (src == "HeatSinkCircuit") {
		return EntityTypeEnumType::HeatSinkCircuit;
	}
	if (src == "HeatSourceCircuit") {
		return EntityTypeEnumType::HeatSourceCircuit;
	}
	if (src == "HeatSourceUnit") {
		return EntityTypeEnumType::HeatSourceUnit;
	}
	if (src == "HVACController") {
		return EntityTypeEnumType::HVACController;
	}
	if (src == "HVACRoom") {
		return EntityTypeEnumType::HVACRoom;
	}
	if (src == "InstantDHWHeater") {
		return EntityTypeEnumType::InstantDHWHeater;
	}
	if (src == "Inverter") {
		return EntityTypeEnumType::Inverter;
	}
	if (src == "OilHeatingAppliance") {
		return EntityTypeEnumType::OilHeatingAppliance;
	}
	if (src == "Pump") {
		return EntityTypeEnumType::Pump;
	}
	if (src == "RefrigerantCircuit") {
		return EntityTypeEnumType::RefrigerantCircuit;
	}
	if (src == "SmartEnergyAppliance") {
		return EntityTypeEnumType::SmartEnergyAppliance;
	}
	if (src == "SolarDHWStorage") {
		return EntityTypeEnumType::SolarDHWStorage;
	}
	if (src == "SolarThermalCircuit") {
		return EntityTypeEnumType::SolarThermalCircuit;
	}
	if (src == "SubMeterElectricity") {
		return EntityTypeEnumType::SubMeterElectricity;
	}
	if (src == "TemperatureSensor") {
		return EntityTypeEnumType::TemperatureSensor;
	}
	if (src == "Washer") {
		return EntityTypeEnumType::Washer;
	}
	if (src == "BatterySystem") {
		return EntityTypeEnumType::BatterySystem;
	}
	if (src == "ElectricityGenerationSystem") {
		return EntityTypeEnumType::ElectricityGenerationSystem;
	}
	if (src == "ElectricityStorageSystem") {
		return EntityTypeEnumType::ElectricityStorageSystem;
	}
	if (src == "GridConnectionPointOfPremises") {
		return EntityTypeEnumType::GridConnectionPointOfPremises;
	}
	if (src == "Household") {
		return EntityTypeEnumType::Household;
	}
	if (src == "PVSystem") {
		return EntityTypeEnumType::PVSystem;
	}
	if (src == "EV") {
		return EntityTypeEnumType::EV;
	}
	if (src == "EVSE") {
		return EntityTypeEnumType::EVSE;
	}
	if (src == "ChargingOutlet") {
		return EntityTypeEnumType::ChargingOutlet;
	}
	if (src == "CEM") {
		return EntityTypeEnumType::CEM;
	}
	if (src == "PV") {
		return EntityTypeEnumType::PV;
	}
	if (src == "PVESHybrid") {
		return EntityTypeEnumType::PVESHybrid;
	}
	if (src == "ElectricalStorage") {
		return EntityTypeEnumType::ElectricalStorage;
	}
	if (src == "PVString") {
		return EntityTypeEnumType::PVString;
	}
	if (src == "GridGuard") {
		return EntityTypeEnumType::GridGuard;
	}
	if (src == "ControllableSystem") {
		return EntityTypeEnumType::ControllableSystem;
	}
	 return EntityTypeEnumType::ControllableSystem;
}
bool convertToJson(const FeatureTypeEnumType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case FeatureTypeEnumType::ActuatorLevel:
		 enumName = "ActuatorLevel";
		break;
	case FeatureTypeEnumType::ActuatorSwitch:
		 enumName = "ActuatorSwitch";
		break;
	case FeatureTypeEnumType::Alarm:
		 enumName = "Alarm";
		break;
	case FeatureTypeEnumType::DataTunneling:
		 enumName = "DataTunneling";
		break;
	case FeatureTypeEnumType::DeviceClassification:
		 enumName = "DeviceClassification";
		break;
	case FeatureTypeEnumType::DeviceDiagnosis:
		 enumName = "DeviceDiagnosis";
		break;
	case FeatureTypeEnumType::DirectControl:
		 enumName = "DirectControl";
		break;
	case FeatureTypeEnumType::ElectricalConnection:
		 enumName = "ElectricalConnection";
		break;
	case FeatureTypeEnumType::Generic:
		 enumName = "Generic";
		break;
	case FeatureTypeEnumType::HVAC:
		 enumName = "HVAC";
		break;
	case FeatureTypeEnumType::LoadControl:
		 enumName = "LoadControl";
		break;
	case FeatureTypeEnumType::Measurement:
		 enumName = "Measurement";
		break;
	case FeatureTypeEnumType::Messaging:
		 enumName = "Messaging";
		break;
	case FeatureTypeEnumType::NetworkManagement:
		 enumName = "NetworkManagement";
		break;
	case FeatureTypeEnumType::NodeManagement:
		 enumName = "NodeManagement";
		break;
	case FeatureTypeEnumType::OperatingConstraints:
		 enumName = "OperatingConstraints";
		break;
	case FeatureTypeEnumType::PowerSequences:
		 enumName = "PowerSequences";
		break;
	case FeatureTypeEnumType::Sensing:
		 enumName = "Sensing";
		break;
	case FeatureTypeEnumType::Setpoint:
		 enumName = "Setpoint";
		break;
	case FeatureTypeEnumType::SmartEnergyManagementPs:
		 enumName = "SmartEnergyManagementPs";
		break;
	case FeatureTypeEnumType::TaskManagement:
		 enumName = "TaskManagement";
		break;
	case FeatureTypeEnumType::Threshold:
		 enumName = "Threshold";
		break;
	case FeatureTypeEnumType::TimeInformation:
		 enumName = "TimeInformation";
		break;
	case FeatureTypeEnumType::TimeTable:
		 enumName = "TimeTable";
		break;
	case FeatureTypeEnumType::DeviceConfiguration:
		 enumName = "DeviceConfiguration";
		break;
	case FeatureTypeEnumType::SupplyCondition:
		 enumName = "SupplyCondition";
		break;
	case FeatureTypeEnumType::TimeSeries:
		 enumName = "TimeSeries";
		break;
	case FeatureTypeEnumType::TariffInformation:
		 enumName = "TariffInformation";
		break;
	case FeatureTypeEnumType::IncentiveTable:
		 enumName = "IncentiveTable";
		break;
	case FeatureTypeEnumType::Bill:
		 enumName = "Bill";
		break;
	case FeatureTypeEnumType::Identification:
		 enumName = "Identification";
		break;
	case FeatureTypeEnumType::StateInformation:
		 enumName = "StateInformation";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, FeatureTypeEnumType &dst) {
	if (src == "ActuatorLevel") {
		return FeatureTypeEnumType::ActuatorLevel;
	}
	if (src == "ActuatorSwitch") {
		return FeatureTypeEnumType::ActuatorSwitch;
	}
	if (src == "Alarm") {
		return FeatureTypeEnumType::Alarm;
	}
	if (src == "DataTunneling") {
		return FeatureTypeEnumType::DataTunneling;
	}
	if (src == "DeviceClassification") {
		return FeatureTypeEnumType::DeviceClassification;
	}
	if (src == "DeviceDiagnosis") {
		return FeatureTypeEnumType::DeviceDiagnosis;
	}
	if (src == "DirectControl") {
		return FeatureTypeEnumType::DirectControl;
	}
	if (src == "ElectricalConnection") {
		return FeatureTypeEnumType::ElectricalConnection;
	}
	if (src == "Generic") {
		return FeatureTypeEnumType::Generic;
	}
	if (src == "HVAC") {
		return FeatureTypeEnumType::HVAC;
	}
	if (src == "LoadControl") {
		return FeatureTypeEnumType::LoadControl;
	}
	if (src == "Measurement") {
		return FeatureTypeEnumType::Measurement;
	}
	if (src == "Messaging") {
		return FeatureTypeEnumType::Messaging;
	}
	if (src == "NetworkManagement") {
		return FeatureTypeEnumType::NetworkManagement;
	}
	if (src == "NodeManagement") {
		return FeatureTypeEnumType::NodeManagement;
	}
	if (src == "OperatingConstraints") {
		return FeatureTypeEnumType::OperatingConstraints;
	}
	if (src == "PowerSequences") {
		return FeatureTypeEnumType::PowerSequences;
	}
	if (src == "Sensing") {
		return FeatureTypeEnumType::Sensing;
	}
	if (src == "Setpoint") {
		return FeatureTypeEnumType::Setpoint;
	}
	if (src == "SmartEnergyManagementPs") {
		return FeatureTypeEnumType::SmartEnergyManagementPs;
	}
	if (src == "TaskManagement") {
		return FeatureTypeEnumType::TaskManagement;
	}
	if (src == "Threshold") {
		return FeatureTypeEnumType::Threshold;
	}
	if (src == "TimeInformation") {
		return FeatureTypeEnumType::TimeInformation;
	}
	if (src == "TimeTable") {
		return FeatureTypeEnumType::TimeTable;
	}
	if (src == "DeviceConfiguration") {
		return FeatureTypeEnumType::DeviceConfiguration;
	}
	if (src == "SupplyCondition") {
		return FeatureTypeEnumType::SupplyCondition;
	}
	if (src == "TimeSeries") {
		return FeatureTypeEnumType::TimeSeries;
	}
	if (src == "TariffInformation") {
		return FeatureTypeEnumType::TariffInformation;
	}
	if (src == "IncentiveTable") {
		return FeatureTypeEnumType::IncentiveTable;
	}
	if (src == "Bill") {
		return FeatureTypeEnumType::Bill;
	}
	if (src == "Identification") {
		return FeatureTypeEnumType::Identification;
	}
	if (src == "StateInformation") {
		return FeatureTypeEnumType::StateInformation;
	}
	 return FeatureTypeEnumType::StateInformation;
}
bool convertToJson(const FeatureDirectControlSpecificUsageEnumType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case FeatureDirectControlSpecificUsageEnumType::History:
		 enumName = "History";
		break;
	case FeatureDirectControlSpecificUsageEnumType::RealTime:
		 enumName = "RealTime";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, FeatureDirectControlSpecificUsageEnumType &dst) {
	if (src == "History") {
		return FeatureDirectControlSpecificUsageEnumType::History;
	}
	if (src == "RealTime") {
		return FeatureDirectControlSpecificUsageEnumType::RealTime;
	}
	 return FeatureDirectControlSpecificUsageEnumType::RealTime;
}
bool convertToJson(const FeatureHvacSpecificUsageEnumType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case FeatureHvacSpecificUsageEnumType::OperationMode:
		 enumName = "OperationMode";
		break;
	case FeatureHvacSpecificUsageEnumType::Overrun:
		 enumName = "Overrun";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, FeatureHvacSpecificUsageEnumType &dst) {
	if (src == "OperationMode") {
		return FeatureHvacSpecificUsageEnumType::OperationMode;
	}
	if (src == "Overrun") {
		return FeatureHvacSpecificUsageEnumType::Overrun;
	}
	 return FeatureHvacSpecificUsageEnumType::Overrun;
}
bool convertToJson(const FeatureMeasurementSpecificUsageEnumType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case FeatureMeasurementSpecificUsageEnumType::Contact:
		 enumName = "Contact";
		break;
	case FeatureMeasurementSpecificUsageEnumType::Electrical:
		 enumName = "Electrical";
		break;
	case FeatureMeasurementSpecificUsageEnumType::Heat:
		 enumName = "Heat";
		break;
	case FeatureMeasurementSpecificUsageEnumType::Level:
		 enumName = "Level";
		break;
	case FeatureMeasurementSpecificUsageEnumType::Pressure:
		 enumName = "Pressure";
		break;
	case FeatureMeasurementSpecificUsageEnumType::Temperature:
		 enumName = "Temperature";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, FeatureMeasurementSpecificUsageEnumType &dst) {
	if (src == "Contact") {
		return FeatureMeasurementSpecificUsageEnumType::Contact;
	}
	if (src == "Electrical") {
		return FeatureMeasurementSpecificUsageEnumType::Electrical;
	}
	if (src == "Heat") {
		return FeatureMeasurementSpecificUsageEnumType::Heat;
	}
	if (src == "Level") {
		return FeatureMeasurementSpecificUsageEnumType::Level;
	}
	if (src == "Pressure") {
		return FeatureMeasurementSpecificUsageEnumType::Pressure;
	}
	if (src == "Temperature") {
		return FeatureMeasurementSpecificUsageEnumType::Temperature;
	}
	 return FeatureMeasurementSpecificUsageEnumType::Temperature;
}
bool convertToJson(const FeatureSetpointSpecificUsageEnumType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case FeatureSetpointSpecificUsageEnumType::Contact:
		 enumName = "Contact";
		break;
	case FeatureSetpointSpecificUsageEnumType::Electrical:
		 enumName = "Electrical";
		break;
	case FeatureSetpointSpecificUsageEnumType::Heat:
		 enumName = "Heat";
		break;
	case FeatureSetpointSpecificUsageEnumType::Level:
		 enumName = "Level";
		break;
	case FeatureSetpointSpecificUsageEnumType::Pressure:
		 enumName = "Pressure";
		break;
	case FeatureSetpointSpecificUsageEnumType::Temperature:
		 enumName = "Temperature";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, FeatureSetpointSpecificUsageEnumType &dst) {
	if (src == "Contact") {
		return FeatureSetpointSpecificUsageEnumType::Contact;
	}
	if (src == "Electrical") {
		return FeatureSetpointSpecificUsageEnumType::Electrical;
	}
	if (src == "Heat") {
		return FeatureSetpointSpecificUsageEnumType::Heat;
	}
	if (src == "Level") {
		return FeatureSetpointSpecificUsageEnumType::Level;
	}
	if (src == "Pressure") {
		return FeatureSetpointSpecificUsageEnumType::Pressure;
	}
	if (src == "Temperature") {
		return FeatureSetpointSpecificUsageEnumType::Temperature;
	}
	 return FeatureSetpointSpecificUsageEnumType::Temperature;
}
bool convertToJson(const FeatureSmartEnergyManagementPsSpecificUsageEnumType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case FeatureSmartEnergyManagementPsSpecificUsageEnumType::FixedForecast:
		 enumName = "FixedForecast";
		break;
	case FeatureSmartEnergyManagementPsSpecificUsageEnumType::FlexibleChosenForecast:
		 enumName = "FlexibleChosenForecast";
		break;
	case FeatureSmartEnergyManagementPsSpecificUsageEnumType::FlexibleOptionalForecast:
		 enumName = "FlexibleOptionalForecast";
		break;
	case FeatureSmartEnergyManagementPsSpecificUsageEnumType::OptionalSequenceBasedImmediateControl:
		 enumName = "OptionalSequenceBasedImmediateControl";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, FeatureSmartEnergyManagementPsSpecificUsageEnumType &dst) {
	if (src == "FixedForecast") {
		return FeatureSmartEnergyManagementPsSpecificUsageEnumType::FixedForecast;
	}
	if (src == "FlexibleChosenForecast") {
		return FeatureSmartEnergyManagementPsSpecificUsageEnumType::FlexibleChosenForecast;
	}
	if (src == "FlexibleOptionalForecast") {
		return FeatureSmartEnergyManagementPsSpecificUsageEnumType::FlexibleOptionalForecast;
	}
	if (src == "OptionalSequenceBasedImmediateControl") {
		return FeatureSmartEnergyManagementPsSpecificUsageEnumType::OptionalSequenceBasedImmediateControl;
	}
	 return FeatureSmartEnergyManagementPsSpecificUsageEnumType::OptionalSequenceBasedImmediateControl;
}
bool convertToJson(const FunctionEnumType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case FunctionEnumType::actuatorLevelData:
		 enumName = "actuatorLevelData";
		break;
	case FunctionEnumType::actuatorLevelDescriptionData:
		 enumName = "actuatorLevelDescriptionData";
		break;
	case FunctionEnumType::actuatorSwitchData:
		 enumName = "actuatorSwitchData";
		break;
	case FunctionEnumType::actuatorSwitchDescriptionData:
		 enumName = "actuatorSwitchDescriptionData";
		break;
	case FunctionEnumType::alarmListData:
		 enumName = "alarmListData";
		break;
	case FunctionEnumType::bindingManagementDeleteCall:
		 enumName = "bindingManagementDeleteCall";
		break;
	case FunctionEnumType::bindingManagementEntryListData:
		 enumName = "bindingManagementEntryListData";
		break;
	case FunctionEnumType::bindingManagementRequestCall:
		 enumName = "bindingManagementRequestCall";
		break;
	case FunctionEnumType::dataTunnelingCall:
		 enumName = "dataTunnelingCall";
		break;
	case FunctionEnumType::deviceClassificationManufacturerData:
		 enumName = "deviceClassificationManufacturerData";
		break;
	case FunctionEnumType::deviceClassificationUserData:
		 enumName = "deviceClassificationUserData";
		break;
	case FunctionEnumType::deviceDiagnosisHeartbeatData:
		 enumName = "deviceDiagnosisHeartbeatData";
		break;
	case FunctionEnumType::deviceDiagnosisServiceData:
		 enumName = "deviceDiagnosisServiceData";
		break;
	case FunctionEnumType::deviceDiagnosisStateData:
		 enumName = "deviceDiagnosisStateData";
		break;
	case FunctionEnumType::directControlActivityListData:
		 enumName = "directControlActivityListData";
		break;
	case FunctionEnumType::directControlDescriptionData:
		 enumName = "directControlDescriptionData";
		break;
	case FunctionEnumType::electricalConnectionDescriptionListData:
		 enumName = "electricalConnectionDescriptionListData";
		break;
	case FunctionEnumType::electricalConnectionParameterDescriptionListData:
		 enumName = "electricalConnectionParameterDescriptionListData";
		break;
	case FunctionEnumType::electricalConnectionStateListData:
		 enumName = "electricalConnectionStateListData";
		break;
	case FunctionEnumType::hvacOperationModeDescriptionListData:
		 enumName = "hvacOperationModeDescriptionListData";
		break;
	case FunctionEnumType::hvacOverrunDescriptionListData:
		 enumName = "hvacOverrunDescriptionListData";
		break;
	case FunctionEnumType::hvacOverrunListData:
		 enumName = "hvacOverrunListData";
		break;
	case FunctionEnumType::hvacSystemFunctionDescriptionListData:
		 enumName = "hvacSystemFunctionDescriptionListData";
		break;
	case FunctionEnumType::hvacSystemFunctionListData:
		 enumName = "hvacSystemFunctionListData";
		break;
	case FunctionEnumType::hvacSystemFunctionOperationModeRelationListData:
		 enumName = "hvacSystemFunctionOperationModeRelationListData";
		break;
	case FunctionEnumType::hvacSystemFunctionPowerSequenceRelationListData:
		 enumName = "hvacSystemFunctionPowerSequenceRelationListData";
		break;
	case FunctionEnumType::hvacSystemFunctionSetpointRelationListData:
		 enumName = "hvacSystemFunctionSetpointRelationListData";
		break;
	case FunctionEnumType::loadControlEventListData:
		 enumName = "loadControlEventListData";
		break;
	case FunctionEnumType::loadControlStateListData:
		 enumName = "loadControlStateListData";
		break;
	case FunctionEnumType::measurementConstraintsListData:
		 enumName = "measurementConstraintsListData";
		break;
	case FunctionEnumType::measurementDescriptionListData:
		 enumName = "measurementDescriptionListData";
		break;
	case FunctionEnumType::measurementListData:
		 enumName = "measurementListData";
		break;
	case FunctionEnumType::measurementThresholdRelationListData:
		 enumName = "measurementThresholdRelationListData";
		break;
	case FunctionEnumType::messagingListData:
		 enumName = "messagingListData";
		break;
	case FunctionEnumType::networkManagementAbortCall:
		 enumName = "networkManagementAbortCall";
		break;
	case FunctionEnumType::networkManagementAddNodeCall:
		 enumName = "networkManagementAddNodeCall";
		break;
	case FunctionEnumType::networkManagementDeviceDescriptionListData:
		 enumName = "networkManagementDeviceDescriptionListData";
		break;
	case FunctionEnumType::networkManagementDiscoverCall:
		 enumName = "networkManagementDiscoverCall";
		break;
	case FunctionEnumType::networkManagementEntityDescriptionListData:
		 enumName = "networkManagementEntityDescriptionListData";
		break;
	case FunctionEnumType::networkManagementFeatureDescriptionListData:
		 enumName = "networkManagementFeatureDescriptionListData";
		break;
	case FunctionEnumType::networkManagementJoiningModeData:
		 enumName = "networkManagementJoiningModeData";
		break;
	case FunctionEnumType::networkManagementModifyNodeCall:
		 enumName = "networkManagementModifyNodeCall";
		break;
	case FunctionEnumType::networkManagementProcessStateData:
		 enumName = "networkManagementProcessStateData";
		break;
	case FunctionEnumType::networkManagementRemoveNodeCall:
		 enumName = "networkManagementRemoveNodeCall";
		break;
	case FunctionEnumType::networkManagementReportCandidateData:
		 enumName = "networkManagementReportCandidateData";
		break;
	case FunctionEnumType::networkManagementScanNetworkCall:
		 enumName = "networkManagementScanNetworkCall";
		break;
	case FunctionEnumType::nodeManagementBindingData:
		 enumName = "nodeManagementBindingData";
		break;
	case FunctionEnumType::nodeManagementBindingDeleteCall:
		 enumName = "nodeManagementBindingDeleteCall";
		break;
	case FunctionEnumType::nodeManagementBindingRequestCall:
		 enumName = "nodeManagementBindingRequestCall";
		break;
	case FunctionEnumType::nodeManagementDestinationListData:
		 enumName = "nodeManagementDestinationListData";
		break;
	case FunctionEnumType::nodeManagementDetailedDiscoveryData:
		 enumName = "nodeManagementDetailedDiscoveryData";
		break;
	case FunctionEnumType::nodeManagementSubscriptionData:
		 enumName = "nodeManagementSubscriptionData";
		break;
	case FunctionEnumType::nodeManagementSubscriptionDeleteCall:
		 enumName = "nodeManagementSubscriptionDeleteCall";
		break;
	case FunctionEnumType::nodeManagementSubscriptionRequestCall:
		 enumName = "nodeManagementSubscriptionRequestCall";
		break;
	case FunctionEnumType::operatingConstraintsDurationListData:
		 enumName = "operatingConstraintsDurationListData";
		break;
	case FunctionEnumType::operatingConstraintsInterruptListData:
		 enumName = "operatingConstraintsInterruptListData";
		break;
	case FunctionEnumType::operatingConstraintsPowerDescriptionListData:
		 enumName = "operatingConstraintsPowerDescriptionListData";
		break;
	case FunctionEnumType::operatingConstraintsPowerLevelListData:
		 enumName = "operatingConstraintsPowerLevelListData";
		break;
	case FunctionEnumType::operatingConstraintsPowerRangeListData:
		 enumName = "operatingConstraintsPowerRangeListData";
		break;
	case FunctionEnumType::operatingConstraintsResumeImplicationListData:
		 enumName = "operatingConstraintsResumeImplicationListData";
		break;
	case FunctionEnumType::powerSequenceAlternativesRelationListData:
		 enumName = "powerSequenceAlternativesRelationListData";
		break;
	case FunctionEnumType::powerSequenceDescriptionListData:
		 enumName = "powerSequenceDescriptionListData";
		break;
	case FunctionEnumType::powerSequenceNodeScheduleInformationData:
		 enumName = "powerSequenceNodeScheduleInformationData";
		break;
	case FunctionEnumType::powerSequencePriceCalculationRequestCall:
		 enumName = "powerSequencePriceCalculationRequestCall";
		break;
	case FunctionEnumType::powerSequencePriceListData:
		 enumName = "powerSequencePriceListData";
		break;
	case FunctionEnumType::powerSequenceScheduleConfigurationRequestCall:
		 enumName = "powerSequenceScheduleConfigurationRequestCall";
		break;
	case FunctionEnumType::powerSequenceScheduleConstraintsListData:
		 enumName = "powerSequenceScheduleConstraintsListData";
		break;
	case FunctionEnumType::powerSequenceScheduleListData:
		 enumName = "powerSequenceScheduleListData";
		break;
	case FunctionEnumType::powerSequenceSchedulePreferenceListData:
		 enumName = "powerSequenceSchedulePreferenceListData";
		break;
	case FunctionEnumType::powerSequenceStateListData:
		 enumName = "powerSequenceStateListData";
		break;
	case FunctionEnumType::powerTimeSlotScheduleConstraintsListData:
		 enumName = "powerTimeSlotScheduleConstraintsListData";
		break;
	case FunctionEnumType::powerTimeSlotScheduleListData:
		 enumName = "powerTimeSlotScheduleListData";
		break;
	case FunctionEnumType::powerTimeSlotValueListData:
		 enumName = "powerTimeSlotValueListData";
		break;
	case FunctionEnumType::resultData:
		 enumName = "resultData";
		break;
	case FunctionEnumType::sensingDescriptionData:
		 enumName = "sensingDescriptionData";
		break;
	case FunctionEnumType::sensingListData:
		 enumName = "sensingListData";
		break;
	case FunctionEnumType::sessionIdentificationListData:
		 enumName = "sessionIdentificationListData";
		break;
	case FunctionEnumType::sessionMeasurementRelationListData:
		 enumName = "sessionMeasurementRelationListData";
		break;
	case FunctionEnumType::setpointConstraintsListData:
		 enumName = "setpointConstraintsListData";
		break;
	case FunctionEnumType::setpointDescriptionListData:
		 enumName = "setpointDescriptionListData";
		break;
	case FunctionEnumType::setpointListData:
		 enumName = "setpointListData";
		break;
	case FunctionEnumType::smartEnergyManagementPsConfigurationRequestCall:
		 enumName = "smartEnergyManagementPsConfigurationRequestCall";
		break;
	case FunctionEnumType::smartEnergyManagementPsData:
		 enumName = "smartEnergyManagementPsData";
		break;
	case FunctionEnumType::smartEnergyManagementPsPriceCalculationRequestCall:
		 enumName = "smartEnergyManagementPsPriceCalculationRequestCall";
		break;
	case FunctionEnumType::smartEnergyManagementPsPriceData:
		 enumName = "smartEnergyManagementPsPriceData";
		break;
	case FunctionEnumType::specificationVersionListData:
		 enumName = "specificationVersionListData";
		break;
	case FunctionEnumType::subscriptionManagementDeleteCall:
		 enumName = "subscriptionManagementDeleteCall";
		break;
	case FunctionEnumType::subscriptionManagementEntryListData:
		 enumName = "subscriptionManagementEntryListData";
		break;
	case FunctionEnumType::subscriptionManagementRequestCall:
		 enumName = "subscriptionManagementRequestCall";
		break;
	case FunctionEnumType::supplyConditionDescriptionListData:
		 enumName = "supplyConditionDescriptionListData";
		break;
	case FunctionEnumType::supplyConditionListData:
		 enumName = "supplyConditionListData";
		break;
	case FunctionEnumType::supplyConditionThresholdRelationListData:
		 enumName = "supplyConditionThresholdRelationListData";
		break;
	case FunctionEnumType::taskManagementJobDescriptionListData:
		 enumName = "taskManagementJobDescriptionListData";
		break;
	case FunctionEnumType::taskManagementJobListData:
		 enumName = "taskManagementJobListData";
		break;
	case FunctionEnumType::taskManagementJobRelationListData:
		 enumName = "taskManagementJobRelationListData";
		break;
	case FunctionEnumType::taskManagementOverviewData:
		 enumName = "taskManagementOverviewData";
		break;
	case FunctionEnumType::thresholdConstraintsListData:
		 enumName = "thresholdConstraintsListData";
		break;
	case FunctionEnumType::thresholdDescriptionListData:
		 enumName = "thresholdDescriptionListData";
		break;
	case FunctionEnumType::thresholdListData:
		 enumName = "thresholdListData";
		break;
	case FunctionEnumType::timeDistributorData:
		 enumName = "timeDistributorData";
		break;
	case FunctionEnumType::timeDistributorEnquiryCall:
		 enumName = "timeDistributorEnquiryCall";
		break;
	case FunctionEnumType::timeInformationData:
		 enumName = "timeInformationData";
		break;
	case FunctionEnumType::timePrecisionData:
		 enumName = "timePrecisionData";
		break;
	case FunctionEnumType::timeTableConstraintsListData:
		 enumName = "timeTableConstraintsListData";
		break;
	case FunctionEnumType::timeTableDescriptionListData:
		 enumName = "timeTableDescriptionListData";
		break;
	case FunctionEnumType::timeTableListData:
		 enumName = "timeTableListData";
		break;
	case FunctionEnumType::deviceConfigurationKeyValueConstraintsListData:
		 enumName = "deviceConfigurationKeyValueConstraintsListData";
		break;
	case FunctionEnumType::deviceConfigurationKeyValueListData:
		 enumName = "deviceConfigurationKeyValueListData";
		break;
	case FunctionEnumType::deviceConfigurationKeyValueDescriptionListData:
		 enumName = "deviceConfigurationKeyValueDescriptionListData";
		break;
	case FunctionEnumType::loadControlLimitConstraintsListData:
		 enumName = "loadControlLimitConstraintsListData";
		break;
	case FunctionEnumType::loadControlLimitDescriptionListData:
		 enumName = "loadControlLimitDescriptionListData";
		break;
	case FunctionEnumType::loadControlLimitListData:
		 enumName = "loadControlLimitListData";
		break;
	case FunctionEnumType::loadControlNodeData:
		 enumName = "loadControlNodeData";
		break;
	case FunctionEnumType::timeSeriesConstraintsListData:
		 enumName = "timeSeriesConstraintsListData";
		break;
	case FunctionEnumType::timeSeriesDescriptionListData:
		 enumName = "timeSeriesDescriptionListData";
		break;
	case FunctionEnumType::timeSeriesListData:
		 enumName = "timeSeriesListData";
		break;
	case FunctionEnumType::tariffOverallConstraintsData:
		 enumName = "tariffOverallConstraintsData";
		break;
	case FunctionEnumType::tariffListData:
		 enumName = "tariffListData";
		break;
	case FunctionEnumType::tariffBoundaryRelationListData:
		 enumName = "tariffBoundaryRelationListData";
		break;
	case FunctionEnumType::tariffTierRelationListData:
		 enumName = "tariffTierRelationListData";
		break;
	case FunctionEnumType::tariffDescriptionListData:
		 enumName = "tariffDescriptionListData";
		break;
	case FunctionEnumType::tierBoundaryListData:
		 enumName = "tierBoundaryListData";
		break;
	case FunctionEnumType::tierBoundaryDescriptionListData:
		 enumName = "tierBoundaryDescriptionListData";
		break;
	case FunctionEnumType::commodityListData:
		 enumName = "commodityListData";
		break;
	case FunctionEnumType::tierListData:
		 enumName = "tierListData";
		break;
	case FunctionEnumType::tierIncentiveRelationListData:
		 enumName = "tierIncentiveRelationListData";
		break;
	case FunctionEnumType::tierDescriptionListData:
		 enumName = "tierDescriptionListData";
		break;
	case FunctionEnumType::incentiveListData:
		 enumName = "incentiveListData";
		break;
	case FunctionEnumType::incentiveDescriptionListData:
		 enumName = "incentiveDescriptionListData";
		break;
	case FunctionEnumType::incentiveTableData:
		 enumName = "incentiveTableData";
		break;
	case FunctionEnumType::incentiveTableDescriptionData:
		 enumName = "incentiveTableDescriptionData";
		break;
	case FunctionEnumType::incentiveTableConstraintsData:
		 enumName = "incentiveTableConstraintsData";
		break;
	case FunctionEnumType::electricalConnectionPermittedValueSetListData:
		 enumName = "electricalConnectionPermittedValueSetListData";
		break;
	case FunctionEnumType::useCaseInformationListData:
		 enumName = "useCaseInformationListData";
		break;
	case FunctionEnumType::nodeManagementUseCaseData:
		 enumName = "nodeManagementUseCaseData";
		break;
	case FunctionEnumType::billConstraintsListData:
		 enumName = "billConstraintsListData";
		break;
	case FunctionEnumType::billDescriptionListData:
		 enumName = "billDescriptionListData";
		break;
	case FunctionEnumType::billListData:
		 enumName = "billListData";
		break;
	case FunctionEnumType::identificationListData:
		 enumName = "identificationListData";
		break;
	case FunctionEnumType::measurementSeriesListData:
		 enumName = "measurementSeriesListData";
		break;
	case FunctionEnumType::electricalConnectionCharacteristicListData:
		 enumName = "electricalConnectionCharacteristicListData";
		break;
	case FunctionEnumType::stateInformationListData:
		 enumName = "stateInformationListData";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, FunctionEnumType &dst) {
	if (src == "actuatorLevelData") {
		return FunctionEnumType::actuatorLevelData;
	}
	if (src == "actuatorLevelDescriptionData") {
		return FunctionEnumType::actuatorLevelDescriptionData;
	}
	if (src == "actuatorSwitchData") {
		return FunctionEnumType::actuatorSwitchData;
	}
	if (src == "actuatorSwitchDescriptionData") {
		return FunctionEnumType::actuatorSwitchDescriptionData;
	}
	if (src == "alarmListData") {
		return FunctionEnumType::alarmListData;
	}
	if (src == "bindingManagementDeleteCall") {
		return FunctionEnumType::bindingManagementDeleteCall;
	}
	if (src == "bindingManagementEntryListData") {
		return FunctionEnumType::bindingManagementEntryListData;
	}
	if (src == "bindingManagementRequestCall") {
		return FunctionEnumType::bindingManagementRequestCall;
	}
	if (src == "dataTunnelingCall") {
		return FunctionEnumType::dataTunnelingCall;
	}
	if (src == "deviceClassificationManufacturerData") {
		return FunctionEnumType::deviceClassificationManufacturerData;
	}
	if (src == "deviceClassificationUserData") {
		return FunctionEnumType::deviceClassificationUserData;
	}
	if (src == "deviceDiagnosisHeartbeatData") {
		return FunctionEnumType::deviceDiagnosisHeartbeatData;
	}
	if (src == "deviceDiagnosisServiceData") {
		return FunctionEnumType::deviceDiagnosisServiceData;
	}
	if (src == "deviceDiagnosisStateData") {
		return FunctionEnumType::deviceDiagnosisStateData;
	}
	if (src == "directControlActivityListData") {
		return FunctionEnumType::directControlActivityListData;
	}
	if (src == "directControlDescriptionData") {
		return FunctionEnumType::directControlDescriptionData;
	}
	if (src == "electricalConnectionDescriptionListData") {
		return FunctionEnumType::electricalConnectionDescriptionListData;
	}
	if (src == "electricalConnectionParameterDescriptionListData") {
		return FunctionEnumType::electricalConnectionParameterDescriptionListData;
	}
	if (src == "electricalConnectionStateListData") {
		return FunctionEnumType::electricalConnectionStateListData;
	}
	if (src == "hvacOperationModeDescriptionListData") {
		return FunctionEnumType::hvacOperationModeDescriptionListData;
	}
	if (src == "hvacOverrunDescriptionListData") {
		return FunctionEnumType::hvacOverrunDescriptionListData;
	}
	if (src == "hvacOverrunListData") {
		return FunctionEnumType::hvacOverrunListData;
	}
	if (src == "hvacSystemFunctionDescriptionListData") {
		return FunctionEnumType::hvacSystemFunctionDescriptionListData;
	}
	if (src == "hvacSystemFunctionListData") {
		return FunctionEnumType::hvacSystemFunctionListData;
	}
	if (src == "hvacSystemFunctionOperationModeRelationListData") {
		return FunctionEnumType::hvacSystemFunctionOperationModeRelationListData;
	}
	if (src == "hvacSystemFunctionPowerSequenceRelationListData") {
		return FunctionEnumType::hvacSystemFunctionPowerSequenceRelationListData;
	}
	if (src == "hvacSystemFunctionSetpointRelationListData") {
		return FunctionEnumType::hvacSystemFunctionSetpointRelationListData;
	}
	if (src == "loadControlEventListData") {
		return FunctionEnumType::loadControlEventListData;
	}
	if (src == "loadControlStateListData") {
		return FunctionEnumType::loadControlStateListData;
	}
	if (src == "measurementConstraintsListData") {
		return FunctionEnumType::measurementConstraintsListData;
	}
	if (src == "measurementDescriptionListData") {
		return FunctionEnumType::measurementDescriptionListData;
	}
	if (src == "measurementListData") {
		return FunctionEnumType::measurementListData;
	}
	if (src == "measurementThresholdRelationListData") {
		return FunctionEnumType::measurementThresholdRelationListData;
	}
	if (src == "messagingListData") {
		return FunctionEnumType::messagingListData;
	}
	if (src == "networkManagementAbortCall") {
		return FunctionEnumType::networkManagementAbortCall;
	}
	if (src == "networkManagementAddNodeCall") {
		return FunctionEnumType::networkManagementAddNodeCall;
	}
	if (src == "networkManagementDeviceDescriptionListData") {
		return FunctionEnumType::networkManagementDeviceDescriptionListData;
	}
	if (src == "networkManagementDiscoverCall") {
		return FunctionEnumType::networkManagementDiscoverCall;
	}
	if (src == "networkManagementEntityDescriptionListData") {
		return FunctionEnumType::networkManagementEntityDescriptionListData;
	}
	if (src == "networkManagementFeatureDescriptionListData") {
		return FunctionEnumType::networkManagementFeatureDescriptionListData;
	}
	if (src == "networkManagementJoiningModeData") {
		return FunctionEnumType::networkManagementJoiningModeData;
	}
	if (src == "networkManagementModifyNodeCall") {
		return FunctionEnumType::networkManagementModifyNodeCall;
	}
	if (src == "networkManagementProcessStateData") {
		return FunctionEnumType::networkManagementProcessStateData;
	}
	if (src == "networkManagementRemoveNodeCall") {
		return FunctionEnumType::networkManagementRemoveNodeCall;
	}
	if (src == "networkManagementReportCandidateData") {
		return FunctionEnumType::networkManagementReportCandidateData;
	}
	if (src == "networkManagementScanNetworkCall") {
		return FunctionEnumType::networkManagementScanNetworkCall;
	}
	if (src == "nodeManagementBindingData") {
		return FunctionEnumType::nodeManagementBindingData;
	}
	if (src == "nodeManagementBindingDeleteCall") {
		return FunctionEnumType::nodeManagementBindingDeleteCall;
	}
	if (src == "nodeManagementBindingRequestCall") {
		return FunctionEnumType::nodeManagementBindingRequestCall;
	}
	if (src == "nodeManagementDestinationListData") {
		return FunctionEnumType::nodeManagementDestinationListData;
	}
	if (src == "nodeManagementDetailedDiscoveryData") {
		return FunctionEnumType::nodeManagementDetailedDiscoveryData;
	}
	if (src == "nodeManagementSubscriptionData") {
		return FunctionEnumType::nodeManagementSubscriptionData;
	}
	if (src == "nodeManagementSubscriptionDeleteCall") {
		return FunctionEnumType::nodeManagementSubscriptionDeleteCall;
	}
	if (src == "nodeManagementSubscriptionRequestCall") {
		return FunctionEnumType::nodeManagementSubscriptionRequestCall;
	}
	if (src == "operatingConstraintsDurationListData") {
		return FunctionEnumType::operatingConstraintsDurationListData;
	}
	if (src == "operatingConstraintsInterruptListData") {
		return FunctionEnumType::operatingConstraintsInterruptListData;
	}
	if (src == "operatingConstraintsPowerDescriptionListData") {
		return FunctionEnumType::operatingConstraintsPowerDescriptionListData;
	}
	if (src == "operatingConstraintsPowerLevelListData") {
		return FunctionEnumType::operatingConstraintsPowerLevelListData;
	}
	if (src == "operatingConstraintsPowerRangeListData") {
		return FunctionEnumType::operatingConstraintsPowerRangeListData;
	}
	if (src == "operatingConstraintsResumeImplicationListData") {
		return FunctionEnumType::operatingConstraintsResumeImplicationListData;
	}
	if (src == "powerSequenceAlternativesRelationListData") {
		return FunctionEnumType::powerSequenceAlternativesRelationListData;
	}
	if (src == "powerSequenceDescriptionListData") {
		return FunctionEnumType::powerSequenceDescriptionListData;
	}
	if (src == "powerSequenceNodeScheduleInformationData") {
		return FunctionEnumType::powerSequenceNodeScheduleInformationData;
	}
	if (src == "powerSequencePriceCalculationRequestCall") {
		return FunctionEnumType::powerSequencePriceCalculationRequestCall;
	}
	if (src == "powerSequencePriceListData") {
		return FunctionEnumType::powerSequencePriceListData;
	}
	if (src == "powerSequenceScheduleConfigurationRequestCall") {
		return FunctionEnumType::powerSequenceScheduleConfigurationRequestCall;
	}
	if (src == "powerSequenceScheduleConstraintsListData") {
		return FunctionEnumType::powerSequenceScheduleConstraintsListData;
	}
	if (src == "powerSequenceScheduleListData") {
		return FunctionEnumType::powerSequenceScheduleListData;
	}
	if (src == "powerSequenceSchedulePreferenceListData") {
		return FunctionEnumType::powerSequenceSchedulePreferenceListData;
	}
	if (src == "powerSequenceStateListData") {
		return FunctionEnumType::powerSequenceStateListData;
	}
	if (src == "powerTimeSlotScheduleConstraintsListData") {
		return FunctionEnumType::powerTimeSlotScheduleConstraintsListData;
	}
	if (src == "powerTimeSlotScheduleListData") {
		return FunctionEnumType::powerTimeSlotScheduleListData;
	}
	if (src == "powerTimeSlotValueListData") {
		return FunctionEnumType::powerTimeSlotValueListData;
	}
	if (src == "resultData") {
		return FunctionEnumType::resultData;
	}
	if (src == "sensingDescriptionData") {
		return FunctionEnumType::sensingDescriptionData;
	}
	if (src == "sensingListData") {
		return FunctionEnumType::sensingListData;
	}
	if (src == "sessionIdentificationListData") {
		return FunctionEnumType::sessionIdentificationListData;
	}
	if (src == "sessionMeasurementRelationListData") {
		return FunctionEnumType::sessionMeasurementRelationListData;
	}
	if (src == "setpointConstraintsListData") {
		return FunctionEnumType::setpointConstraintsListData;
	}
	if (src == "setpointDescriptionListData") {
		return FunctionEnumType::setpointDescriptionListData;
	}
	if (src == "setpointListData") {
		return FunctionEnumType::setpointListData;
	}
	if (src == "smartEnergyManagementPsConfigurationRequestCall") {
		return FunctionEnumType::smartEnergyManagementPsConfigurationRequestCall;
	}
	if (src == "smartEnergyManagementPsData") {
		return FunctionEnumType::smartEnergyManagementPsData;
	}
	if (src == "smartEnergyManagementPsPriceCalculationRequestCall") {
		return FunctionEnumType::smartEnergyManagementPsPriceCalculationRequestCall;
	}
	if (src == "smartEnergyManagementPsPriceData") {
		return FunctionEnumType::smartEnergyManagementPsPriceData;
	}
	if (src == "specificationVersionListData") {
		return FunctionEnumType::specificationVersionListData;
	}
	if (src == "subscriptionManagementDeleteCall") {
		return FunctionEnumType::subscriptionManagementDeleteCall;
	}
	if (src == "subscriptionManagementEntryListData") {
		return FunctionEnumType::subscriptionManagementEntryListData;
	}
	if (src == "subscriptionManagementRequestCall") {
		return FunctionEnumType::subscriptionManagementRequestCall;
	}
	if (src == "supplyConditionDescriptionListData") {
		return FunctionEnumType::supplyConditionDescriptionListData;
	}
	if (src == "supplyConditionListData") {
		return FunctionEnumType::supplyConditionListData;
	}
	if (src == "supplyConditionThresholdRelationListData") {
		return FunctionEnumType::supplyConditionThresholdRelationListData;
	}
	if (src == "taskManagementJobDescriptionListData") {
		return FunctionEnumType::taskManagementJobDescriptionListData;
	}
	if (src == "taskManagementJobListData") {
		return FunctionEnumType::taskManagementJobListData;
	}
	if (src == "taskManagementJobRelationListData") {
		return FunctionEnumType::taskManagementJobRelationListData;
	}
	if (src == "taskManagementOverviewData") {
		return FunctionEnumType::taskManagementOverviewData;
	}
	if (src == "thresholdConstraintsListData") {
		return FunctionEnumType::thresholdConstraintsListData;
	}
	if (src == "thresholdDescriptionListData") {
		return FunctionEnumType::thresholdDescriptionListData;
	}
	if (src == "thresholdListData") {
		return FunctionEnumType::thresholdListData;
	}
	if (src == "timeDistributorData") {
		return FunctionEnumType::timeDistributorData;
	}
	if (src == "timeDistributorEnquiryCall") {
		return FunctionEnumType::timeDistributorEnquiryCall;
	}
	if (src == "timeInformationData") {
		return FunctionEnumType::timeInformationData;
	}
	if (src == "timePrecisionData") {
		return FunctionEnumType::timePrecisionData;
	}
	if (src == "timeTableConstraintsListData") {
		return FunctionEnumType::timeTableConstraintsListData;
	}
	if (src == "timeTableDescriptionListData") {
		return FunctionEnumType::timeTableDescriptionListData;
	}
	if (src == "timeTableListData") {
		return FunctionEnumType::timeTableListData;
	}
	if (src == "deviceConfigurationKeyValueConstraintsListData") {
		return FunctionEnumType::deviceConfigurationKeyValueConstraintsListData;
	}
	if (src == "deviceConfigurationKeyValueListData") {
		return FunctionEnumType::deviceConfigurationKeyValueListData;
	}
	if (src == "deviceConfigurationKeyValueDescriptionListData") {
		return FunctionEnumType::deviceConfigurationKeyValueDescriptionListData;
	}
	if (src == "loadControlLimitConstraintsListData") {
		return FunctionEnumType::loadControlLimitConstraintsListData;
	}
	if (src == "loadControlLimitDescriptionListData") {
		return FunctionEnumType::loadControlLimitDescriptionListData;
	}
	if (src == "loadControlLimitListData") {
		return FunctionEnumType::loadControlLimitListData;
	}
	if (src == "loadControlNodeData") {
		return FunctionEnumType::loadControlNodeData;
	}
	if (src == "timeSeriesConstraintsListData") {
		return FunctionEnumType::timeSeriesConstraintsListData;
	}
	if (src == "timeSeriesDescriptionListData") {
		return FunctionEnumType::timeSeriesDescriptionListData;
	}
	if (src == "timeSeriesListData") {
		return FunctionEnumType::timeSeriesListData;
	}
	if (src == "tariffOverallConstraintsData") {
		return FunctionEnumType::tariffOverallConstraintsData;
	}
	if (src == "tariffListData") {
		return FunctionEnumType::tariffListData;
	}
	if (src == "tariffBoundaryRelationListData") {
		return FunctionEnumType::tariffBoundaryRelationListData;
	}
	if (src == "tariffTierRelationListData") {
		return FunctionEnumType::tariffTierRelationListData;
	}
	if (src == "tariffDescriptionListData") {
		return FunctionEnumType::tariffDescriptionListData;
	}
	if (src == "tierBoundaryListData") {
		return FunctionEnumType::tierBoundaryListData;
	}
	if (src == "tierBoundaryDescriptionListData") {
		return FunctionEnumType::tierBoundaryDescriptionListData;
	}
	if (src == "commodityListData") {
		return FunctionEnumType::commodityListData;
	}
	if (src == "tierListData") {
		return FunctionEnumType::tierListData;
	}
	if (src == "tierIncentiveRelationListData") {
		return FunctionEnumType::tierIncentiveRelationListData;
	}
	if (src == "tierDescriptionListData") {
		return FunctionEnumType::tierDescriptionListData;
	}
	if (src == "incentiveListData") {
		return FunctionEnumType::incentiveListData;
	}
	if (src == "incentiveDescriptionListData") {
		return FunctionEnumType::incentiveDescriptionListData;
	}
	if (src == "incentiveTableData") {
		return FunctionEnumType::incentiveTableData;
	}
	if (src == "incentiveTableDescriptionData") {
		return FunctionEnumType::incentiveTableDescriptionData;
	}
	if (src == "incentiveTableConstraintsData") {
		return FunctionEnumType::incentiveTableConstraintsData;
	}
	if (src == "electricalConnectionPermittedValueSetListData") {
		return FunctionEnumType::electricalConnectionPermittedValueSetListData;
	}
	if (src == "useCaseInformationListData") {
		return FunctionEnumType::useCaseInformationListData;
	}
	if (src == "nodeManagementUseCaseData") {
		return FunctionEnumType::nodeManagementUseCaseData;
	}
	if (src == "billConstraintsListData") {
		return FunctionEnumType::billConstraintsListData;
	}
	if (src == "billDescriptionListData") {
		return FunctionEnumType::billDescriptionListData;
	}
	if (src == "billListData") {
		return FunctionEnumType::billListData;
	}
	if (src == "identificationListData") {
		return FunctionEnumType::identificationListData;
	}
	if (src == "measurementSeriesListData") {
		return FunctionEnumType::measurementSeriesListData;
	}
	if (src == "electricalConnectionCharacteristicListData") {
		return FunctionEnumType::electricalConnectionCharacteristicListData;
	}
	if (src == "stateInformationListData") {
		return FunctionEnumType::stateInformationListData;
	}
	 return FunctionEnumType::stateInformationListData;
}
bool convertToJson(const TimeSeriesTypeEnumType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case TimeSeriesTypeEnumType::plan:
		 enumName = "plan";
		break;
	case TimeSeriesTypeEnumType::singleDemand:
		 enumName = "singleDemand";
		break;
	case TimeSeriesTypeEnumType::constraints:
		 enumName = "constraints";
		break;
	case TimeSeriesTypeEnumType::energyRequest:
		 enumName = "energyRequest";
		break;
	case TimeSeriesTypeEnumType::dischargingEnergyRequest:
		 enumName = "dischargingEnergyRequest";
		break;
	case TimeSeriesTypeEnumType::consumptionLimitCurve:
		 enumName = "consumptionLimitCurve";
		break;
	case TimeSeriesTypeEnumType::productionLimitCurve:
		 enumName = "productionLimitCurve";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, TimeSeriesTypeEnumType &dst) {
	if (src == "plan") {
		return TimeSeriesTypeEnumType::plan;
	}
	if (src == "singleDemand") {
		return TimeSeriesTypeEnumType::singleDemand;
	}
	if (src == "constraints") {
		return TimeSeriesTypeEnumType::constraints;
	}
	if (src == "energyRequest") {
		return TimeSeriesTypeEnumType::energyRequest;
	}
	if (src == "dischargingEnergyRequest") {
		return TimeSeriesTypeEnumType::dischargingEnergyRequest;
	}
	if (src == "consumptionLimitCurve") {
		return TimeSeriesTypeEnumType::consumptionLimitCurve;
	}
	if (src == "productionLimitCurve") {
		return TimeSeriesTypeEnumType::productionLimitCurve;
	}
	 return TimeSeriesTypeEnumType::productionLimitCurve;
}
bool convertToJson(const MeasurementTypeEnumType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case MeasurementTypeEnumType::acceleration:
		 enumName = "acceleration";
		break;
	case MeasurementTypeEnumType::angle:
		 enumName = "angle";
		break;
	case MeasurementTypeEnumType::angularVelocity:
		 enumName = "angularVelocity";
		break;
	case MeasurementTypeEnumType::area:
		 enumName = "area";
		break;
	case MeasurementTypeEnumType::atmosphericPressure:
		 enumName = "atmosphericPressure";
		break;
	case MeasurementTypeEnumType::capacity:
		 enumName = "capacity";
		break;
	case MeasurementTypeEnumType::concentration:
		 enumName = "concentration";
		break;
	case MeasurementTypeEnumType::count:
		 enumName = "count";
		break;
	case MeasurementTypeEnumType::current:
		 enumName = "current";
		break;
	case MeasurementTypeEnumType::density:
		 enumName = "density";
		break;
	case MeasurementTypeEnumType::distance:
		 enumName = "distance";
		break;
	case MeasurementTypeEnumType::electricField:
		 enumName = "electricField";
		break;
	case MeasurementTypeEnumType::energy:
		 enumName = "energy";
		break;
	case MeasurementTypeEnumType::force:
		 enumName = "force";
		break;
	case MeasurementTypeEnumType::frequency:
		 enumName = "frequency";
		break;
	case MeasurementTypeEnumType::harmonicDistortion:
		 enumName = "harmonicDistortion";
		break;
	case MeasurementTypeEnumType::heat:
		 enumName = "heat";
		break;
	case MeasurementTypeEnumType::heatFlux:
		 enumName = "heatFlux";
		break;
	case MeasurementTypeEnumType::illuminance:
		 enumName = "illuminance";
		break;
	case MeasurementTypeEnumType::impulse:
		 enumName = "impulse";
		break;
	case MeasurementTypeEnumType::level:
		 enumName = "level";
		break;
	case MeasurementTypeEnumType::magneticField:
		 enumName = "magneticField";
		break;
	case MeasurementTypeEnumType::mass:
		 enumName = "mass";
		break;
	case MeasurementTypeEnumType::massFlow:
		 enumName = "massFlow";
		break;
	case MeasurementTypeEnumType::particles:
		 enumName = "particles";
		break;
	case MeasurementTypeEnumType::percentage:
		 enumName = "percentage";
		break;
	case MeasurementTypeEnumType::power:
		 enumName = "power";
		break;
	case MeasurementTypeEnumType::powerFactor:
		 enumName = "powerFactor";
		break;
	case MeasurementTypeEnumType::pressure:
		 enumName = "pressure";
		break;
	case MeasurementTypeEnumType::radonActivity:
		 enumName = "radonActivity";
		break;
	case MeasurementTypeEnumType::relativeHumidity:
		 enumName = "relativeHumidity";
		break;
	case MeasurementTypeEnumType::resistance:
		 enumName = "resistance";
		break;
	case MeasurementTypeEnumType::solarRadiation:
		 enumName = "solarRadiation";
		break;
	case MeasurementTypeEnumType::speed:
		 enumName = "speed";
		break;
	case MeasurementTypeEnumType::temperature:
		 enumName = "temperature";
		break;
	case MeasurementTypeEnumType::time:
		 enumName = "time";
		break;
	case MeasurementTypeEnumType::torque:
		 enumName = "torque";
		break;
	case MeasurementTypeEnumType::unknown:
		 enumName = "unknown";
		break;
	case MeasurementTypeEnumType::velocity:
		 enumName = "velocity";
		break;
	case MeasurementTypeEnumType::voltage:
		 enumName = "voltage";
		break;
	case MeasurementTypeEnumType::volume:
		 enumName = "volume";
		break;
	case MeasurementTypeEnumType::volumetricFlow:
		 enumName = "volumetricFlow";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, MeasurementTypeEnumType &dst) {
	if (src == "acceleration") {
		return MeasurementTypeEnumType::acceleration;
	}
	if (src == "angle") {
		return MeasurementTypeEnumType::angle;
	}
	if (src == "angularVelocity") {
		return MeasurementTypeEnumType::angularVelocity;
	}
	if (src == "area") {
		return MeasurementTypeEnumType::area;
	}
	if (src == "atmosphericPressure") {
		return MeasurementTypeEnumType::atmosphericPressure;
	}
	if (src == "capacity") {
		return MeasurementTypeEnumType::capacity;
	}
	if (src == "concentration") {
		return MeasurementTypeEnumType::concentration;
	}
	if (src == "count") {
		return MeasurementTypeEnumType::count;
	}
	if (src == "current") {
		return MeasurementTypeEnumType::current;
	}
	if (src == "density") {
		return MeasurementTypeEnumType::density;
	}
	if (src == "distance") {
		return MeasurementTypeEnumType::distance;
	}
	if (src == "electricField") {
		return MeasurementTypeEnumType::electricField;
	}
	if (src == "energy") {
		return MeasurementTypeEnumType::energy;
	}
	if (src == "force") {
		return MeasurementTypeEnumType::force;
	}
	if (src == "frequency") {
		return MeasurementTypeEnumType::frequency;
	}
	if (src == "harmonicDistortion") {
		return MeasurementTypeEnumType::harmonicDistortion;
	}
	if (src == "heat") {
		return MeasurementTypeEnumType::heat;
	}
	if (src == "heatFlux") {
		return MeasurementTypeEnumType::heatFlux;
	}
	if (src == "illuminance") {
		return MeasurementTypeEnumType::illuminance;
	}
	if (src == "impulse") {
		return MeasurementTypeEnumType::impulse;
	}
	if (src == "level") {
		return MeasurementTypeEnumType::level;
	}
	if (src == "magneticField") {
		return MeasurementTypeEnumType::magneticField;
	}
	if (src == "mass") {
		return MeasurementTypeEnumType::mass;
	}
	if (src == "massFlow") {
		return MeasurementTypeEnumType::massFlow;
	}
	if (src == "particles") {
		return MeasurementTypeEnumType::particles;
	}
	if (src == "percentage") {
		return MeasurementTypeEnumType::percentage;
	}
	if (src == "power") {
		return MeasurementTypeEnumType::power;
	}
	if (src == "powerFactor") {
		return MeasurementTypeEnumType::powerFactor;
	}
	if (src == "pressure") {
		return MeasurementTypeEnumType::pressure;
	}
	if (src == "radonActivity") {
		return MeasurementTypeEnumType::radonActivity;
	}
	if (src == "relativeHumidity") {
		return MeasurementTypeEnumType::relativeHumidity;
	}
	if (src == "resistance") {
		return MeasurementTypeEnumType::resistance;
	}
	if (src == "solarRadiation") {
		return MeasurementTypeEnumType::solarRadiation;
	}
	if (src == "speed") {
		return MeasurementTypeEnumType::speed;
	}
	if (src == "temperature") {
		return MeasurementTypeEnumType::temperature;
	}
	if (src == "time") {
		return MeasurementTypeEnumType::time;
	}
	if (src == "torque") {
		return MeasurementTypeEnumType::torque;
	}
	if (src == "unknown") {
		return MeasurementTypeEnumType::unknown;
	}
	if (src == "velocity") {
		return MeasurementTypeEnumType::velocity;
	}
	if (src == "voltage") {
		return MeasurementTypeEnumType::voltage;
	}
	if (src == "volume") {
		return MeasurementTypeEnumType::volume;
	}
	if (src == "volumetricFlow") {
		return MeasurementTypeEnumType::volumetricFlow;
	}
	 return MeasurementTypeEnumType::volumetricFlow;
}
bool convertToJson(const MeasurementValueTypeEnumType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case MeasurementValueTypeEnumType::value:
		 enumName = "value";
		break;
	case MeasurementValueTypeEnumType::averageValue:
		 enumName = "averageValue";
		break;
	case MeasurementValueTypeEnumType::minValue:
		 enumName = "minValue";
		break;
	case MeasurementValueTypeEnumType::maxValue:
		 enumName = "maxValue";
		break;
	case MeasurementValueTypeEnumType::standardDeviation:
		 enumName = "standardDeviation";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, MeasurementValueTypeEnumType &dst) {
	if (src == "value") {
		return MeasurementValueTypeEnumType::value;
	}
	if (src == "averageValue") {
		return MeasurementValueTypeEnumType::averageValue;
	}
	if (src == "minValue") {
		return MeasurementValueTypeEnumType::minValue;
	}
	if (src == "maxValue") {
		return MeasurementValueTypeEnumType::maxValue;
	}
	if (src == "standardDeviation") {
		return MeasurementValueTypeEnumType::standardDeviation;
	}
	 return MeasurementValueTypeEnumType::standardDeviation;
}
bool convertToJson(const MeasurementValueSourceEnumType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case MeasurementValueSourceEnumType::measuredValue:
		 enumName = "measuredValue";
		break;
	case MeasurementValueSourceEnumType::calculatedValue:
		 enumName = "calculatedValue";
		break;
	case MeasurementValueSourceEnumType::empiricalValue:
		 enumName = "empiricalValue";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, MeasurementValueSourceEnumType &dst) {
	if (src == "measuredValue") {
		return MeasurementValueSourceEnumType::measuredValue;
	}
	if (src == "calculatedValue") {
		return MeasurementValueSourceEnumType::calculatedValue;
	}
	if (src == "empiricalValue") {
		return MeasurementValueSourceEnumType::empiricalValue;
	}
	 return MeasurementValueSourceEnumType::empiricalValue;
}
bool convertToJson(const MeasurementValueTendencyEnumType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case MeasurementValueTendencyEnumType::rising:
		 enumName = "rising";
		break;
	case MeasurementValueTendencyEnumType::stable:
		 enumName = "stable";
		break;
	case MeasurementValueTendencyEnumType::falling:
		 enumName = "falling";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, MeasurementValueTendencyEnumType &dst) {
	if (src == "rising") {
		return MeasurementValueTendencyEnumType::rising;
	}
	if (src == "stable") {
		return MeasurementValueTendencyEnumType::stable;
	}
	if (src == "falling") {
		return MeasurementValueTendencyEnumType::falling;
	}
	 return MeasurementValueTendencyEnumType::falling;
}
bool convertToJson(const MeasurementValueStateEnumType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case MeasurementValueStateEnumType::normal:
		 enumName = "normal";
		break;
	case MeasurementValueStateEnumType::outOfRange:
		 enumName = "outOfRange";
		break;
	case MeasurementValueStateEnumType::error:
		 enumName = "error";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, MeasurementValueStateEnumType &dst) {
	if (src == "normal") {
		return MeasurementValueStateEnumType::normal;
	}
	if (src == "outOfRange") {
		return MeasurementValueStateEnumType::outOfRange;
	}
	if (src == "error") {
		return MeasurementValueStateEnumType::error;
	}
	 return MeasurementValueStateEnumType::error;
}
bool convertToJson(const ThresholdTypeEnumType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case ThresholdTypeEnumType::goodAbove:
		 enumName = "goodAbove";
		break;
	case ThresholdTypeEnumType::badAbove:
		 enumName = "badAbove";
		break;
	case ThresholdTypeEnumType::goodBelow:
		 enumName = "goodBelow";
		break;
	case ThresholdTypeEnumType::badBelow:
		 enumName = "badBelow";
		break;
	case ThresholdTypeEnumType::minValueThreshold:
		 enumName = "minValueThreshold";
		break;
	case ThresholdTypeEnumType::maxValueThreshold:
		 enumName = "maxValueThreshold";
		break;
	case ThresholdTypeEnumType::minValueThresholdExtreme:
		 enumName = "minValueThresholdExtreme";
		break;
	case ThresholdTypeEnumType::maxValueThresholdExtreme:
		 enumName = "maxValueThresholdExtreme";
		break;
	case ThresholdTypeEnumType::sagThreshold:
		 enumName = "sagThreshold";
		break;
	case ThresholdTypeEnumType::swellThreshold:
		 enumName = "swellThreshold";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, ThresholdTypeEnumType &dst) {
	if (src == "goodAbove") {
		return ThresholdTypeEnumType::goodAbove;
	}
	if (src == "badAbove") {
		return ThresholdTypeEnumType::badAbove;
	}
	if (src == "goodBelow") {
		return ThresholdTypeEnumType::goodBelow;
	}
	if (src == "badBelow") {
		return ThresholdTypeEnumType::badBelow;
	}
	if (src == "minValueThreshold") {
		return ThresholdTypeEnumType::minValueThreshold;
	}
	if (src == "maxValueThreshold") {
		return ThresholdTypeEnumType::maxValueThreshold;
	}
	if (src == "minValueThresholdExtreme") {
		return ThresholdTypeEnumType::minValueThresholdExtreme;
	}
	if (src == "maxValueThresholdExtreme") {
		return ThresholdTypeEnumType::maxValueThresholdExtreme;
	}
	if (src == "sagThreshold") {
		return ThresholdTypeEnumType::sagThreshold;
	}
	if (src == "swellThreshold") {
		return ThresholdTypeEnumType::swellThreshold;
	}
	 return ThresholdTypeEnumType::swellThreshold;
}
bool convertToJson(const DirectControlActivityStateEnumType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case DirectControlActivityStateEnumType::running:
		 enumName = "running";
		break;
	case DirectControlActivityStateEnumType::paused:
		 enumName = "paused";
		break;
	case DirectControlActivityStateEnumType::inactive:
		 enumName = "inactive";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, DirectControlActivityStateEnumType &dst) {
	if (src == "running") {
		return DirectControlActivityStateEnumType::running;
	}
	if (src == "paused") {
		return DirectControlActivityStateEnumType::paused;
	}
	if (src == "inactive") {
		return DirectControlActivityStateEnumType::inactive;
	}
	 return DirectControlActivityStateEnumType::inactive;
}
bool convertToJson(const PowerTimeSlotValueTypeEnumType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case PowerTimeSlotValueTypeEnumType::power:
		 enumName = "power";
		break;
	case PowerTimeSlotValueTypeEnumType::powerMin:
		 enumName = "powerMin";
		break;
	case PowerTimeSlotValueTypeEnumType::powerMax:
		 enumName = "powerMax";
		break;
	case PowerTimeSlotValueTypeEnumType::powerExpectedValue:
		 enumName = "powerExpectedValue";
		break;
	case PowerTimeSlotValueTypeEnumType::powerStandardDeviation:
		 enumName = "powerStandardDeviation";
		break;
	case PowerTimeSlotValueTypeEnumType::powerSkewness:
		 enumName = "powerSkewness";
		break;
	case PowerTimeSlotValueTypeEnumType::energy:
		 enumName = "energy";
		break;
	case PowerTimeSlotValueTypeEnumType::energyMin:
		 enumName = "energyMin";
		break;
	case PowerTimeSlotValueTypeEnumType::energyMax:
		 enumName = "energyMax";
		break;
	case PowerTimeSlotValueTypeEnumType::energyExpectedValue:
		 enumName = "energyExpectedValue";
		break;
	case PowerTimeSlotValueTypeEnumType::energyStandardDeviation:
		 enumName = "energyStandardDeviation";
		break;
	case PowerTimeSlotValueTypeEnumType::energySkewness:
		 enumName = "energySkewness";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, PowerTimeSlotValueTypeEnumType &dst) {
	if (src == "power") {
		return PowerTimeSlotValueTypeEnumType::power;
	}
	if (src == "powerMin") {
		return PowerTimeSlotValueTypeEnumType::powerMin;
	}
	if (src == "powerMax") {
		return PowerTimeSlotValueTypeEnumType::powerMax;
	}
	if (src == "powerExpectedValue") {
		return PowerTimeSlotValueTypeEnumType::powerExpectedValue;
	}
	if (src == "powerStandardDeviation") {
		return PowerTimeSlotValueTypeEnumType::powerStandardDeviation;
	}
	if (src == "powerSkewness") {
		return PowerTimeSlotValueTypeEnumType::powerSkewness;
	}
	if (src == "energy") {
		return PowerTimeSlotValueTypeEnumType::energy;
	}
	if (src == "energyMin") {
		return PowerTimeSlotValueTypeEnumType::energyMin;
	}
	if (src == "energyMax") {
		return PowerTimeSlotValueTypeEnumType::energyMax;
	}
	if (src == "energyExpectedValue") {
		return PowerTimeSlotValueTypeEnumType::energyExpectedValue;
	}
	if (src == "energyStandardDeviation") {
		return PowerTimeSlotValueTypeEnumType::energyStandardDeviation;
	}
	if (src == "energySkewness") {
		return PowerTimeSlotValueTypeEnumType::energySkewness;
	}
	 return PowerTimeSlotValueTypeEnumType::energySkewness;
}
bool convertToJson(const PowerSequenceScopeEnumType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case PowerSequenceScopeEnumType::forecast:
		 enumName = "forecast";
		break;
	case PowerSequenceScopeEnumType::measurement:
		 enumName = "measurement";
		break;
	case PowerSequenceScopeEnumType::recommendation:
		 enumName = "recommendation";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, PowerSequenceScopeEnumType &dst) {
	if (src == "forecast") {
		return PowerSequenceScopeEnumType::forecast;
	}
	if (src == "measurement") {
		return PowerSequenceScopeEnumType::measurement;
	}
	if (src == "recommendation") {
		return PowerSequenceScopeEnumType::recommendation;
	}
	 return PowerSequenceScopeEnumType::recommendation;
}
bool convertToJson(const PowerSequenceStateEnumType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case PowerSequenceStateEnumType::running:
		 enumName = "running";
		break;
	case PowerSequenceStateEnumType::paused:
		 enumName = "paused";
		break;
	case PowerSequenceStateEnumType::scheduled:
		 enumName = "scheduled";
		break;
	case PowerSequenceStateEnumType::scheduledPaused:
		 enumName = "scheduledPaused";
		break;
	case PowerSequenceStateEnumType::pending:
		 enumName = "pending";
		break;
	case PowerSequenceStateEnumType::inactive:
		 enumName = "inactive";
		break;
	case PowerSequenceStateEnumType::completed:
		 enumName = "completed";
		break;
	case PowerSequenceStateEnumType::invalid:
		 enumName = "invalid";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, PowerSequenceStateEnumType &dst) {
	if (src == "running") {
		return PowerSequenceStateEnumType::running;
	}
	if (src == "paused") {
		return PowerSequenceStateEnumType::paused;
	}
	if (src == "scheduled") {
		return PowerSequenceStateEnumType::scheduled;
	}
	if (src == "scheduledPaused") {
		return PowerSequenceStateEnumType::scheduledPaused;
	}
	if (src == "pending") {
		return PowerSequenceStateEnumType::pending;
	}
	if (src == "inactive") {
		return PowerSequenceStateEnumType::inactive;
	}
	if (src == "completed") {
		return PowerSequenceStateEnumType::completed;
	}
	if (src == "invalid") {
		return PowerSequenceStateEnumType::invalid;
	}
	 return PowerSequenceStateEnumType::invalid;
}
bool convertToJson(const ActuatorLevelFctEnumType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case ActuatorLevelFctEnumType::start:
		 enumName = "start";
		break;
	case ActuatorLevelFctEnumType::up:
		 enumName = "up";
		break;
	case ActuatorLevelFctEnumType::down:
		 enumName = "down";
		break;
	case ActuatorLevelFctEnumType::stop:
		 enumName = "stop";
		break;
	case ActuatorLevelFctEnumType::percentageAbsolute:
		 enumName = "percentageAbsolute";
		break;
	case ActuatorLevelFctEnumType::percentageRelative:
		 enumName = "percentageRelative";
		break;
	case ActuatorLevelFctEnumType::absolute:
		 enumName = "absolute";
		break;
	case ActuatorLevelFctEnumType::relative:
		 enumName = "relative";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, ActuatorLevelFctEnumType &dst) {
	if (src == "start") {
		return ActuatorLevelFctEnumType::start;
	}
	if (src == "up") {
		return ActuatorLevelFctEnumType::up;
	}
	if (src == "down") {
		return ActuatorLevelFctEnumType::down;
	}
	if (src == "stop") {
		return ActuatorLevelFctEnumType::stop;
	}
	if (src == "percentageAbsolute") {
		return ActuatorLevelFctEnumType::percentageAbsolute;
	}
	if (src == "percentageRelative") {
		return ActuatorLevelFctEnumType::percentageRelative;
	}
	if (src == "absolute") {
		return ActuatorLevelFctEnumType::absolute;
	}
	if (src == "relative") {
		return ActuatorLevelFctEnumType::relative;
	}
	 return ActuatorLevelFctEnumType::relative;
}
bool convertToJson(const CmdClassifierType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case CmdClassifierType::read:
		 enumName = "read";
		break;
	case CmdClassifierType::reply:
		 enumName = "reply";
		break;
	case CmdClassifierType::notify:
		 enumName = "notify";
		break;
	case CmdClassifierType::write:
		 enumName = "write";
		break;
	case CmdClassifierType::call:
		 enumName = "call";
		break;
	case CmdClassifierType::result:
		 enumName = "result";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, CmdClassifierType &dst) {
	if (src == "read") {
		return CmdClassifierType::read;
	}
	if (src == "reply") {
		return CmdClassifierType::reply;
	}
	if (src == "notify") {
		return CmdClassifierType::notify;
	}
	if (src == "write") {
		return CmdClassifierType::write;
	}
	if (src == "call") {
		return CmdClassifierType::call;
	}
	if (src == "result") {
		return CmdClassifierType::result;
	}
	 return CmdClassifierType::result;
}
bool convertToJson(const ActuatorSwitchFctEnumType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case ActuatorSwitchFctEnumType::on:
		 enumName = "on";
		break;
	case ActuatorSwitchFctEnumType::off:
		 enumName = "off";
		break;
	case ActuatorSwitchFctEnumType::toggle:
		 enumName = "toggle";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, ActuatorSwitchFctEnumType &dst) {
	if (src == "on") {
		return ActuatorSwitchFctEnumType::on;
	}
	if (src == "off") {
		return ActuatorSwitchFctEnumType::off;
	}
	if (src == "toggle") {
		return ActuatorSwitchFctEnumType::toggle;
	}
	 return ActuatorSwitchFctEnumType::toggle;
}
bool convertToJson(const AlarmTypeEnumType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case AlarmTypeEnumType::alarmCancelled:
		 enumName = "alarmCancelled";
		break;
	case AlarmTypeEnumType::underThreshold:
		 enumName = "underThreshold";
		break;
	case AlarmTypeEnumType::overThreshold:
		 enumName = "overThreshold";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, AlarmTypeEnumType &dst) {
	if (src == "alarmCancelled") {
		return AlarmTypeEnumType::alarmCancelled;
	}
	if (src == "underThreshold") {
		return AlarmTypeEnumType::underThreshold;
	}
	if (src == "overThreshold") {
		return AlarmTypeEnumType::overThreshold;
	}
	 return AlarmTypeEnumType::overThreshold;
}
bool convertToJson(const BillTypeEnumType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case BillTypeEnumType::chargingSummary:
		 enumName = "chargingSummary";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, BillTypeEnumType &dst) {
	if (src == "chargingSummary") {
		return BillTypeEnumType::chargingSummary;
	}
	 return BillTypeEnumType::chargingSummary;
}
bool convertToJson(const BillPositionTypeEnumType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case BillPositionTypeEnumType::gridElectricEnergy:
		 enumName = "gridElectricEnergy";
		break;
	case BillPositionTypeEnumType::selfProducedElectricEnergy:
		 enumName = "selfProducedElectricEnergy";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, BillPositionTypeEnumType &dst) {
	if (src == "gridElectricEnergy") {
		return BillPositionTypeEnumType::gridElectricEnergy;
	}
	if (src == "selfProducedElectricEnergy") {
		return BillPositionTypeEnumType::selfProducedElectricEnergy;
	}
	 return BillPositionTypeEnumType::selfProducedElectricEnergy;
}
bool convertToJson(const BillCostTypeEnumType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case BillCostTypeEnumType::absolutePrice:
		 enumName = "absolutePrice";
		break;
	case BillCostTypeEnumType::relativePrice:
		 enumName = "relativePrice";
		break;
	case BillCostTypeEnumType::co2Emission:
		 enumName = "co2Emission";
		break;
	case BillCostTypeEnumType::renewableEnergy:
		 enumName = "renewableEnergy";
		break;
	case BillCostTypeEnumType::radioactiveWaste:
		 enumName = "radioactiveWaste";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, BillCostTypeEnumType &dst) {
	if (src == "absolutePrice") {
		return BillCostTypeEnumType::absolutePrice;
	}
	if (src == "relativePrice") {
		return BillCostTypeEnumType::relativePrice;
	}
	if (src == "co2Emission") {
		return BillCostTypeEnumType::co2Emission;
	}
	if (src == "renewableEnergy") {
		return BillCostTypeEnumType::renewableEnergy;
	}
	if (src == "radioactiveWaste") {
		return BillCostTypeEnumType::radioactiveWaste;
	}
	 return BillCostTypeEnumType::radioactiveWaste;
}
bool convertToJson(const IdentificationTypeEnumType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case IdentificationTypeEnumType::eui48:
		 enumName = "eui48";
		break;
	case IdentificationTypeEnumType::eui64:
		 enumName = "eui64";
		break;
	case IdentificationTypeEnumType::userRfidTag:
		 enumName = "userRfidTag";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, IdentificationTypeEnumType &dst) {
	if (src == "eui48") {
		return IdentificationTypeEnumType::eui48;
	}
	if (src == "eui64") {
		return IdentificationTypeEnumType::eui64;
	}
	if (src == "userRfidTag") {
		return IdentificationTypeEnumType::userRfidTag;
	}
	 return IdentificationTypeEnumType::userRfidTag;
}
bool convertToJson(const PowerSourceEnumType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case PowerSourceEnumType::unknown:
		 enumName = "unknown";
		break;
	case PowerSourceEnumType::mainsSinglePhase:
		 enumName = "mainsSinglePhase";
		break;
	case PowerSourceEnumType::mains3Phase:
		 enumName = "mains3Phase";
		break;
	case PowerSourceEnumType::battery:
		 enumName = "battery";
		break;
	case PowerSourceEnumType::dc:
		 enumName = "dc";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, PowerSourceEnumType &dst) {
	if (src == "unknown") {
		return PowerSourceEnumType::unknown;
	}
	if (src == "mainsSinglePhase") {
		return PowerSourceEnumType::mainsSinglePhase;
	}
	if (src == "mains3Phase") {
		return PowerSourceEnumType::mains3Phase;
	}
	if (src == "battery") {
		return PowerSourceEnumType::battery;
	}
	if (src == "dc") {
		return PowerSourceEnumType::dc;
	}
	 return PowerSourceEnumType::dc;
}
bool convertToJson(const DeviceConfigurationKeyNameEnumType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case DeviceConfigurationKeyNameEnumType::peakPowerOfPvSystem:
		 enumName = "peakPowerOfPvSystem";
		break;
	case DeviceConfigurationKeyNameEnumType::pvCurtailmentLimitFactor:
		 enumName = "pvCurtailmentLimitFactor";
		break;
	case DeviceConfigurationKeyNameEnumType::asymmetricChargingSupported:
		 enumName = "asymmetricChargingSupported";
		break;
	case DeviceConfigurationKeyNameEnumType::communicationsStandard:
		 enumName = "communicationsStandard";
		break;
	case DeviceConfigurationKeyNameEnumType::inverterGridCode:
		 enumName = "inverterGridCode";
		break;
	case DeviceConfigurationKeyNameEnumType::pvStringAvailabilityStatus:
		 enumName = "pvStringAvailabilityStatus";
		break;
	case DeviceConfigurationKeyNameEnumType::batteryAvailabilityStatus:
		 enumName = "batteryAvailabilityStatus";
		break;
	case DeviceConfigurationKeyNameEnumType::gridConnectionStatus:
		 enumName = "gridConnectionStatus";
		break;
	case DeviceConfigurationKeyNameEnumType::timeToAcChargePowerMax:
		 enumName = "timeToAcChargePowerMax";
		break;
	case DeviceConfigurationKeyNameEnumType::timeToAcDischargePowerMax:
		 enumName = "timeToAcDischargePowerMax";
		break;
	case DeviceConfigurationKeyNameEnumType::tilt:
		 enumName = "tilt";
		break;
	case DeviceConfigurationKeyNameEnumType::azimuth:
		 enumName = "azimuth";
		break;
	case DeviceConfigurationKeyNameEnumType::batteryType:
		 enumName = "batteryType";
		break;
	case DeviceConfigurationKeyNameEnumType::maxCycleCountPerDay:
		 enumName = "maxCycleCountPerDay";
		break;
	case DeviceConfigurationKeyNameEnumType::failsafeConsumptionActivePowerLimit:
		 enumName = "failsafeConsumptionActivePowerLimit";
		break;
	case DeviceConfigurationKeyNameEnumType::failsafeProductionActivePowerLimit:
		 enumName = "failsafeProductionActivePowerLimit";
		break;
	case DeviceConfigurationKeyNameEnumType::failsafePositiveReactivePowerLimit:
		 enumName = "failsafePositiveReactivePowerLimit";
		break;
	case DeviceConfigurationKeyNameEnumType::failsafeNegativeReactivePowerLimit:
		 enumName = "failsafeNegativeReactivePowerLimit";
		break;
	case DeviceConfigurationKeyNameEnumType::failsafePositiveCosPhiLimit:
		 enumName = "failsafePositiveCosPhiLimit";
		break;
	case DeviceConfigurationKeyNameEnumType::failsafeNegativeCosPhiLimit:
		 enumName = "failsafeNegativeCosPhiLimit";
		break;
	case DeviceConfigurationKeyNameEnumType::maxAcChargePower:
		 enumName = "maxAcChargePower";
		break;
	case DeviceConfigurationKeyNameEnumType::maxAcDischargePower:
		 enumName = "maxAcDischargePower";
		break;
	case DeviceConfigurationKeyNameEnumType::maxDcChargePower:
		 enumName = "maxDcChargePower";
		break;
	case DeviceConfigurationKeyNameEnumType::maxDcDischargePower:
		 enumName = "maxDcDischargePower";
		break;
	case DeviceConfigurationKeyNameEnumType::batteryActiveControlMode:
		 enumName = "batteryActiveControlMode";
		break;
	case DeviceConfigurationKeyNameEnumType::defaultAcPower:
		 enumName = "defaultAcPower";
		break;
	case DeviceConfigurationKeyNameEnumType::defaultDcPower:
		 enumName = "defaultDcPower";
		break;
	case DeviceConfigurationKeyNameEnumType::defaultPccPower:
		 enumName = "defaultPccPower";
		break;
	case DeviceConfigurationKeyNameEnumType::failsafeAcPowerSetpoint:
		 enumName = "failsafeAcPowerSetpoint";
		break;
	case DeviceConfigurationKeyNameEnumType::failsafeDcPowerSetpoint:
		 enumName = "failsafeDcPowerSetpoint";
		break;
	case DeviceConfigurationKeyNameEnumType::failsafePccPowerSetpoint:
		 enumName = "failsafePccPowerSetpoint";
		break;
	case DeviceConfigurationKeyNameEnumType::failsafeDurationMinimum:
		 enumName = "failsafeDurationMinimum";
		break;
	case DeviceConfigurationKeyNameEnumType::dischargingBelowTargetEnergyRequestPermitted:
		 enumName = "dischargingBelowTargetEnergyRequestPermitted";
		break;
	case DeviceConfigurationKeyNameEnumType::incentivesSimulationCyclesMax:
		 enumName = "incentivesSimulationCyclesMax";
		break;
	case DeviceConfigurationKeyNameEnumType::incentivesSimulationConcurrent:
		 enumName = "incentivesSimulationConcurrent";
		break;
	case DeviceConfigurationKeyNameEnumType::incentivesTimeoutIncentiveRequest:
		 enumName = "incentivesTimeoutIncentiveRequest";
		break;
	case DeviceConfigurationKeyNameEnumType::incentivesWaitIncentiveWriteable:
		 enumName = "incentivesWaitIncentiveWriteable";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, DeviceConfigurationKeyNameEnumType &dst) {
	if (src == "peakPowerOfPvSystem") {
		return DeviceConfigurationKeyNameEnumType::peakPowerOfPvSystem;
	}
	if (src == "pvCurtailmentLimitFactor") {
		return DeviceConfigurationKeyNameEnumType::pvCurtailmentLimitFactor;
	}
	if (src == "asymmetricChargingSupported") {
		return DeviceConfigurationKeyNameEnumType::asymmetricChargingSupported;
	}
	if (src == "communicationsStandard") {
		return DeviceConfigurationKeyNameEnumType::communicationsStandard;
	}
	if (src == "inverterGridCode") {
		return DeviceConfigurationKeyNameEnumType::inverterGridCode;
	}
	if (src == "pvStringAvailabilityStatus") {
		return DeviceConfigurationKeyNameEnumType::pvStringAvailabilityStatus;
	}
	if (src == "batteryAvailabilityStatus") {
		return DeviceConfigurationKeyNameEnumType::batteryAvailabilityStatus;
	}
	if (src == "gridConnectionStatus") {
		return DeviceConfigurationKeyNameEnumType::gridConnectionStatus;
	}
	if (src == "timeToAcChargePowerMax") {
		return DeviceConfigurationKeyNameEnumType::timeToAcChargePowerMax;
	}
	if (src == "timeToAcDischargePowerMax") {
		return DeviceConfigurationKeyNameEnumType::timeToAcDischargePowerMax;
	}
	if (src == "tilt") {
		return DeviceConfigurationKeyNameEnumType::tilt;
	}
	if (src == "azimuth") {
		return DeviceConfigurationKeyNameEnumType::azimuth;
	}
	if (src == "batteryType") {
		return DeviceConfigurationKeyNameEnumType::batteryType;
	}
	if (src == "maxCycleCountPerDay") {
		return DeviceConfigurationKeyNameEnumType::maxCycleCountPerDay;
	}
	if (src == "failsafeConsumptionActivePowerLimit") {
		return DeviceConfigurationKeyNameEnumType::failsafeConsumptionActivePowerLimit;
	}
	if (src == "failsafeProductionActivePowerLimit") {
		return DeviceConfigurationKeyNameEnumType::failsafeProductionActivePowerLimit;
	}
	if (src == "failsafePositiveReactivePowerLimit") {
		return DeviceConfigurationKeyNameEnumType::failsafePositiveReactivePowerLimit;
	}
	if (src == "failsafeNegativeReactivePowerLimit") {
		return DeviceConfigurationKeyNameEnumType::failsafeNegativeReactivePowerLimit;
	}
	if (src == "failsafePositiveCosPhiLimit") {
		return DeviceConfigurationKeyNameEnumType::failsafePositiveCosPhiLimit;
	}
	if (src == "failsafeNegativeCosPhiLimit") {
		return DeviceConfigurationKeyNameEnumType::failsafeNegativeCosPhiLimit;
	}
	if (src == "maxAcChargePower") {
		return DeviceConfigurationKeyNameEnumType::maxAcChargePower;
	}
	if (src == "maxAcDischargePower") {
		return DeviceConfigurationKeyNameEnumType::maxAcDischargePower;
	}
	if (src == "maxDcChargePower") {
		return DeviceConfigurationKeyNameEnumType::maxDcChargePower;
	}
	if (src == "maxDcDischargePower") {
		return DeviceConfigurationKeyNameEnumType::maxDcDischargePower;
	}
	if (src == "batteryActiveControlMode") {
		return DeviceConfigurationKeyNameEnumType::batteryActiveControlMode;
	}
	if (src == "defaultAcPower") {
		return DeviceConfigurationKeyNameEnumType::defaultAcPower;
	}
	if (src == "defaultDcPower") {
		return DeviceConfigurationKeyNameEnumType::defaultDcPower;
	}
	if (src == "defaultPccPower") {
		return DeviceConfigurationKeyNameEnumType::defaultPccPower;
	}
	if (src == "failsafeAcPowerSetpoint") {
		return DeviceConfigurationKeyNameEnumType::failsafeAcPowerSetpoint;
	}
	if (src == "failsafeDcPowerSetpoint") {
		return DeviceConfigurationKeyNameEnumType::failsafeDcPowerSetpoint;
	}
	if (src == "failsafePccPowerSetpoint") {
		return DeviceConfigurationKeyNameEnumType::failsafePccPowerSetpoint;
	}
	if (src == "failsafeDurationMinimum") {
		return DeviceConfigurationKeyNameEnumType::failsafeDurationMinimum;
	}
	if (src == "dischargingBelowTargetEnergyRequestPermitted") {
		return DeviceConfigurationKeyNameEnumType::dischargingBelowTargetEnergyRequestPermitted;
	}
	if (src == "incentivesSimulationCyclesMax") {
		return DeviceConfigurationKeyNameEnumType::incentivesSimulationCyclesMax;
	}
	if (src == "incentivesSimulationConcurrent") {
		return DeviceConfigurationKeyNameEnumType::incentivesSimulationConcurrent;
	}
	if (src == "incentivesTimeoutIncentiveRequest") {
		return DeviceConfigurationKeyNameEnumType::incentivesTimeoutIncentiveRequest;
	}
	if (src == "incentivesWaitIncentiveWriteable") {
		return DeviceConfigurationKeyNameEnumType::incentivesWaitIncentiveWriteable;
	}
	 return DeviceConfigurationKeyNameEnumType::incentivesWaitIncentiveWriteable;
}
bool convertToJson(const DeviceConfigurationKeyValueTypeType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case DeviceConfigurationKeyValueTypeType::boolean:
		 enumName = "boolean";
		break;
	case DeviceConfigurationKeyValueTypeType::date:
		 enumName = "date";
		break;
	case DeviceConfigurationKeyValueTypeType::dateTime:
		 enumName = "dateTime";
		break;
	case DeviceConfigurationKeyValueTypeType::duration:
		 enumName = "duration";
		break;
	case DeviceConfigurationKeyValueTypeType::string:
		 enumName = "string";
		break;
	case DeviceConfigurationKeyValueTypeType::time:
		 enumName = "time";
		break;
	case DeviceConfigurationKeyValueTypeType::scaledNumber:
		 enumName = "scaledNumber";
		break;
	case DeviceConfigurationKeyValueTypeType::integer:
		 enumName = "integer";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, DeviceConfigurationKeyValueTypeType &dst) {
	if (src == "boolean") {
		return DeviceConfigurationKeyValueTypeType::boolean;
	}
	if (src == "date") {
		return DeviceConfigurationKeyValueTypeType::date;
	}
	if (src == "dateTime") {
		return DeviceConfigurationKeyValueTypeType::dateTime;
	}
	if (src == "duration") {
		return DeviceConfigurationKeyValueTypeType::duration;
	}
	if (src == "string") {
		return DeviceConfigurationKeyValueTypeType::string;
	}
	if (src == "time") {
		return DeviceConfigurationKeyValueTypeType::time;
	}
	if (src == "scaledNumber") {
		return DeviceConfigurationKeyValueTypeType::scaledNumber;
	}
	if (src == "integer") {
		return DeviceConfigurationKeyValueTypeType::integer;
	}
	 return DeviceConfigurationKeyValueTypeType::integer;
}
bool convertToJson(const DeviceDiagnosisOperatingStateEnumType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case DeviceDiagnosisOperatingStateEnumType::normalOperation:
		 enumName = "normalOperation";
		break;
	case DeviceDiagnosisOperatingStateEnumType::standby:
		 enumName = "standby";
		break;
	case DeviceDiagnosisOperatingStateEnumType::failure:
		 enumName = "failure";
		break;
	case DeviceDiagnosisOperatingStateEnumType::serviceNeeded:
		 enumName = "serviceNeeded";
		break;
	case DeviceDiagnosisOperatingStateEnumType::overrideDetected:
		 enumName = "overrideDetected";
		break;
	case DeviceDiagnosisOperatingStateEnumType::inAlarm:
		 enumName = "inAlarm";
		break;
	case DeviceDiagnosisOperatingStateEnumType::notReachable:
		 enumName = "notReachable";
		break;
	case DeviceDiagnosisOperatingStateEnumType::finished:
		 enumName = "finished";
		break;
	case DeviceDiagnosisOperatingStateEnumType::temporarilyNotReady:
		 enumName = "temporarilyNotReady";
		break;
	case DeviceDiagnosisOperatingStateEnumType::off:
		 enumName = "off";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, DeviceDiagnosisOperatingStateEnumType &dst) {
	if (src == "normalOperation") {
		return DeviceDiagnosisOperatingStateEnumType::normalOperation;
	}
	if (src == "standby") {
		return DeviceDiagnosisOperatingStateEnumType::standby;
	}
	if (src == "failure") {
		return DeviceDiagnosisOperatingStateEnumType::failure;
	}
	if (src == "serviceNeeded") {
		return DeviceDiagnosisOperatingStateEnumType::serviceNeeded;
	}
	if (src == "overrideDetected") {
		return DeviceDiagnosisOperatingStateEnumType::overrideDetected;
	}
	if (src == "inAlarm") {
		return DeviceDiagnosisOperatingStateEnumType::inAlarm;
	}
	if (src == "notReachable") {
		return DeviceDiagnosisOperatingStateEnumType::notReachable;
	}
	if (src == "finished") {
		return DeviceDiagnosisOperatingStateEnumType::finished;
	}
	if (src == "temporarilyNotReady") {
		return DeviceDiagnosisOperatingStateEnumType::temporarilyNotReady;
	}
	if (src == "off") {
		return DeviceDiagnosisOperatingStateEnumType::off;
	}
	 return DeviceDiagnosisOperatingStateEnumType::off;
}
bool convertToJson(const PowerSupplyConditionEnumType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case PowerSupplyConditionEnumType::good:
		 enumName = "good";
		break;
	case PowerSupplyConditionEnumType::low:
		 enumName = "low";
		break;
	case PowerSupplyConditionEnumType::critical:
		 enumName = "critical";
		break;
	case PowerSupplyConditionEnumType::unknown:
		 enumName = "unknown";
		break;
	case PowerSupplyConditionEnumType::error:
		 enumName = "error";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, PowerSupplyConditionEnumType &dst) {
	if (src == "good") {
		return PowerSupplyConditionEnumType::good;
	}
	if (src == "low") {
		return PowerSupplyConditionEnumType::low;
	}
	if (src == "critical") {
		return PowerSupplyConditionEnumType::critical;
	}
	if (src == "unknown") {
		return PowerSupplyConditionEnumType::unknown;
	}
	if (src == "error") {
		return PowerSupplyConditionEnumType::error;
	}
	 return PowerSupplyConditionEnumType::error;
}
bool convertToJson(const ElectricalConnectionMeasurandVariantEnumType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case ElectricalConnectionMeasurandVariantEnumType::amplitude:
		 enumName = "amplitude";
		break;
	case ElectricalConnectionMeasurandVariantEnumType::rms:
		 enumName = "rms";
		break;
	case ElectricalConnectionMeasurandVariantEnumType::instantaneous:
		 enumName = "instantaneous";
		break;
	case ElectricalConnectionMeasurandVariantEnumType::angle:
		 enumName = "angle";
		break;
	case ElectricalConnectionMeasurandVariantEnumType::cosPhi:
		 enumName = "cosPhi";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, ElectricalConnectionMeasurandVariantEnumType &dst) {
	if (src == "amplitude") {
		return ElectricalConnectionMeasurandVariantEnumType::amplitude;
	}
	if (src == "rms") {
		return ElectricalConnectionMeasurandVariantEnumType::rms;
	}
	if (src == "instantaneous") {
		return ElectricalConnectionMeasurandVariantEnumType::instantaneous;
	}
	if (src == "angle") {
		return ElectricalConnectionMeasurandVariantEnumType::angle;
	}
	if (src == "cosPhi") {
		return ElectricalConnectionMeasurandVariantEnumType::cosPhi;
	}
	 return ElectricalConnectionMeasurandVariantEnumType::cosPhi;
}
bool convertToJson(const ElectricalConnectionVoltageTypeEnumType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case ElectricalConnectionVoltageTypeEnumType::ac:
		 enumName = "ac";
		break;
	case ElectricalConnectionVoltageTypeEnumType::dc:
		 enumName = "dc";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, ElectricalConnectionVoltageTypeEnumType &dst) {
	if (src == "ac") {
		return ElectricalConnectionVoltageTypeEnumType::ac;
	}
	if (src == "dc") {
		return ElectricalConnectionVoltageTypeEnumType::dc;
	}
	 return ElectricalConnectionVoltageTypeEnumType::dc;
}
bool convertToJson(const ElectricalConnectionAcMeasurementTypeEnumType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case ElectricalConnectionAcMeasurementTypeEnumType::real:
		 enumName = "real";
		break;
	case ElectricalConnectionAcMeasurementTypeEnumType::reactive:
		 enumName = "reactive";
		break;
	case ElectricalConnectionAcMeasurementTypeEnumType::apparent:
		 enumName = "apparent";
		break;
	case ElectricalConnectionAcMeasurementTypeEnumType::phase:
		 enumName = "phase";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, ElectricalConnectionAcMeasurementTypeEnumType &dst) {
	if (src == "real") {
		return ElectricalConnectionAcMeasurementTypeEnumType::real;
	}
	if (src == "reactive") {
		return ElectricalConnectionAcMeasurementTypeEnumType::reactive;
	}
	if (src == "apparent") {
		return ElectricalConnectionAcMeasurementTypeEnumType::apparent;
	}
	if (src == "phase") {
		return ElectricalConnectionAcMeasurementTypeEnumType::phase;
	}
	 return ElectricalConnectionAcMeasurementTypeEnumType::phase;
}
bool convertToJson(const ElectricalConnectionPhaseNameEnumType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case ElectricalConnectionPhaseNameEnumType::a:
		 enumName = "a";
		break;
	case ElectricalConnectionPhaseNameEnumType::b:
		 enumName = "b";
		break;
	case ElectricalConnectionPhaseNameEnumType::c:
		 enumName = "c";
		break;
	case ElectricalConnectionPhaseNameEnumType::ab:
		 enumName = "ab";
		break;
	case ElectricalConnectionPhaseNameEnumType::bc:
		 enumName = "bc";
		break;
	case ElectricalConnectionPhaseNameEnumType::ac:
		 enumName = "ac";
		break;
	case ElectricalConnectionPhaseNameEnumType::abc:
		 enumName = "abc";
		break;
	case ElectricalConnectionPhaseNameEnumType::neutral:
		 enumName = "neutral";
		break;
	case ElectricalConnectionPhaseNameEnumType::ground:
		 enumName = "ground";
		break;
	case ElectricalConnectionPhaseNameEnumType::none:
		 enumName = "none";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, ElectricalConnectionPhaseNameEnumType &dst) {
	if (src == "a") {
		return ElectricalConnectionPhaseNameEnumType::a;
	}
	if (src == "b") {
		return ElectricalConnectionPhaseNameEnumType::b;
	}
	if (src == "c") {
		return ElectricalConnectionPhaseNameEnumType::c;
	}
	if (src == "ab") {
		return ElectricalConnectionPhaseNameEnumType::ab;
	}
	if (src == "bc") {
		return ElectricalConnectionPhaseNameEnumType::bc;
	}
	if (src == "ac") {
		return ElectricalConnectionPhaseNameEnumType::ac;
	}
	if (src == "abc") {
		return ElectricalConnectionPhaseNameEnumType::abc;
	}
	if (src == "neutral") {
		return ElectricalConnectionPhaseNameEnumType::neutral;
	}
	if (src == "ground") {
		return ElectricalConnectionPhaseNameEnumType::ground;
	}
	if (src == "none") {
		return ElectricalConnectionPhaseNameEnumType::none;
	}
	 return ElectricalConnectionPhaseNameEnumType::none;
}
bool convertToJson(const ElectricalConnectionConnectionPointType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case ElectricalConnectionConnectionPointType::grid:
		 enumName = "grid";
		break;
	case ElectricalConnectionConnectionPointType::home:
		 enumName = "home";
		break;
	case ElectricalConnectionConnectionPointType::pv:
		 enumName = "pv";
		break;
	case ElectricalConnectionConnectionPointType::sd:
		 enumName = "sd";
		break;
	case ElectricalConnectionConnectionPointType::other:
		 enumName = "other";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, ElectricalConnectionConnectionPointType &dst) {
	if (src == "grid") {
		return ElectricalConnectionConnectionPointType::grid;
	}
	if (src == "home") {
		return ElectricalConnectionConnectionPointType::home;
	}
	if (src == "pv") {
		return ElectricalConnectionConnectionPointType::pv;
	}
	if (src == "sd") {
		return ElectricalConnectionConnectionPointType::sd;
	}
	if (src == "other") {
		return ElectricalConnectionConnectionPointType::other;
	}
	 return ElectricalConnectionConnectionPointType::other;
}
bool convertToJson(const ElectricalConnectionCharacteristicContextEnumType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case ElectricalConnectionCharacteristicContextEnumType::device:
		 enumName = "device";
		break;
	case ElectricalConnectionCharacteristicContextEnumType::entity:
		 enumName = "entity";
		break;
	case ElectricalConnectionCharacteristicContextEnumType::inverter:
		 enumName = "inverter";
		break;
	case ElectricalConnectionCharacteristicContextEnumType::pvString:
		 enumName = "pvString";
		break;
	case ElectricalConnectionCharacteristicContextEnumType::battery:
		 enumName = "battery";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, ElectricalConnectionCharacteristicContextEnumType &dst) {
	if (src == "device") {
		return ElectricalConnectionCharacteristicContextEnumType::device;
	}
	if (src == "entity") {
		return ElectricalConnectionCharacteristicContextEnumType::entity;
	}
	if (src == "inverter") {
		return ElectricalConnectionCharacteristicContextEnumType::inverter;
	}
	if (src == "pvString") {
		return ElectricalConnectionCharacteristicContextEnumType::pvString;
	}
	if (src == "battery") {
		return ElectricalConnectionCharacteristicContextEnumType::battery;
	}
	 return ElectricalConnectionCharacteristicContextEnumType::battery;
}
bool convertToJson(const ElectricalConnectionCharacteristicTypeEnumType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case ElectricalConnectionCharacteristicTypeEnumType::powerConsumptionMin:
		 enumName = "powerConsumptionMin";
		break;
	case ElectricalConnectionCharacteristicTypeEnumType::powerConsumptionMax:
		 enumName = "powerConsumptionMax";
		break;
	case ElectricalConnectionCharacteristicTypeEnumType::powerConsumptionNominalMin:
		 enumName = "powerConsumptionNominalMin";
		break;
	case ElectricalConnectionCharacteristicTypeEnumType::powerConsumptionNominalMax:
		 enumName = "powerConsumptionNominalMax";
		break;
	case ElectricalConnectionCharacteristicTypeEnumType::powerProductionMin:
		 enumName = "powerProductionMin";
		break;
	case ElectricalConnectionCharacteristicTypeEnumType::powerProductionMax:
		 enumName = "powerProductionMax";
		break;
	case ElectricalConnectionCharacteristicTypeEnumType::powerProductionNominalMin:
		 enumName = "powerProductionNominalMin";
		break;
	case ElectricalConnectionCharacteristicTypeEnumType::powerProductionNominalMax:
		 enumName = "powerProductionNominalMax";
		break;
	case ElectricalConnectionCharacteristicTypeEnumType::energyCapacityNominalMax:
		 enumName = "energyCapacityNominalMax";
		break;
	case ElectricalConnectionCharacteristicTypeEnumType::contractualConsumptionNominalMax:
		 enumName = "contractualConsumptionNominalMax";
		break;
	case ElectricalConnectionCharacteristicTypeEnumType::contractualProductionNominalMax:
		 enumName = "contractualProductionNominalMax";
		break;
	case ElectricalConnectionCharacteristicTypeEnumType::apparentPowerProductionNominalMax:
		 enumName = "apparentPowerProductionNominalMax";
		break;
	case ElectricalConnectionCharacteristicTypeEnumType::apparentPowerConsumptionNominalMax:
		 enumName = "apparentPowerConsumptionNominalMax";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, ElectricalConnectionCharacteristicTypeEnumType &dst) {
	if (src == "powerConsumptionMin") {
		return ElectricalConnectionCharacteristicTypeEnumType::powerConsumptionMin;
	}
	if (src == "powerConsumptionMax") {
		return ElectricalConnectionCharacteristicTypeEnumType::powerConsumptionMax;
	}
	if (src == "powerConsumptionNominalMin") {
		return ElectricalConnectionCharacteristicTypeEnumType::powerConsumptionNominalMin;
	}
	if (src == "powerConsumptionNominalMax") {
		return ElectricalConnectionCharacteristicTypeEnumType::powerConsumptionNominalMax;
	}
	if (src == "powerProductionMin") {
		return ElectricalConnectionCharacteristicTypeEnumType::powerProductionMin;
	}
	if (src == "powerProductionMax") {
		return ElectricalConnectionCharacteristicTypeEnumType::powerProductionMax;
	}
	if (src == "powerProductionNominalMin") {
		return ElectricalConnectionCharacteristicTypeEnumType::powerProductionNominalMin;
	}
	if (src == "powerProductionNominalMax") {
		return ElectricalConnectionCharacteristicTypeEnumType::powerProductionNominalMax;
	}
	if (src == "energyCapacityNominalMax") {
		return ElectricalConnectionCharacteristicTypeEnumType::energyCapacityNominalMax;
	}
	if (src == "contractualConsumptionNominalMax") {
		return ElectricalConnectionCharacteristicTypeEnumType::contractualConsumptionNominalMax;
	}
	if (src == "contractualProductionNominalMax") {
		return ElectricalConnectionCharacteristicTypeEnumType::contractualProductionNominalMax;
	}
	if (src == "apparentPowerProductionNominalMax") {
		return ElectricalConnectionCharacteristicTypeEnumType::apparentPowerProductionNominalMax;
	}
	if (src == "apparentPowerConsumptionNominalMax") {
		return ElectricalConnectionCharacteristicTypeEnumType::apparentPowerConsumptionNominalMax;
	}
	 return ElectricalConnectionCharacteristicTypeEnumType::apparentPowerConsumptionNominalMax;
}
bool convertToJson(const HvacSystemFunctionTypeEnumType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case HvacSystemFunctionTypeEnumType::heating:
		 enumName = "heating";
		break;
	case HvacSystemFunctionTypeEnumType::cooling:
		 enumName = "cooling";
		break;
	case HvacSystemFunctionTypeEnumType::ventilation:
		 enumName = "ventilation";
		break;
	case HvacSystemFunctionTypeEnumType::dhw:
		 enumName = "dhw";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, HvacSystemFunctionTypeEnumType &dst) {
	if (src == "heating") {
		return HvacSystemFunctionTypeEnumType::heating;
	}
	if (src == "cooling") {
		return HvacSystemFunctionTypeEnumType::cooling;
	}
	if (src == "ventilation") {
		return HvacSystemFunctionTypeEnumType::ventilation;
	}
	if (src == "dhw") {
		return HvacSystemFunctionTypeEnumType::dhw;
	}
	 return HvacSystemFunctionTypeEnumType::dhw;
}
bool convertToJson(const HvacOperationModeTypeEnumType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case HvacOperationModeTypeEnumType::auto:
		 enumName = "auto";
		break;
	case HvacOperationModeTypeEnumType::on:
		 enumName = "on";
		break;
	case HvacOperationModeTypeEnumType::off:
		 enumName = "off";
		break;
	case HvacOperationModeTypeEnumType::eco:
		 enumName = "eco";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, HvacOperationModeTypeEnumType &dst) {
	if (src == "auto") {
		return HvacOperationModeTypeEnumType::auto;
	}
	if (src == "on") {
		return HvacOperationModeTypeEnumType::on;
	}
	if (src == "off") {
		return HvacOperationModeTypeEnumType::off;
	}
	if (src == "eco") {
		return HvacOperationModeTypeEnumType::eco;
	}
	 return HvacOperationModeTypeEnumType::eco;
}
bool convertToJson(const HvacOverrunTypeEnumType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case HvacOverrunTypeEnumType::oneTimeDhw:
		 enumName = "oneTimeDhw";
		break;
	case HvacOverrunTypeEnumType::party:
		 enumName = "party";
		break;
	case HvacOverrunTypeEnumType::sgReadyCondition1:
		 enumName = "sgReadyCondition1";
		break;
	case HvacOverrunTypeEnumType::sgReadyCondition3:
		 enumName = "sgReadyCondition3";
		break;
	case HvacOverrunTypeEnumType::sgReadyCondition4:
		 enumName = "sgReadyCondition4";
		break;
	case HvacOverrunTypeEnumType::oneDayAway:
		 enumName = "oneDayAway";
		break;
	case HvacOverrunTypeEnumType::oneDayAtHome:
		 enumName = "oneDayAtHome";
		break;
	case HvacOverrunTypeEnumType::oneTimeVentilation:
		 enumName = "oneTimeVentilation";
		break;
	case HvacOverrunTypeEnumType::hvacSystemOff:
		 enumName = "hvacSystemOff";
		break;
	case HvacOverrunTypeEnumType::valveKick:
		 enumName = "valveKick";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, HvacOverrunTypeEnumType &dst) {
	if (src == "oneTimeDhw") {
		return HvacOverrunTypeEnumType::oneTimeDhw;
	}
	if (src == "party") {
		return HvacOverrunTypeEnumType::party;
	}
	if (src == "sgReadyCondition1") {
		return HvacOverrunTypeEnumType::sgReadyCondition1;
	}
	if (src == "sgReadyCondition3") {
		return HvacOverrunTypeEnumType::sgReadyCondition3;
	}
	if (src == "sgReadyCondition4") {
		return HvacOverrunTypeEnumType::sgReadyCondition4;
	}
	if (src == "oneDayAway") {
		return HvacOverrunTypeEnumType::oneDayAway;
	}
	if (src == "oneDayAtHome") {
		return HvacOverrunTypeEnumType::oneDayAtHome;
	}
	if (src == "oneTimeVentilation") {
		return HvacOverrunTypeEnumType::oneTimeVentilation;
	}
	if (src == "hvacSystemOff") {
		return HvacOverrunTypeEnumType::hvacSystemOff;
	}
	if (src == "valveKick") {
		return HvacOverrunTypeEnumType::valveKick;
	}
	 return HvacOverrunTypeEnumType::valveKick;
}
bool convertToJson(const HvacOverrunStatusEnumType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case HvacOverrunStatusEnumType::active:
		 enumName = "active";
		break;
	case HvacOverrunStatusEnumType::running:
		 enumName = "running";
		break;
	case HvacOverrunStatusEnumType::finished:
		 enumName = "finished";
		break;
	case HvacOverrunStatusEnumType::inactive:
		 enumName = "inactive";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, HvacOverrunStatusEnumType &dst) {
	if (src == "active") {
		return HvacOverrunStatusEnumType::active;
	}
	if (src == "running") {
		return HvacOverrunStatusEnumType::running;
	}
	if (src == "finished") {
		return HvacOverrunStatusEnumType::finished;
	}
	if (src == "inactive") {
		return HvacOverrunStatusEnumType::inactive;
	}
	 return HvacOverrunStatusEnumType::inactive;
}
bool convertToJson(const SetpointTypeEnumType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case SetpointTypeEnumType::valueAbsolute:
		 enumName = "valueAbsolute";
		break;
	case SetpointTypeEnumType::valueRelative:
		 enumName = "valueRelative";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, SetpointTypeEnumType &dst) {
	if (src == "valueAbsolute") {
		return SetpointTypeEnumType::valueAbsolute;
	}
	if (src == "valueRelative") {
		return SetpointTypeEnumType::valueRelative;
	}
	 return SetpointTypeEnumType::valueRelative;
}
bool convertToJson(const TimeSlotTimeModeEnumType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case TimeSlotTimeModeEnumType::absolute:
		 enumName = "absolute";
		break;
	case TimeSlotTimeModeEnumType::recurring:
		 enumName = "recurring";
		break;
	case TimeSlotTimeModeEnumType::both:
		 enumName = "both";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, TimeSlotTimeModeEnumType &dst) {
	if (src == "absolute") {
		return TimeSlotTimeModeEnumType::absolute;
	}
	if (src == "recurring") {
		return TimeSlotTimeModeEnumType::recurring;
	}
	if (src == "both") {
		return TimeSlotTimeModeEnumType::both;
	}
	 return TimeSlotTimeModeEnumType::both;
}
bool convertToJson(const TierBoundaryTypeEnumType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case TierBoundaryTypeEnumType::powerBoundary:
		 enumName = "powerBoundary";
		break;
	case TierBoundaryTypeEnumType::energyBoundary:
		 enumName = "energyBoundary";
		break;
	case TierBoundaryTypeEnumType::countBoundary:
		 enumName = "countBoundary";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, TierBoundaryTypeEnumType &dst) {
	if (src == "powerBoundary") {
		return TierBoundaryTypeEnumType::powerBoundary;
	}
	if (src == "energyBoundary") {
		return TierBoundaryTypeEnumType::energyBoundary;
	}
	if (src == "countBoundary") {
		return TierBoundaryTypeEnumType::countBoundary;
	}
	 return TierBoundaryTypeEnumType::countBoundary;
}
bool convertToJson(const TierTypeEnumType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case TierTypeEnumType::fixedCost:
		 enumName = "fixedCost";
		break;
	case TierTypeEnumType::dynamicCost:
		 enumName = "dynamicCost";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, TierTypeEnumType &dst) {
	if (src == "fixedCost") {
		return TierTypeEnumType::fixedCost;
	}
	if (src == "dynamicCost") {
		return TierTypeEnumType::dynamicCost;
	}
	 return TierTypeEnumType::dynamicCost;
}
bool convertToJson(const IncentiveTypeEnumType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case IncentiveTypeEnumType::absoluteCost:
		 enumName = "absoluteCost";
		break;
	case IncentiveTypeEnumType::relativeCost:
		 enumName = "relativeCost";
		break;
	case IncentiveTypeEnumType::renewableEnergyPercentage:
		 enumName = "renewableEnergyPercentage";
		break;
	case IncentiveTypeEnumType::co2Emission:
		 enumName = "co2Emission";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, IncentiveTypeEnumType &dst) {
	if (src == "absoluteCost") {
		return IncentiveTypeEnumType::absoluteCost;
	}
	if (src == "relativeCost") {
		return IncentiveTypeEnumType::relativeCost;
	}
	if (src == "renewableEnergyPercentage") {
		return IncentiveTypeEnumType::renewableEnergyPercentage;
	}
	if (src == "co2Emission") {
		return IncentiveTypeEnumType::co2Emission;
	}
	 return IncentiveTypeEnumType::co2Emission;
}
bool convertToJson(const IncentiveValueTypeEnumType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case IncentiveValueTypeEnumType::value:
		 enumName = "value";
		break;
	case IncentiveValueTypeEnumType::averageValue:
		 enumName = "averageValue";
		break;
	case IncentiveValueTypeEnumType::minValue:
		 enumName = "minValue";
		break;
	case IncentiveValueTypeEnumType::maxValue:
		 enumName = "maxValue";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, IncentiveValueTypeEnumType &dst) {
	if (src == "value") {
		return IncentiveValueTypeEnumType::value;
	}
	if (src == "averageValue") {
		return IncentiveValueTypeEnumType::averageValue;
	}
	if (src == "minValue") {
		return IncentiveValueTypeEnumType::minValue;
	}
	if (src == "maxValue") {
		return IncentiveValueTypeEnumType::maxValue;
	}
	 return IncentiveValueTypeEnumType::maxValue;
}
bool convertToJson(const LoadControlEventActionEnumType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case LoadControlEventActionEnumType::pause:
		 enumName = "pause";
		break;
	case LoadControlEventActionEnumType::resume:
		 enumName = "resume";
		break;
	case LoadControlEventActionEnumType::reduce:
		 enumName = "reduce";
		break;
	case LoadControlEventActionEnumType::increase:
		 enumName = "increase";
		break;
	case LoadControlEventActionEnumType::emergency:
		 enumName = "emergency";
		break;
	case LoadControlEventActionEnumType::normal:
		 enumName = "normal";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, LoadControlEventActionEnumType &dst) {
	if (src == "pause") {
		return LoadControlEventActionEnumType::pause;
	}
	if (src == "resume") {
		return LoadControlEventActionEnumType::resume;
	}
	if (src == "reduce") {
		return LoadControlEventActionEnumType::reduce;
	}
	if (src == "increase") {
		return LoadControlEventActionEnumType::increase;
	}
	if (src == "emergency") {
		return LoadControlEventActionEnumType::emergency;
	}
	if (src == "normal") {
		return LoadControlEventActionEnumType::normal;
	}
	 return LoadControlEventActionEnumType::normal;
}
bool convertToJson(const LoadControlEventStateEnumType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case LoadControlEventStateEnumType::eventAccepted:
		 enumName = "eventAccepted";
		break;
	case LoadControlEventStateEnumType::eventStarted:
		 enumName = "eventStarted";
		break;
	case LoadControlEventStateEnumType::eventStopped:
		 enumName = "eventStopped";
		break;
	case LoadControlEventStateEnumType::eventRejected:
		 enumName = "eventRejected";
		break;
	case LoadControlEventStateEnumType::eventCancelled:
		 enumName = "eventCancelled";
		break;
	case LoadControlEventStateEnumType::eventError:
		 enumName = "eventError";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, LoadControlEventStateEnumType &dst) {
	if (src == "eventAccepted") {
		return LoadControlEventStateEnumType::eventAccepted;
	}
	if (src == "eventStarted") {
		return LoadControlEventStateEnumType::eventStarted;
	}
	if (src == "eventStopped") {
		return LoadControlEventStateEnumType::eventStopped;
	}
	if (src == "eventRejected") {
		return LoadControlEventStateEnumType::eventRejected;
	}
	if (src == "eventCancelled") {
		return LoadControlEventStateEnumType::eventCancelled;
	}
	if (src == "eventError") {
		return LoadControlEventStateEnumType::eventError;
	}
	 return LoadControlEventStateEnumType::eventError;
}
bool convertToJson(const LoadControlLimitTypeEnumType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case LoadControlLimitTypeEnumType::minValueLimit:
		 enumName = "minValueLimit";
		break;
	case LoadControlLimitTypeEnumType::maxValueLimit:
		 enumName = "maxValueLimit";
		break;
	case LoadControlLimitTypeEnumType::signDependentAbsValueLimit:
		 enumName = "signDependentAbsValueLimit";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, LoadControlLimitTypeEnumType &dst) {
	if (src == "minValueLimit") {
		return LoadControlLimitTypeEnumType::minValueLimit;
	}
	if (src == "maxValueLimit") {
		return LoadControlLimitTypeEnumType::maxValueLimit;
	}
	if (src == "signDependentAbsValueLimit") {
		return LoadControlLimitTypeEnumType::signDependentAbsValueLimit;
	}
	 return LoadControlLimitTypeEnumType::signDependentAbsValueLimit;
}
bool convertToJson(const LoadControlCategoryEnumType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case LoadControlCategoryEnumType::obligation:
		 enumName = "obligation";
		break;
	case LoadControlCategoryEnumType::recommendation:
		 enumName = "recommendation";
		break;
	case LoadControlCategoryEnumType::optimization:
		 enumName = "optimization";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, LoadControlCategoryEnumType &dst) {
	if (src == "obligation") {
		return LoadControlCategoryEnumType::obligation;
	}
	if (src == "recommendation") {
		return LoadControlCategoryEnumType::recommendation;
	}
	if (src == "optimization") {
		return LoadControlCategoryEnumType::optimization;
	}
	 return LoadControlCategoryEnumType::optimization;
}
bool convertToJson(const NetworkManagementFeatureSetType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case NetworkManagementFeatureSetType::gateway:
		 enumName = "gateway";
		break;
	case NetworkManagementFeatureSetType::router:
		 enumName = "router";
		break;
	case NetworkManagementFeatureSetType::smart:
		 enumName = "smart";
		break;
	case NetworkManagementFeatureSetType::simple:
		 enumName = "simple";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, NetworkManagementFeatureSetType &dst) {
	if (src == "gateway") {
		return NetworkManagementFeatureSetType::gateway;
	}
	if (src == "router") {
		return NetworkManagementFeatureSetType::router;
	}
	if (src == "smart") {
		return NetworkManagementFeatureSetType::smart;
	}
	if (src == "simple") {
		return NetworkManagementFeatureSetType::simple;
	}
	 return NetworkManagementFeatureSetType::simple;
}
bool convertToJson(const NetworkManagementProcessStateStateType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case NetworkManagementProcessStateStateType::succeeded:
		 enumName = "succeeded";
		break;
	case NetworkManagementProcessStateStateType::failed:
		 enumName = "failed";
		break;
	case NetworkManagementProcessStateStateType::aborted:
		 enumName = "aborted";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, NetworkManagementProcessStateStateType &dst) {
	if (src == "succeeded") {
		return NetworkManagementProcessStateStateType::succeeded;
	}
	if (src == "failed") {
		return NetworkManagementProcessStateStateType::failed;
	}
	if (src == "aborted") {
		return NetworkManagementProcessStateStateType::aborted;
	}
	 return NetworkManagementProcessStateStateType::aborted;
}
bool convertToJson(const NetworkManagementStateChangeType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case NetworkManagementStateChangeType::added:
		 enumName = "added";
		break;
	case NetworkManagementStateChangeType::removed:
		 enumName = "removed";
		break;
	case NetworkManagementStateChangeType::modified:
		 enumName = "modified";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, NetworkManagementStateChangeType &dst) {
	if (src == "added") {
		return NetworkManagementStateChangeType::added;
	}
	if (src == "removed") {
		return NetworkManagementStateChangeType::removed;
	}
	if (src == "modified") {
		return NetworkManagementStateChangeType::modified;
	}
	 return NetworkManagementStateChangeType::modified;
}
bool convertToJson(const SensingStateEnumType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case SensingStateEnumType::on:
		 enumName = "on";
		break;
	case SensingStateEnumType::off:
		 enumName = "off";
		break;
	case SensingStateEnumType::toggle:
		 enumName = "toggle";
		break;
	case SensingStateEnumType::level:
		 enumName = "level";
		break;
	case SensingStateEnumType::levelUp:
		 enumName = "levelUp";
		break;
	case SensingStateEnumType::levelDown:
		 enumName = "levelDown";
		break;
	case SensingStateEnumType::levelStart:
		 enumName = "levelStart";
		break;
	case SensingStateEnumType::levelStop:
		 enumName = "levelStop";
		break;
	case SensingStateEnumType::levelAbsolute:
		 enumName = "levelAbsolute";
		break;
	case SensingStateEnumType::levelRelative:
		 enumName = "levelRelative";
		break;
	case SensingStateEnumType::levelPercentageAbsolute:
		 enumName = "levelPercentageAbsolute";
		break;
	case SensingStateEnumType::levelPercentageRelative:
		 enumName = "levelPercentageRelative";
		break;
	case SensingStateEnumType::pressed:
		 enumName = "pressed";
		break;
	case SensingStateEnumType::longPressed:
		 enumName = "longPressed";
		break;
	case SensingStateEnumType::released:
		 enumName = "released";
		break;
	case SensingStateEnumType::changed:
		 enumName = "changed";
		break;
	case SensingStateEnumType::started:
		 enumName = "started";
		break;
	case SensingStateEnumType::stopped:
		 enumName = "stopped";
		break;
	case SensingStateEnumType::paused:
		 enumName = "paused";
		break;
	case SensingStateEnumType::middle:
		 enumName = "middle";
		break;
	case SensingStateEnumType::up:
		 enumName = "up";
		break;
	case SensingStateEnumType::down:
		 enumName = "down";
		break;
	case SensingStateEnumType::forward:
		 enumName = "forward";
		break;
	case SensingStateEnumType::backwards:
		 enumName = "backwards";
		break;
	case SensingStateEnumType::open:
		 enumName = "open";
		break;
	case SensingStateEnumType::closed:
		 enumName = "closed";
		break;
	case SensingStateEnumType::opening:
		 enumName = "opening";
		break;
	case SensingStateEnumType::closing:
		 enumName = "closing";
		break;
	case SensingStateEnumType::high:
		 enumName = "high";
		break;
	case SensingStateEnumType::low:
		 enumName = "low";
		break;
	case SensingStateEnumType::day:
		 enumName = "day";
		break;
	case SensingStateEnumType::night:
		 enumName = "night";
		break;
	case SensingStateEnumType::detected:
		 enumName = "detected";
		break;
	case SensingStateEnumType::notDetected:
		 enumName = "notDetected";
		break;
	case SensingStateEnumType::alarmed:
		 enumName = "alarmed";
		break;
	case SensingStateEnumType::notAlarmed:
		 enumName = "notAlarmed";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, SensingStateEnumType &dst) {
	if (src == "on") {
		return SensingStateEnumType::on;
	}
	if (src == "off") {
		return SensingStateEnumType::off;
	}
	if (src == "toggle") {
		return SensingStateEnumType::toggle;
	}
	if (src == "level") {
		return SensingStateEnumType::level;
	}
	if (src == "levelUp") {
		return SensingStateEnumType::levelUp;
	}
	if (src == "levelDown") {
		return SensingStateEnumType::levelDown;
	}
	if (src == "levelStart") {
		return SensingStateEnumType::levelStart;
	}
	if (src == "levelStop") {
		return SensingStateEnumType::levelStop;
	}
	if (src == "levelAbsolute") {
		return SensingStateEnumType::levelAbsolute;
	}
	if (src == "levelRelative") {
		return SensingStateEnumType::levelRelative;
	}
	if (src == "levelPercentageAbsolute") {
		return SensingStateEnumType::levelPercentageAbsolute;
	}
	if (src == "levelPercentageRelative") {
		return SensingStateEnumType::levelPercentageRelative;
	}
	if (src == "pressed") {
		return SensingStateEnumType::pressed;
	}
	if (src == "longPressed") {
		return SensingStateEnumType::longPressed;
	}
	if (src == "released") {
		return SensingStateEnumType::released;
	}
	if (src == "changed") {
		return SensingStateEnumType::changed;
	}
	if (src == "started") {
		return SensingStateEnumType::started;
	}
	if (src == "stopped") {
		return SensingStateEnumType::stopped;
	}
	if (src == "paused") {
		return SensingStateEnumType::paused;
	}
	if (src == "middle") {
		return SensingStateEnumType::middle;
	}
	if (src == "up") {
		return SensingStateEnumType::up;
	}
	if (src == "down") {
		return SensingStateEnumType::down;
	}
	if (src == "forward") {
		return SensingStateEnumType::forward;
	}
	if (src == "backwards") {
		return SensingStateEnumType::backwards;
	}
	if (src == "open") {
		return SensingStateEnumType::open;
	}
	if (src == "closed") {
		return SensingStateEnumType::closed;
	}
	if (src == "opening") {
		return SensingStateEnumType::opening;
	}
	if (src == "closing") {
		return SensingStateEnumType::closing;
	}
	if (src == "high") {
		return SensingStateEnumType::high;
	}
	if (src == "low") {
		return SensingStateEnumType::low;
	}
	if (src == "day") {
		return SensingStateEnumType::day;
	}
	if (src == "night") {
		return SensingStateEnumType::night;
	}
	if (src == "detected") {
		return SensingStateEnumType::detected;
	}
	if (src == "notDetected") {
		return SensingStateEnumType::notDetected;
	}
	if (src == "alarmed") {
		return SensingStateEnumType::alarmed;
	}
	if (src == "notAlarmed") {
		return SensingStateEnumType::notAlarmed;
	}
	 return SensingStateEnumType::notAlarmed;
}
bool convertToJson(const SensingTypeEnumType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case SensingTypeEnumType::switch:
		 enumName = "switch";
		break;
	case SensingTypeEnumType::button:
		 enumName = "button";
		break;
	case SensingTypeEnumType::level:
		 enumName = "level";
		break;
	case SensingTypeEnumType::levelSwitch:
		 enumName = "levelSwitch";
		break;
	case SensingTypeEnumType::windowHandle:
		 enumName = "windowHandle";
		break;
	case SensingTypeEnumType::contactSensor:
		 enumName = "contactSensor";
		break;
	case SensingTypeEnumType::occupancySensor:
		 enumName = "occupancySensor";
		break;
	case SensingTypeEnumType::motionDetector:
		 enumName = "motionDetector";
		break;
	case SensingTypeEnumType::fireDetector:
		 enumName = "fireDetector";
		break;
	case SensingTypeEnumType::smokeDetector:
		 enumName = "smokeDetector";
		break;
	case SensingTypeEnumType::heatDetector:
		 enumName = "heatDetector";
		break;
	case SensingTypeEnumType::waterDetector:
		 enumName = "waterDetector";
		break;
	case SensingTypeEnumType::gasDetector:
		 enumName = "gasDetector";
		break;
	case SensingTypeEnumType::alarmSensor:
		 enumName = "alarmSensor";
		break;
	case SensingTypeEnumType::powerAlarmSensor:
		 enumName = "powerAlarmSensor";
		break;
	case SensingTypeEnumType::dayNightIndicator:
		 enumName = "dayNightIndicator";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, SensingTypeEnumType &dst) {
	if (src == "switch") {
		return SensingTypeEnumType::switch;
	}
	if (src == "button") {
		return SensingTypeEnumType::button;
	}
	if (src == "level") {
		return SensingTypeEnumType::level;
	}
	if (src == "levelSwitch") {
		return SensingTypeEnumType::levelSwitch;
	}
	if (src == "windowHandle") {
		return SensingTypeEnumType::windowHandle;
	}
	if (src == "contactSensor") {
		return SensingTypeEnumType::contactSensor;
	}
	if (src == "occupancySensor") {
		return SensingTypeEnumType::occupancySensor;
	}
	if (src == "motionDetector") {
		return SensingTypeEnumType::motionDetector;
	}
	if (src == "fireDetector") {
		return SensingTypeEnumType::fireDetector;
	}
	if (src == "smokeDetector") {
		return SensingTypeEnumType::smokeDetector;
	}
	if (src == "heatDetector") {
		return SensingTypeEnumType::heatDetector;
	}
	if (src == "waterDetector") {
		return SensingTypeEnumType::waterDetector;
	}
	if (src == "gasDetector") {
		return SensingTypeEnumType::gasDetector;
	}
	if (src == "alarmSensor") {
		return SensingTypeEnumType::alarmSensor;
	}
	if (src == "powerAlarmSensor") {
		return SensingTypeEnumType::powerAlarmSensor;
	}
	if (src == "dayNightIndicator") {
		return SensingTypeEnumType::dayNightIndicator;
	}
	 return SensingTypeEnumType::dayNightIndicator;
}
bool convertToJson(const StateInformationFunctionalityEnumType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case StateInformationFunctionalityEnumType::externalOverrideFromGrid:
		 enumName = "externalOverrideFromGrid";
		break;
	case StateInformationFunctionalityEnumType::autonomousGridSupport:
		 enumName = "autonomousGridSupport";
		break;
	case StateInformationFunctionalityEnumType::islandingMode:
		 enumName = "islandingMode";
		break;
	case StateInformationFunctionalityEnumType::balancing:
		 enumName = "balancing";
		break;
	case StateInformationFunctionalityEnumType::trickleCharging:
		 enumName = "trickleCharging";
		break;
	case StateInformationFunctionalityEnumType::calibration:
		 enumName = "calibration";
		break;
	case StateInformationFunctionalityEnumType::commissioningMissing:
		 enumName = "commissioningMissing";
		break;
	case StateInformationFunctionalityEnumType::sleeping:
		 enumName = "sleeping";
		break;
	case StateInformationFunctionalityEnumType::starting:
		 enumName = "starting";
		break;
	case StateInformationFunctionalityEnumType::mppt:
		 enumName = "mppt";
		break;
	case StateInformationFunctionalityEnumType::throttled:
		 enumName = "throttled";
		break;
	case StateInformationFunctionalityEnumType::shuttingDown:
		 enumName = "shuttingDown";
		break;
	case StateInformationFunctionalityEnumType::manualShutdown:
		 enumName = "manualShutdown";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, StateInformationFunctionalityEnumType &dst) {
	if (src == "externalOverrideFromGrid") {
		return StateInformationFunctionalityEnumType::externalOverrideFromGrid;
	}
	if (src == "autonomousGridSupport") {
		return StateInformationFunctionalityEnumType::autonomousGridSupport;
	}
	if (src == "islandingMode") {
		return StateInformationFunctionalityEnumType::islandingMode;
	}
	if (src == "balancing") {
		return StateInformationFunctionalityEnumType::balancing;
	}
	if (src == "trickleCharging") {
		return StateInformationFunctionalityEnumType::trickleCharging;
	}
	if (src == "calibration") {
		return StateInformationFunctionalityEnumType::calibration;
	}
	if (src == "commissioningMissing") {
		return StateInformationFunctionalityEnumType::commissioningMissing;
	}
	if (src == "sleeping") {
		return StateInformationFunctionalityEnumType::sleeping;
	}
	if (src == "starting") {
		return StateInformationFunctionalityEnumType::starting;
	}
	if (src == "mppt") {
		return StateInformationFunctionalityEnumType::mppt;
	}
	if (src == "throttled") {
		return StateInformationFunctionalityEnumType::throttled;
	}
	if (src == "shuttingDown") {
		return StateInformationFunctionalityEnumType::shuttingDown;
	}
	if (src == "manualShutdown") {
		return StateInformationFunctionalityEnumType::manualShutdown;
	}
	 return StateInformationFunctionalityEnumType::manualShutdown;
}
bool convertToJson(const StateInformationFailureEnumType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case StateInformationFailureEnumType::inverterDefective:
		 enumName = "inverterDefective";
		break;
	case StateInformationFailureEnumType::batteryOvercurrentProtection:
		 enumName = "batteryOvercurrentProtection";
		break;
	case StateInformationFailureEnumType::pvStringOvercurrentProtection:
		 enumName = "pvStringOvercurrentProtection";
		break;
	case StateInformationFailureEnumType::gridFault:
		 enumName = "gridFault";
		break;
	case StateInformationFailureEnumType::groundFault:
		 enumName = "groundFault";
		break;
	case StateInformationFailureEnumType::acDisconnected:
		 enumName = "acDisconnected";
		break;
	case StateInformationFailureEnumType::dcDisconnected:
		 enumName = "dcDisconnected";
		break;
	case StateInformationFailureEnumType::cabinetOpen:
		 enumName = "cabinetOpen";
		break;
	case StateInformationFailureEnumType::overTemperature:
		 enumName = "overTemperature";
		break;
	case StateInformationFailureEnumType::underTemperature:
		 enumName = "underTemperature";
		break;
	case StateInformationFailureEnumType::frequencyAboveLimit:
		 enumName = "frequencyAboveLimit";
		break;
	case StateInformationFailureEnumType::frequencyBelowLimit:
		 enumName = "frequencyBelowLimit";
		break;
	case StateInformationFailureEnumType::acVoltageAboveLimit:
		 enumName = "acVoltageAboveLimit";
		break;
	case StateInformationFailureEnumType::acVoltageBelowLimit:
		 enumName = "acVoltageBelowLimit";
		break;
	case StateInformationFailureEnumType::dcVoltageAboveLimit:
		 enumName = "dcVoltageAboveLimit";
		break;
	case StateInformationFailureEnumType::dcVoltageBelowLimit:
		 enumName = "dcVoltageBelowLimit";
		break;
	case StateInformationFailureEnumType::hardwareTestFailure:
		 enumName = "hardwareTestFailure";
		break;
	case StateInformationFailureEnumType::genericInternalError:
		 enumName = "genericInternalError";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, StateInformationFailureEnumType &dst) {
	if (src == "inverterDefective") {
		return StateInformationFailureEnumType::inverterDefective;
	}
	if (src == "batteryOvercurrentProtection") {
		return StateInformationFailureEnumType::batteryOvercurrentProtection;
	}
	if (src == "pvStringOvercurrentProtection") {
		return StateInformationFailureEnumType::pvStringOvercurrentProtection;
	}
	if (src == "gridFault") {
		return StateInformationFailureEnumType::gridFault;
	}
	if (src == "groundFault") {
		return StateInformationFailureEnumType::groundFault;
	}
	if (src == "acDisconnected") {
		return StateInformationFailureEnumType::acDisconnected;
	}
	if (src == "dcDisconnected") {
		return StateInformationFailureEnumType::dcDisconnected;
	}
	if (src == "cabinetOpen") {
		return StateInformationFailureEnumType::cabinetOpen;
	}
	if (src == "overTemperature") {
		return StateInformationFailureEnumType::overTemperature;
	}
	if (src == "underTemperature") {
		return StateInformationFailureEnumType::underTemperature;
	}
	if (src == "frequencyAboveLimit") {
		return StateInformationFailureEnumType::frequencyAboveLimit;
	}
	if (src == "frequencyBelowLimit") {
		return StateInformationFailureEnumType::frequencyBelowLimit;
	}
	if (src == "acVoltageAboveLimit") {
		return StateInformationFailureEnumType::acVoltageAboveLimit;
	}
	if (src == "acVoltageBelowLimit") {
		return StateInformationFailureEnumType::acVoltageBelowLimit;
	}
	if (src == "dcVoltageAboveLimit") {
		return StateInformationFailureEnumType::dcVoltageAboveLimit;
	}
	if (src == "dcVoltageBelowLimit") {
		return StateInformationFailureEnumType::dcVoltageBelowLimit;
	}
	if (src == "hardwareTestFailure") {
		return StateInformationFailureEnumType::hardwareTestFailure;
	}
	if (src == "genericInternalError") {
		return StateInformationFailureEnumType::genericInternalError;
	}
	 return StateInformationFailureEnumType::genericInternalError;
}
bool convertToJson(const StateInformationCategoryEnumType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case StateInformationCategoryEnumType::functionality:
		 enumName = "functionality";
		break;
	case StateInformationCategoryEnumType::failure:
		 enumName = "failure";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, StateInformationCategoryEnumType &dst) {
	if (src == "functionality") {
		return StateInformationCategoryEnumType::functionality;
	}
	if (src == "failure") {
		return StateInformationCategoryEnumType::failure;
	}
	 return StateInformationCategoryEnumType::failure;
}
bool convertToJson(const SupplyConditionEventTypeEnumType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case SupplyConditionEventTypeEnumType::thesholdExceeded:
		 enumName = "thesholdExceeded";
		break;
	case SupplyConditionEventTypeEnumType::fallenBelowThreshold:
		 enumName = "fallenBelowThreshold";
		break;
	case SupplyConditionEventTypeEnumType::supplyInterrupt:
		 enumName = "supplyInterrupt";
		break;
	case SupplyConditionEventTypeEnumType::releaseOfLimitations:
		 enumName = "releaseOfLimitations";
		break;
	case SupplyConditionEventTypeEnumType::otherProblem:
		 enumName = "otherProblem";
		break;
	case SupplyConditionEventTypeEnumType::gridConditionUpdate:
		 enumName = "gridConditionUpdate";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, SupplyConditionEventTypeEnumType &dst) {
	if (src == "thesholdExceeded") {
		return SupplyConditionEventTypeEnumType::thesholdExceeded;
	}
	if (src == "fallenBelowThreshold") {
		return SupplyConditionEventTypeEnumType::fallenBelowThreshold;
	}
	if (src == "supplyInterrupt") {
		return SupplyConditionEventTypeEnumType::supplyInterrupt;
	}
	if (src == "releaseOfLimitations") {
		return SupplyConditionEventTypeEnumType::releaseOfLimitations;
	}
	if (src == "otherProblem") {
		return SupplyConditionEventTypeEnumType::otherProblem;
	}
	if (src == "gridConditionUpdate") {
		return SupplyConditionEventTypeEnumType::gridConditionUpdate;
	}
	 return SupplyConditionEventTypeEnumType::gridConditionUpdate;
}
bool convertToJson(const SupplyConditionOriginatorEnumType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case SupplyConditionOriginatorEnumType::externDSO:
		 enumName = "externDSO";
		break;
	case SupplyConditionOriginatorEnumType::externSupplier:
		 enumName = "externSupplier";
		break;
	case SupplyConditionOriginatorEnumType::internalLimit:
		 enumName = "internalLimit";
		break;
	case SupplyConditionOriginatorEnumType::internalService:
		 enumName = "internalService";
		break;
	case SupplyConditionOriginatorEnumType::internalUser:
		 enumName = "internalUser";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, SupplyConditionOriginatorEnumType &dst) {
	if (src == "externDSO") {
		return SupplyConditionOriginatorEnumType::externDSO;
	}
	if (src == "externSupplier") {
		return SupplyConditionOriginatorEnumType::externSupplier;
	}
	if (src == "internalLimit") {
		return SupplyConditionOriginatorEnumType::internalLimit;
	}
	if (src == "internalService") {
		return SupplyConditionOriginatorEnumType::internalService;
	}
	if (src == "internalUser") {
		return SupplyConditionOriginatorEnumType::internalUser;
	}
	 return SupplyConditionOriginatorEnumType::internalUser;
}
bool convertToJson(const GridConditionEnumType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case GridConditionEnumType::consumptionRed:
		 enumName = "consumptionRed";
		break;
	case GridConditionEnumType::consumptionYellow:
		 enumName = "consumptionYellow";
		break;
	case GridConditionEnumType::good:
		 enumName = "good";
		break;
	case GridConditionEnumType::productionYellow:
		 enumName = "productionYellow";
		break;
	case GridConditionEnumType::productionRed:
		 enumName = "productionRed";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, GridConditionEnumType &dst) {
	if (src == "consumptionRed") {
		return GridConditionEnumType::consumptionRed;
	}
	if (src == "consumptionYellow") {
		return GridConditionEnumType::consumptionYellow;
	}
	if (src == "good") {
		return GridConditionEnumType::good;
	}
	if (src == "productionYellow") {
		return GridConditionEnumType::productionYellow;
	}
	if (src == "productionRed") {
		return GridConditionEnumType::productionRed;
	}
	 return GridConditionEnumType::productionRed;
}
bool convertToJson(const TaskManagementJobSourceEnumType &src, JsonVariant& dst) {
	String enumName;
	switch(src) {
	case TaskManagementJobSourceEnumType::internalMechanism:
		 enumName = "internalMechanism";
		break;
	case TaskManagementJobSourceEnumType::userInteraction:
		 enumName = "userInteraction";
		break;
	case TaskManagementJobSourceEnumType::externalConfiguration:
		 enumName = "externalConfiguration";
		break;
	} 
	 return enumName;
}
void convertFromJson(const JsonVariant& src, TaskManagementJobSourceEnumType &dst) {
	if (src == "internalMechanism") {
		return TaskManagementJobSourceEnumType::internalMechanism;
	}
	if (src == "userInteraction") {
		return TaskManagementJobSourceEnumType::userInteraction;
	}
	if (src == "externalConfiguration") {
		return TaskManagementJobSourceEnumType::externalConfiguration;
	}
	 return TaskManagementJobSourceEnumType::externalConfiguration;
}
